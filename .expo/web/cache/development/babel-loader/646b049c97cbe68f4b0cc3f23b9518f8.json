{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"label\", \"children\", \"onClose\", \"onOpen\", \"defaultIsOpen\", \"placement\", \"openDelay\", \"closeDelay\", \"closeOnClick\", \"offset\", \"isDisabled\", \"hasArrow\", \"arrowSize\", \"isOpen\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport { useControllableState, useKeyboardDismissable } from \"../../../hooks\";\nimport { Popper } from \"../Popper\";\nimport { composeEventHandlers, mergeRefs } from \"../../../utils\";\nimport { PresenceTransition } from \"../Transitions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { usePropsResolution } from \"../../../hooks\";\nimport Box from \"../../primitives/Box\";\nimport { useId } from '@react-aria/utils';\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nexport var Tooltip = function Tooltip(_ref3) {\n  var label = _ref3.label,\n      children = _ref3.children,\n      onClose = _ref3.onClose,\n      onOpen = _ref3.onOpen,\n      defaultIsOpen = _ref3.defaultIsOpen,\n      placement = _ref3.placement,\n      _ref3$openDelay = _ref3.openDelay,\n      openDelay = _ref3$openDelay === void 0 ? 0 : _ref3$openDelay,\n      _ref3$closeDelay = _ref3.closeDelay,\n      closeDelay = _ref3$closeDelay === void 0 ? 0 : _ref3$closeDelay,\n      _ref3$closeOnClick = _ref3.closeOnClick,\n      closeOnClick = _ref3$closeOnClick === void 0 ? true : _ref3$closeOnClick,\n      offset = _ref3.offset,\n      isDisabled = _ref3.isDisabled,\n      hasArrow = _ref3.hasArrow,\n      _ref3$arrowSize = _ref3.arrowSize,\n      arrowSize = _ref3$arrowSize === void 0 ? 12 : _ref3$arrowSize,\n      isOpenProp = _ref3.isOpen,\n      props = _objectWithoutProperties(_ref3, _excluded);\n\n  var _ref, _ref2, _props$backgroundColo;\n\n  if (hasArrow && offset === undefined) {\n    offset = 0;\n  } else {\n    offset = 6;\n  }\n\n  var resolvedProps = usePropsResolution('Tooltip', props);\n\n  var _useControllableState = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: function onChange(value) {\n      value ? onOpen && onOpen() : onClose && onClose();\n    }\n  }),\n      _useControllableState2 = _slicedToArray(_useControllableState, 2),\n      isOpen = _useControllableState2[0],\n      setIsOpen = _useControllableState2[1];\n\n  var arrowBg = (_ref = (_ref2 = (_props$backgroundColo = props.backgroundColor) !== null && _props$backgroundColo !== void 0 ? _props$backgroundColo : props.bgColor) !== null && _ref2 !== void 0 ? _ref2 : props.bg) !== null && _ref !== void 0 ? _ref : resolvedProps.bg;\n  var targetRef = React.useRef(null);\n  var enterTimeout = React.useRef();\n  var exitTimeout = React.useRef();\n  var tooltipID = useId();\n  var openWithDelay = React.useCallback(function () {\n    if (!isDisabled) {\n      enterTimeout.current = setTimeout(function () {\n        return setIsOpen(true);\n      }, openDelay);\n    }\n  }, [isDisabled, setIsOpen, openDelay]);\n  var closeWithDelay = React.useCallback(function () {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current);\n    }\n\n    exitTimeout.current = setTimeout(function () {\n      return setIsOpen(false);\n    }, closeDelay);\n  }, [closeDelay, setIsOpen]);\n  React.useEffect(function () {\n    return function () {\n      clearTimeout(enterTimeout.current);\n      clearTimeout(exitTimeout.current);\n    };\n  }, []);\n  var newChildren = children;\n\n  if (typeof children === 'string') {\n    newChildren = React.createElement(Box, null, children);\n  }\n\n  newChildren = React.cloneElement(newChildren, {\n    'onPress': composeEventHandlers(newChildren.props.onPress, function () {\n      if (closeOnClick) {\n        closeWithDelay();\n      }\n    }),\n    'onFocus': composeEventHandlers(newChildren.props.onFocus, openWithDelay),\n    'onBlur': composeEventHandlers(newChildren.props.onBlur, closeWithDelay),\n    'onMouseEnter': composeEventHandlers(newChildren.props.onMouseEnter, openWithDelay),\n    'onMouseLeave': composeEventHandlers(newChildren.props.onMouseLeave, closeWithDelay),\n    'ref': mergeRefs([newChildren.ref, targetRef]),\n    'aria-describedby': isOpen ? tooltipID : undefined\n  });\n  useKeyboardDismissable({\n    enabled: isOpen,\n    callback: function callback() {\n      return setIsOpen(false);\n    }\n  });\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(React.Fragment, null, newChildren, isOpen && React.createElement(OverlayContainer, null, React.createElement(PresenceTransition, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1,\n      transition: {\n        duration: 150\n      }\n    },\n    exit: {\n      opacity: 0,\n      transition: {\n        duration: 100\n      }\n    },\n    visible: isOpen,\n    style: StyleSheet.absoluteFill\n  }, React.createElement(Popper, {\n    triggerRef: targetRef,\n    onClose: function onClose() {\n      return setIsOpen(false);\n    },\n    placement: placement,\n    offset: offset\n  }, React.createElement(Popper.Content, {\n    isOpen: isOpen\n  }, hasArrow && React.createElement(Popper.Arrow, {\n    borderColor: \"transparent\",\n    backgroundColor: arrowBg,\n    height: arrowSize,\n    width: arrowSize\n  }), React.createElement(Box, _extends({}, resolvedProps, {\n    accessibilityRole: Platform.OS === 'web' ? 'tooltip' : undefined,\n    nativeID: tooltipID\n  }), label))))));\n};","map":{"version":3,"sources":["Tooltip.tsx"],"names":["Tooltip","openDelay","closeDelay","closeOnClick","arrowSize","isOpen","props","hasArrow","offset","resolvedProps","usePropsResolution","useControllableState","value","defaultValue","onChange","onOpen","onClose","arrowBg","targetRef","React","enterTimeout","exitTimeout","tooltipID","useId","openWithDelay","setTimeout","setIsOpen","closeWithDelay","clearTimeout","newChildren","composeEventHandlers","mergeRefs","undefined","useKeyboardDismissable","enabled","callback","useHasResponsiveProps","opacity","transition","duration","StyleSheet","absoluteFill","Platform"],"mappings":"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","sourcesContent":["import { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport { useControllableState, useKeyboardDismissable } from '../../../hooks';\nimport { Popper } from '../Popper';\nimport { composeEventHandlers, mergeRefs } from '../../../utils';\nimport { PresenceTransition } from '../Transitions';\nimport { Platform, StyleSheet } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport Box from '../../primitives/Box';\nimport type { ITooltipProps } from './types';\nimport { useId } from '@react-aria/utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const Tooltip = ({\n  label,\n  children,\n  onClose,\n  onOpen,\n  defaultIsOpen,\n  placement,\n  openDelay = 0,\n  closeDelay = 0,\n  closeOnClick = true,\n  offset,\n  isDisabled,\n  hasArrow,\n  arrowSize = 12,\n  isOpen: isOpenProp,\n  ...props\n}: ITooltipProps) => {\n  if (hasArrow && offset === undefined) {\n    offset = 0;\n  } else {\n    offset = 6;\n  }\n\n  const resolvedProps = usePropsResolution('Tooltip', props);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: (value) => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    },\n  });\n\n  const arrowBg =\n    props.backgroundColor ?? props.bgColor ?? props.bg ?? resolvedProps.bg;\n\n  const targetRef = React.useRef(null);\n\n  const enterTimeout = React.useRef<any>();\n  const exitTimeout = React.useRef<any>();\n  const tooltipID = useId();\n\n  const openWithDelay = React.useCallback(() => {\n    if (!isDisabled) {\n      enterTimeout.current = setTimeout(() => setIsOpen(true), openDelay);\n    }\n  }, [isDisabled, setIsOpen, openDelay]);\n\n  const closeWithDelay = React.useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current);\n    }\n    exitTimeout.current = setTimeout(() => setIsOpen(false), closeDelay);\n  }, [closeDelay, setIsOpen]);\n\n  React.useEffect(\n    () => () => {\n      clearTimeout(enterTimeout.current);\n      clearTimeout(exitTimeout.current);\n    },\n    []\n  );\n\n  let newChildren = children;\n\n  if (typeof children === 'string') {\n    newChildren = <Box>{children}</Box>;\n  }\n\n  newChildren = React.cloneElement(newChildren, {\n    'onPress': composeEventHandlers<any>(newChildren.props.onPress, () => {\n      if (closeOnClick) {\n        closeWithDelay();\n      }\n    }),\n    'onFocus': composeEventHandlers<any>(\n      newChildren.props.onFocus,\n      openWithDelay\n    ),\n    'onBlur': composeEventHandlers<any>(\n      newChildren.props.onBlur,\n      closeWithDelay\n    ),\n    'onMouseEnter': composeEventHandlers<any>(\n      newChildren.props.onMouseEnter,\n      openWithDelay\n    ),\n    'onMouseLeave': composeEventHandlers<any>(\n      newChildren.props.onMouseLeave,\n      closeWithDelay\n    ),\n    'ref': mergeRefs([newChildren.ref, targetRef]),\n\n    'aria-describedby': isOpen ? tooltipID : undefined,\n  });\n\n  useKeyboardDismissable({\n    enabled: isOpen,\n    callback: () => setIsOpen(false),\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <>\n      {newChildren}\n      {isOpen && (\n        <OverlayContainer>\n          <PresenceTransition\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1, transition: { duration: 150 } }}\n            exit={{ opacity: 0, transition: { duration: 100 } }}\n            visible={isOpen}\n            style={StyleSheet.absoluteFill}\n          >\n            <Popper\n              triggerRef={targetRef}\n              onClose={() => setIsOpen(false)}\n              placement={placement}\n              offset={offset}\n            >\n              <Popper.Content isOpen={isOpen}>\n                {hasArrow && (\n                  <Popper.Arrow\n                    borderColor=\"transparent\"\n                    backgroundColor={arrowBg}\n                    height={arrowSize}\n                    width={arrowSize}\n                  />\n                )}\n                <Box\n                  {...resolvedProps}\n                  //@ts-ignore\n                  accessibilityRole={\n                    Platform.OS === 'web' ? 'tooltip' : undefined\n                  }\n                  nativeID={tooltipID}\n                >\n                  {label}\n                </Box>\n              </Popper.Content>\n            </Popper>\n          </PresenceTransition>\n        </OverlayContainer>\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}