{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport Text from \"../components/primitives/Text\";\nexport var addTextAndPropsToStrings = function addTextAndPropsToStrings(children, props) {\n  var childArray = React.Children.map(children, function (child) {\n    if (typeof child === 'string' || typeof child === 'number') {\n      return React.createElement(Text, props, child);\n    } else {\n      if (!child) {\n        return null;\n      }\n\n      return React.cloneElement(child, _objectSpread(_objectSpread({}, props), child.props));\n    }\n  });\n  return childArray;\n};","map":{"version":3,"sources":["addTextAndPropsToStrings.tsx"],"names":["addTextAndPropsToStrings","childArray","child","props"],"mappings":";;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,IAAA;AAEA,OAAO,IAAMA,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAA,QAAA,EAAA,KAAA,EAA+B;EACrE,IAAMC,UAAU,GAAG,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,QAAA,EAA8BC,UAAAA,KAAD,EAAW;IACzD,IAAI,OAAA,KAAA,KAAA,QAAA,IAA6B,OAAA,KAAA,KAAjC,QAAA,EAA4D;MAC1D,OAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,KAAA,EAAP,KAAO,CAAP;IADF,CAAA,MAEO;MACL,IAAI,CAAJ,KAAA,EAAY;QACV,OAAA,IAAA;MACD;;MACD,OAAO,KAAK,CAAL,YAAA,CAAA,KAAA,kCAA0B,KAA1B,GAEFA,KAAK,CAACC,KAFJ,EAAP;IAID;EAXH,CAAmB,CAAnB;EAaA,OAAA,UAAA;AAdK,CAAA","sourcesContent":["import React from 'react';\nimport Text from '../components/primitives/Text';\n\nexport const addTextAndPropsToStrings = (children: any, props: any) => {\n  const childArray = React.Children.map(children, (child) => {\n    if (typeof child === 'string' || typeof child === 'number') {\n      return <Text {...props}>{child}</Text>;\n    } else {\n      if (!child) {\n        return null;\n      }\n      return React.cloneElement(child, {\n        ...props,\n        ...child.props,\n      });\n    }\n  });\n  return childArray;\n};\n"]},"metadata":{},"sourceType":"module"}