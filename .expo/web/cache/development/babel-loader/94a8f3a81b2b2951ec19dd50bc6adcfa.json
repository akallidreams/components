{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"value\"],\n    _excluded2 = [\"children\", \"onPress\", \"_icon\", \"_stack\", \"_text\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo, useContext } from 'react';\nimport { CheckIcon } from \"../../primitives/Icon/Icons\";\nimport Box from \"../../primitives/Box\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport MenuItem from \"./MenuItem\";\nimport { MenuOptionContext } from \"./MenuOptionGroup\";\nimport { useMenuOptionItem } from \"./useMenu\";\nimport { HStack } from \"../../primitives/Stack\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar MenuItemOption = function MenuItemOption(_ref, ref) {\n  var value = _ref.value,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useContext = useContext(MenuOptionContext),\n      values = _useContext.values,\n      onChange = _useContext.onChange,\n      type = _useContext.type;\n\n  var isChecked = values.includes(value);\n  var menuOptionProps = useMenuOptionItem({\n    isChecked: isChecked,\n    type: type\n  });\n\n  var _usePropsResolution = usePropsResolution('MenuItem', props, {\n    isChecked: isChecked\n  }),\n      children = _usePropsResolution.children,\n      onPress = _usePropsResolution.onPress,\n      _icon = _usePropsResolution._icon,\n      _stack = _usePropsResolution._stack,\n      _text = _usePropsResolution._text,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var modifiedOnPress = function modifiedOnPress(e) {\n    onChange(value);\n    onPress && onPress(e);\n  };\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(MenuItem, _extends({}, resolvedProps, menuOptionProps, {\n    accessibilityRole: \"button\",\n    onPress: modifiedOnPress,\n    ref: ref\n  }), React.createElement(HStack, _stack, React.createElement(CheckIcon, _icon), React.createElement(Box, {\n    _text: _text\n  }, children)));\n};\n\nexport default memo(forwardRef(MenuItemOption));","map":{"version":3,"sources":["MenuItemOption.tsx"],"names":["MenuItemOption","props","type","useContext","isChecked","values","menuOptionProps","useMenuOptionItem","resolvedProps","usePropsResolution","modifiedOnPress","e","onChange","onPress","useHasResponsiveProps","ref","_text","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,UAAA,EAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,SAAA;AACA,OAAA,GAAA;AACA,SAAA,kBAAA;AACA,OAAA,QAAA;AAEA,SAAA,iBAAA;AACA,SAAA,iBAAA;AACA,SAAA,MAAA;AACA,SAAA,qBAAA;;AAEA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,OAAA,GAAA,EAGlB;EAAA,IAFH,KAEG,QAFH,KAEG;EAAA,IAFSC,KAET;;EACH,kBAA4DE,UAAU,CAAtE,iBAAsE,CAAtE;EAAA,IAAM,MAAN,eAAM,MAAN;EAAA,IAAM,QAAN,eAAM,QAAN;EAAA,IAA0BD,IAA1B,eAA0BA,IAA1B;;EAGA,IAAME,SAAS,GAAGC,MAAM,CAANA,QAAAA,CAAlB,KAAkBA,CAAlB;EACA,IAAMC,eAAe,GAAGC,iBAAiB,CAAC;IAAEH,SAAF,EAAEA,SAAF;IAAaF,IAAAA,EAAAA;EAAb,CAAD,CAAzC;;EACA,0BAOIO,kBAAkB,CAAA,UAAA,EAAA,KAAA,EAAoB;IAAEL,SAAAA,EAAAA;EAAF,CAApB,CAPtB;EAAA,IAAM,QAAN,uBAAM,QAAN;EAAA,IAAM,OAAN,uBAAM,OAAN;EAAA,IAAM,KAAN,uBAAM,KAAN;EAAA,IAAM,MAAN,uBAAM,MAAN;EAAA,IAAM,KAAN,uBAAM,KAAN;EAAA,IAMKI,aANL;;EASA,IAAME,eAAe,GAAIC,SAAnBD,eAAmBC,CAAAA,CAAD,EAAY;IAClCC,QAAQ,CAARA,KAAQ,CAARA;IACAC,OAAO,IAAIA,OAAO,CAAlBA,CAAkB,CAAlBA;EAjBC,CAeH;;EAMA,IAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EACD,OACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,QAAA,CAAA,EAAA,EAAA,aAAA,EAAA,eAAA,EAAA;IAGE,iBAAiB,EAHnB,QAAA;IAIE,OAAO,EAJT,eAAA;IAKE,GAAG,EAAEC;EALP,CAAA,CAAA,EAOE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,MAAA,EACE,KAAA,CAAA,aAAA,CAAA,SAAA,EADF,KACE,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;IAAK,KAAK,EAAEC;EAAZ,CAAA,EAVN,QAUM,CAFF,CAPF,CADF;AA3BF,CAAA;;AA2CA,eAAeC,IAAI,CAACC,UAAU,CAA9B,cAA8B,CAAX,CAAnB","sourcesContent":["import React, { forwardRef, memo, useContext } from 'react';\nimport { CheckIcon } from '../../primitives/Icon/Icons';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport MenuItem from './MenuItem';\nimport type { IMenuItemOptionProps, IMenuOptionContextProps } from './types';\nimport { MenuOptionContext } from './MenuOptionGroup';\nimport { useMenuOptionItem } from './useMenu';\nimport { HStack } from '../../primitives/Stack';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst MenuItemOption = (\n  { value, ...props }: IMenuItemOptionProps,\n  ref: any\n) => {\n  const { values, onChange, type }: IMenuOptionContextProps = useContext(\n    MenuOptionContext\n  );\n  const isChecked = values.includes(value);\n  const menuOptionProps = useMenuOptionItem({ isChecked, type });\n  const {\n    children,\n    onPress,\n    _icon,\n    _stack,\n    _text,\n    ...resolvedProps\n  } = usePropsResolution('MenuItem', props, { isChecked });\n\n  const modifiedOnPress = (e: any) => {\n    onChange(value);\n    onPress && onPress(e);\n  };\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <MenuItem\n      {...resolvedProps}\n      {...menuOptionProps}\n      accessibilityRole=\"button\"\n      onPress={modifiedOnPress}\n      ref={ref}\n    >\n      <HStack {..._stack}>\n        <CheckIcon {..._icon} />\n        <Box _text={_text}>{children}</Box>\n      </HStack>\n    </MenuItem>\n  );\n};\n\nexport default memo(forwardRef(MenuItemOption));\n"]},"metadata":{},"sourceType":"module"}