{"ast":null,"code":"import React from 'react';\nimport { SafeAreaProvider, initialWindowMetrics as defaultInitialWindowMetrics } from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme } from \"./../theme\";\nimport HybridProvider from \"./hybrid-overlay/HybridProvider\";\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from \"../components/composites/Toast\";\nimport { defaultConfig, NativeBaseConfigProvider } from \"./NativeBaseContext\";\nimport { useToast } from \"../components/composites/Toast\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { getClosestBreakpoint, platformSpecificSpaceUnits } from \"../theme/tools/utils\";\nimport { ResponsiveQueryProvider } from \"../utils/useResponsiveQuery\";\nvar defaultInitialWindowMetricsBasedOnPlatform = Platform.select({\n  web: {\n    frame: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    insets: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }\n  },\n  default: defaultInitialWindowMetrics\n});\n\nvar NativeBaseProvider = function NativeBaseProvider(props) {\n  var _config$theme, _useWindowDimensions;\n\n  var colorModeManager = props.colorModeManager,\n      _props$config = props.config,\n      config = _props$config === void 0 ? defaultConfig : _props$config,\n      children = props.children,\n      _props$theme = props.theme,\n      propsTheme = _props$theme === void 0 ? defaultTheme : _props$theme,\n      initialWindowMetrics = props.initialWindowMetrics,\n      isSSR = props.isSSR,\n      disableContrastText = props.disableContrastText;\n  var theme = (_config$theme = config.theme) !== null && _config$theme !== void 0 ? _config$theme : propsTheme;\n  var newTheme = React.useMemo(function () {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n\n    return theme;\n  }, [config.enableRem, theme]);\n  var windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width;\n  var currentBreakpoint = React.useMemo(function () {\n    return getClosestBreakpoint(newTheme.breakpoints, windowWidth);\n  }, [windowWidth, newTheme.breakpoints]);\n  return React.createElement(NativeBaseConfigProvider, {\n    theme: newTheme,\n    config: config,\n    currentBreakpoint: currentBreakpoint,\n    isSSR: isSSR,\n    disableContrastText: disableContrastText\n  }, React.createElement(SafeAreaProvider, {\n    initialMetrics: initialWindowMetrics !== null && initialWindowMetrics !== void 0 ? initialWindowMetrics : defaultInitialWindowMetricsBasedOnPlatform\n  }, React.createElement(ResponsiveQueryProvider, {\n    disableCSSMediaQueries: !isSSR\n  }, React.createElement(HybridProvider, {\n    colorModeManager: colorModeManager,\n    options: theme.config\n  }, React.createElement(OverlayProvider, null, React.createElement(ToastProvider, null, React.createElement(InitializeToastRef, null), React.createElement(SSRProvider, null, children)))))));\n};\n\nvar InitializeToastRef = function InitializeToastRef() {\n  var toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\nexport { NativeBaseProvider };","map":{"version":3,"sources":["NativeBaseProvider.tsx"],"names":["initialWindowMetrics","theme","defaultInitialWindowMetricsBasedOnPlatform","web","frame","x","y","width","height","insets","top","left","right","bottom","default","defaultInitialWindowMetrics","NativeBaseProvider","props","config","propsTheme","disableContrastText","newTheme","platformSpecificSpaceUnits","windowWidth","useWindowDimensions","currentBreakpoint","React","getClosestBreakpoint","isSSR","InitializeToastRef","toast","useToast","ToastRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  SafeAreaProvider,\n  Metrics,\n  initialWindowMetrics as defaultInitialWindowMetrics,\n} from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme, ITheme } from './../theme';\nimport type { IColorModeProviderProps } from './color-mode';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from '../components/composites/Toast';\nimport {\n  defaultConfig,\n  INativebaseConfig,\n  NativeBaseConfigProvider,\n} from './NativeBaseContext';\nimport { useToast } from '../components/composites/Toast';\nimport { Platform, useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  platformSpecificSpaceUnits,\n} from '../theme/tools/utils';\nimport { ResponsiveQueryProvider } from '../utils/useResponsiveQuery';\n\n// For SSR to work, we need to pass initial insets as 0 values on web.\n\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\nconst defaultInitialWindowMetricsBasedOnPlatform: Metrics | null = Platform.select(\n  {\n    web: {\n      frame: { x: 0, y: 0, width: 0, height: 0 },\n      insets: { top: 0, left: 0, right: 0, bottom: 0 },\n    },\n    default: defaultInitialWindowMetrics,\n  }\n);\n\nexport interface NativeBaseProviderProps {\n  theme?: ITheme;\n  colorModeManager?: IColorModeProviderProps['colorModeManager'];\n  children?: React.ReactNode;\n  initialWindowMetrics?: any;\n  config?: INativebaseConfig;\n  isSSR?: boolean;\n  disableContrastText?: boolean;\n  // Refer https://github.com/th3rdwave/react-native-safe-area-context#testing\n}\n\nconst NativeBaseProvider = (props: NativeBaseProviderProps) => {\n  const {\n    colorModeManager,\n    config = defaultConfig,\n    children,\n    theme: propsTheme = defaultTheme,\n    initialWindowMetrics,\n    isSSR,\n    disableContrastText,\n  } = props;\n  const theme = config.theme ?? propsTheme;\n\n  const newTheme = React.useMemo(() => {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n    return theme;\n  }, [config.enableRem, theme]);\n\n  const windowWidth = useWindowDimensions()?.width;\n\n  const currentBreakpoint = React.useMemo(\n    () => getClosestBreakpoint(newTheme.breakpoints, windowWidth),\n    [windowWidth, newTheme.breakpoints]\n  );\n\n  return (\n    <NativeBaseConfigProvider\n      theme={newTheme}\n      config={config}\n      currentBreakpoint={currentBreakpoint}\n      isSSR={isSSR}\n      disableContrastText={disableContrastText}\n    >\n      <SafeAreaProvider\n        initialMetrics={\n          initialWindowMetrics ?? defaultInitialWindowMetricsBasedOnPlatform\n        }\n      >\n        <ResponsiveQueryProvider disableCSSMediaQueries={!isSSR}>\n          <HybridProvider\n            colorModeManager={colorModeManager}\n            options={theme.config}\n          >\n            <OverlayProvider>\n              <ToastProvider>\n                <InitializeToastRef />\n                <SSRProvider>{children}</SSRProvider>\n              </ToastProvider>\n            </OverlayProvider>\n          </HybridProvider>\n        </ResponsiveQueryProvider>\n      </SafeAreaProvider>\n    </NativeBaseConfigProvider>\n  );\n};\n\nconst InitializeToastRef = () => {\n  const toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\nexport { NativeBaseProvider };\n"]},"metadata":{},"sourceType":"module"}