{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useControlledState } from \"@react-stately/utils\";\nexport function useCheckboxGroupState(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _useControlledState = useControlledState(props.value, props.defaultValue || [], props.onChange),\n      _useControlledState2 = _slicedToArray(_useControlledState, 2),\n      selectedValues = _useControlledState2[0],\n      _setValue = _useControlledState2[1];\n\n  var state = {\n    value: selectedValues,\n    setValue: function setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      _setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected: function isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue: function addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      _setValue(function (values) {\n        if (!values.includes(value)) {\n          return values.concat(value);\n        }\n\n        return values;\n      });\n    },\n    removeValue: function removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      _setValue(function (values) {\n        if (values.includes(value)) {\n          return values.filter(function (existingValue) {\n            return existingValue !== value;\n          });\n        }\n\n        return values;\n      });\n    },\n    toggleValue: function toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      _setValue(function (values) {\n        if (values.includes(value)) {\n          return values.filter(function (existingValue) {\n            return existingValue !== value;\n          });\n        }\n\n        return values.concat(value);\n      });\n    }\n  };\n  return state;\n}","map":{"version":3,"sources":["packages/@react-stately/checkbox/src/useCheckboxGroupState.ts"],"names":["props","useControlledState","state","value","setValue","isDisabled","isReadOnly","isSelected","selectedValues","addValue","values","removeValue","existingValue","toggleValue"],"mappings":";;OA6CO,SAAA,qBAAA,CAAA,KAAA,EAAmF;EAAA,IAApDA,KAAoD,KAAA,KAAA,CAAA,EAAA;IAApDA,KAAoD,GAAxB,EAA5BA;EAAoD;;EACxF,0BAAiCC,kBAAkB,CAACD,KAAK,CAAN,KAAA,EAAcA,KAAK,CAALA,YAAAA,IAAd,EAAA,EAAwCA,KAAK,CAAhG,QAAmD,CAAnD;EAAA;EAAA,IAAI,cAAJ;EAAA,IAAI,SAAJ;;EAEA,IAAME,KAAyB,GAAG;IAChCC,KAAK,EAD2B,cAAA;IAEhCC,QAFgC,oBAExB,KAFwB,EAEhB;MACd,IAAIJ,KAAK,CAALA,UAAAA,IAAoBA,KAAK,CAA7B,UAAA,EAA0C;QACxC;MACD;;MAEDI,SAAQ,CAARA,KAAQ,CAARA;IAP8B,CAAA;IAShCC,UAAU,EAAEL,KAAK,CAALA,UAAAA,IAToB,KAAA;IAUhCM,UAAU,EAAEN,KAAK,CAALA,UAAAA,IAVoB,KAAA;IAWhCO,UAXgC,sBAWtB,KAXsB,EAWd;MAChB,OAAOC,cAAc,CAAdA,QAAAA,CAAP,KAAOA,CAAP;IAZ8B,CAAA;IAchCC,QAdgC,oBAcxB,KAdwB,EAchB;MACd,IAAIT,KAAK,CAALA,UAAAA,IAAoBA,KAAK,CAA7B,UAAA,EAA0C;QACxC;MACD;;MACDI,SAAQ,CAACM,UAAAA,MAAM,EAAI;QACjB,IAAI,CAACA,MAAM,CAANA,QAAAA,CAAL,KAAKA,CAAL,EAA6B;UAC3B,OAAOA,MAAM,CAANA,MAAAA,CAAP,KAAOA,CAAP;QACD;;QACD,OAAA,MAAA;MAJFN,CAAQ,CAARA;IAlB8B,CAAA;IAyBhCO,WAzBgC,uBAyBrB,KAzBqB,EAyBb;MACjB,IAAIX,KAAK,CAALA,UAAAA,IAAoBA,KAAK,CAA7B,UAAA,EAA0C;QACxC;MACD;;MACDI,SAAQ,CAACM,UAAAA,MAAM,EAAI;QACjB,IAAIA,MAAM,CAANA,QAAAA,CAAJ,KAAIA,CAAJ,EAA4B;UAC1B,OAAOA,MAAM,CAANA,MAAAA,CAAcE,UAAAA,aAAa;YAAA,OAAIA,aAAa,KAAnD,KAAkC;UAAA,CAA3BF,CAAP;QACD;;QACD,OAAA,MAAA;MAJFN,CAAQ,CAARA;IA7B8B,CAAA;IAoChCS,WApCgC,uBAoCrB,KApCqB,EAoCb;MACjB,IAAIb,KAAK,CAALA,UAAAA,IAAoBA,KAAK,CAA7B,UAAA,EAA0C;QACxC;MACD;;MACDI,SAAQ,CAACM,UAAAA,MAAM,EAAI;QACjB,IAAIA,MAAM,CAANA,QAAAA,CAAJ,KAAIA,CAAJ,EAA4B;UAC1B,OAAOA,MAAM,CAANA,MAAAA,CAAcE,UAAAA,aAAa;YAAA,OAAIA,aAAa,KAAnD,KAAkC;UAAA,CAA3BF,CAAP;QACD;;QACD,OAAOA,MAAM,CAANA,MAAAA,CAAP,KAAOA,CAAP;MAJFN,CAAQ,CAARA;IAMD;EA9C+B,CAAlC;EAiDA,OAAA,KAAA;AACD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface CheckboxGroupState {\n  /** Current selected values. */\n  readonly value: readonly string[],\n\n  /** Whether the checkbox group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the checkbox group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** Returns whether the given value is selected. */\n  isSelected(value: string): boolean,\n\n  /** Sets the selected values. */\n  setValue(value: string[]): void,\n\n  /** Adds a value to the set of selected values. */\n  addValue(value: string): void,\n\n  /** Removes a value from the set of selected values. */\n  removeValue(value: string): void,\n\n  /** Toggles a value in the set of selected values. */\n  toggleValue(value: string): void\n}\n\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useCheckboxGroupState(props: CheckboxGroupProps = {}): CheckboxGroupState {\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n\n  const state: CheckboxGroupState = {\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (!values.includes(value)) {\n          return values.concat(value);\n        }\n        return values;\n      });\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (values.includes(value)) {\n          return values.filter(existingValue => existingValue !== value);\n        }\n        return values;\n      });\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (values.includes(value)) {\n          return values.filter(existingValue => existingValue !== value);\n        }\n        return values.concat(value);\n      });\n    }\n  };\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}