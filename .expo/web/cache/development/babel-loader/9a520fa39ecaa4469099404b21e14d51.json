{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onSelectedItemChange\", \"options\", \"renderItem\", \"getOptionLabel\", \"getOptionKey\", \"onChange\", \"numberOfItems\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { useButton } from '@react-native-aria/button';\nimport { useComboBoxState } from '@react-stately/combobox';\nimport { useComboBox } from '@react-native-aria/combobox';\nimport { useListBox, useOption } from '@react-native-aria/listbox';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Item } from '@react-stately/collections';\nimport Box from \"../../primitives/Box\";\nimport { Pressable } from \"../../primitives/Pressable\";\nimport Text from \"../../primitives/Text\";\nimport { extractInObject } from \"../../../theme/tools\";\nimport { layoutPropsList } from \"./types\";\nimport { Input } from \"../../primitives/Input\";\nimport { useThemeProps } from \"../../../hooks\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nexport var Typeahead = React.forwardRef(function (_ref, ref) {\n  var onSelectedItemChange = _ref.onSelectedItemChange,\n      options = _ref.options,\n      renderItem = _ref.renderItem,\n      getOptionLabel = _ref.getOptionLabel,\n      getOptionKey = _ref.getOptionKey,\n      onChange = _ref.onChange,\n      numberOfItems = _ref.numberOfItems,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n\n  return React.createElement(ComboBoxImplementation, _extends({}, rest, {\n    onSelectionChange: onSelectedItemChange,\n    items: numberOfItems !== undefined ? options.slice(0, numberOfItems) : options,\n    onInputChange: onChange,\n    ref: ref\n  }), function (item) {\n    if (typeof item !== 'string' && getOptionLabel === undefined) {\n      throw new Error('Please use getOptionLabel prop');\n    }\n\n    if (item.id === undefined && getOptionKey === undefined) {\n      throw new Error('Please use getOptionKey prop');\n    }\n\n    var optionLabel = getOptionLabel ? getOptionLabel(item) : item;\n    var optionKey = getOptionKey ? getOptionKey(item) : item.id !== undefined ? item.id : optionLabel;\n    return React.createElement(Item, {\n      textValue: optionLabel,\n      key: optionKey\n    }, renderItem ? renderItem(item) : React.createElement(Box, {\n      p: 2,\n      justifyContent: \"center\"\n    }, React.createElement(Text, null, optionLabel)));\n  });\n});\nvar ComboBoxImplementation = React.forwardRef(function (props, ref) {\n  var _extractInObject = extractInObject(props, layoutPropsList),\n      _extractInObject2 = _slicedToArray(_extractInObject, 1),\n      layoutProps = _extractInObject2[0];\n\n  var state = useComboBoxState(props);\n  var triggerRef = React.useRef(null);\n  var inputRef = React.useRef(null);\n  var listBoxRef = React.useRef(null);\n  var popoverRef = React.useRef(null);\n\n  var _useComboBox = useComboBox(_objectSpread(_objectSpread({}, props), {}, {\n    inputRef: inputRef,\n    buttonRef: triggerRef,\n    listBoxRef: listBoxRef,\n    popoverRef: popoverRef,\n    menuTrigger: 'input'\n  }), state),\n      triggerProps = _useComboBox.buttonProps,\n      inputProps = _useComboBox.inputProps,\n      listBoxProps = _useComboBox.listBoxProps,\n      labelProps = _useComboBox.labelProps;\n\n  var toggleIconSetter = function toggleIconSetter() {\n    if (typeof props.toggleIcon === 'function') return props.toggleIcon({\n      isOpen: state.isOpen\n    });\n    return props.toggleIcon;\n  };\n\n  var _useButton = useButton(triggerProps),\n      buttonProps = _useButton.buttonProps;\n\n  return React.createElement(Box, _extends({\n    flexDirection: \"row\"\n  }, layoutProps, {\n    ref: ref\n  }), React.createElement(Box, {\n    flex: 1\n  }, props.label && React.createElement(Text, _extends({}, labelProps, {\n    pb: 1\n  }), props.label), React.createElement(Input, _extends({}, inputProps, {\n    ref: inputRef,\n    InputRightElement: React.createElement(Pressable, _extends({}, buttonProps, {\n      ref: triggerRef\n    }), toggleIconSetter())\n  })), state.isOpen && React.createElement(ListBoxPopup, _extends({}, listBoxProps, {\n    listBoxRef: listBoxRef,\n    popoverRef: popoverRef,\n    state: state,\n    label: props.label\n  }))));\n});\n\nfunction ListBoxPopup(props) {\n  var popoverRef = props.popoverRef,\n      listBoxRef = props.listBoxRef,\n      state = props.state,\n      dropdownHeight = props.dropdownHeight,\n      label = props.label;\n\n  var _useListBox = useListBox({\n    label: label,\n    autoFocus: state.focusStrategy,\n    disallowEmptySelection: true\n  }, state, listBoxRef),\n      listBoxProps = _useListBox.listBoxProps;\n\n  return React.createElement(Box, {\n    ref: popoverRef\n  }, React.createElement(Box, {\n    position: \"absolute\",\n    width: \"100%\",\n    maxHeight: dropdownHeight !== null && dropdownHeight !== void 0 ? dropdownHeight : 200\n  }, React.createElement(ScrollView, _extends({}, listBoxProps, {\n    keyboardShouldPersistTaps: \"handled\",\n    ref: function ref(node) {\n      if (Platform.OS === 'web') {\n        listBoxRef.current = findNodeHandle(node);\n      } else {\n        listBoxRef.current = node;\n      }\n    }\n  }), _toConsumableArray(state.collection).map(function (item) {\n    return React.createElement(Option, {\n      key: item.key,\n      item: item,\n      state: state\n    });\n  }))));\n}\n\nfunction Option(_ref2) {\n  var item = _ref2.item,\n      state = _ref2.state;\n  var searchItemStyle = useThemeProps('TypeAheadSearchItem', {});\n  var ref = React.useRef(null);\n  var isDisabled = state.disabledKeys.has(item.key);\n  var isSelected = state.selectionManager.isSelected(item.key);\n  var isFocused = state.selectionManager.focusedKey === item.key;\n\n  var _useOption = useOption({\n    key: item.key,\n    isDisabled: isDisabled,\n    isSelected: isSelected,\n    shouldFocusOnHover: true,\n    shouldUseVirtualFocus: true\n  }, state, ref),\n      optionProps = _useOption.optionProps;\n\n  var backgroundColor = searchItemStyle.backgroundColor;\n  var opacity = 1;\n\n  if (isSelected) {\n    backgroundColor = searchItemStyle._focus.backgroundColor;\n  } else if (isFocused) {\n    backgroundColor = searchItemStyle._focus.backgroundColor;\n  } else if (isDisabled) {\n    opacity = 0.6;\n    backgroundColor = searchItemStyle._disabled.backgroundColor;\n  }\n\n  return React.createElement(Pressable, _extends({}, optionProps, {\n    opacity: opacity,\n    cursor: isDisabled ? Platform.OS === 'web' ? 'not-allowed' : null : null,\n    backgroundColor: backgroundColor,\n    ref: ref\n  }), item.rendered);\n}","map":{"version":3,"sources":["Typeahead.tsx"],"names":["Typeahead","rest","useHasResponsiveProps","numberOfItems","options","ref","item","getOptionLabel","getOptionKey","optionLabel","optionKey","renderItem","ComboBoxImplementation","extractInObject","state","useComboBoxState","triggerRef","React","inputRef","listBoxRef","popoverRef","buttonProps","labelProps","useComboBox","buttonRef","menuTrigger","toggleIconSetter","props","isOpen","useButton","label","listBoxProps","useListBox","autoFocus","disallowEmptySelection","dropdownHeight","node","Platform","findNodeHandle","searchItemStyle","useThemeProps","isDisabled","isSelected","isFocused","optionProps","useOption","key","shouldFocusOnHover","shouldUseVirtualFocus","backgroundColor","opacity"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useButton } from '@react-native-aria/button';\nimport { ComboBoxState, useComboBoxState } from '@react-stately/combobox';\nimport { useComboBox } from '@react-native-aria/combobox';\nimport { useListBox, useOption } from '@react-native-aria/listbox';\nimport { ScrollView, findNodeHandle, Platform } from 'react-native';\nimport { Item } from '@react-stately/collections';\nimport Box from '../../primitives/Box';\nimport { Pressable } from '../../primitives/Pressable';\nimport Text from '../../primitives/Text';\nimport { extractInObject } from '../../../theme/tools';\nimport { ITypeaheadProps, IComboBoxProps, layoutPropsList } from './types';\nimport { Input } from '../../primitives/Input';\nimport { useThemeProps } from '../../../hooks';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const Typeahead = React.forwardRef(\n  (\n    {\n      onSelectedItemChange,\n      options,\n      renderItem,\n      getOptionLabel,\n      getOptionKey,\n      onChange,\n      numberOfItems,\n      ...rest\n    }: ITypeaheadProps,\n    ref?: any\n  ) => {\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(rest)) {\n      return null;\n    }\n    return (\n      <ComboBoxImplementation\n        {...rest}\n        onSelectionChange={onSelectedItemChange}\n        items={\n          numberOfItems !== undefined\n            ? options.slice(0, numberOfItems)\n            : options\n        }\n        onInputChange={onChange}\n        ref={ref}\n      >\n        {(item: any) => {\n          if (typeof item !== 'string' && getOptionLabel === undefined) {\n            throw new Error('Please use getOptionLabel prop');\n          }\n\n          if (item.id === undefined && getOptionKey === undefined) {\n            throw new Error('Please use getOptionKey prop');\n          }\n\n          const optionLabel = getOptionLabel ? getOptionLabel(item) : item;\n          const optionKey = getOptionKey\n            ? getOptionKey(item)\n            : item.id !== undefined\n            ? item.id\n            : optionLabel;\n\n          return (\n            <Item textValue={optionLabel} key={optionKey}>\n              {renderItem ? (\n                renderItem(item)\n              ) : (\n                <Box p={2} justifyContent=\"center\">\n                  <Text>{optionLabel}</Text>\n                </Box>\n              )}\n            </Item>\n          );\n        }}\n      </ComboBoxImplementation>\n    );\n  }\n);\n\nconst ComboBoxImplementation = React.forwardRef(\n  (props: IComboBoxProps, ref?: any) => {\n    const [layoutProps] = extractInObject(props, layoutPropsList);\n    let state = useComboBoxState(props);\n\n    let triggerRef = React.useRef(null);\n    let inputRef = React.useRef(null);\n    let listBoxRef = React.useRef(null);\n    let popoverRef = React.useRef(null);\n\n    let {\n      buttonProps: triggerProps,\n      inputProps,\n      listBoxProps,\n      labelProps,\n    } = useComboBox(\n      {\n        ...props,\n        inputRef,\n        buttonRef: triggerRef,\n        listBoxRef,\n        popoverRef,\n        menuTrigger: 'input',\n      },\n      state\n    );\n\n    const toggleIconSetter = () => {\n      if (typeof props.toggleIcon === 'function')\n        return props.toggleIcon({\n          isOpen: state.isOpen,\n        });\n      return props.toggleIcon;\n    };\n\n    let { buttonProps } = useButton(triggerProps);\n\n    return (\n      <Box flexDirection=\"row\" {...layoutProps} ref={ref}>\n        <Box flex={1}>\n          {props.label && (\n            <Text {...labelProps} pb={1}>\n              {props.label}\n            </Text>\n          )}\n          <Input\n            {...inputProps}\n            ref={inputRef}\n            InputRightElement={\n              // @ts-ignore - RN has hitSlop type inconsistent for View and Pressable!\n              <Pressable {...buttonProps} ref={triggerRef}>\n                {toggleIconSetter()}\n              </Pressable>\n            }\n          />\n\n          {state.isOpen && (\n            <ListBoxPopup\n              {...listBoxProps}\n              listBoxRef={listBoxRef}\n              popoverRef={popoverRef}\n              state={state}\n              label={props.label}\n            />\n          )}\n        </Box>\n      </Box>\n    );\n  }\n);\n\ntype IListBoxProps = {\n  popoverRef: any;\n  listBoxRef: any;\n  state: ComboBoxState<any>;\n  dropdownHeight: number;\n  label: string;\n};\n\nfunction ListBoxPopup(props: IListBoxProps) {\n  let { popoverRef, listBoxRef, state, dropdownHeight, label } = props;\n\n  let { listBoxProps } = useListBox(\n    {\n      label,\n      autoFocus: state.focusStrategy,\n      disallowEmptySelection: true,\n    },\n    state,\n    listBoxRef\n  );\n\n  return (\n    <Box ref={popoverRef}>\n      <Box position=\"absolute\" width=\"100%\" maxHeight={dropdownHeight ?? 200}>\n        <ScrollView\n          {...listBoxProps}\n          keyboardShouldPersistTaps=\"handled\"\n          ref={(node) => {\n            if (Platform.OS === 'web') {\n              listBoxRef.current = findNodeHandle(node);\n            } else {\n              listBoxRef.current = node;\n            }\n          }}\n        >\n          {[...state.collection].map((item) => (\n            <Option key={item.key} item={item} state={state} />\n          ))}\n        </ScrollView>\n      </Box>\n    </Box>\n  );\n}\n\nfunction Option({ item, state }: { item: any; state: ComboBoxState<any> }) {\n  const searchItemStyle = useThemeProps('TypeAheadSearchItem', {});\n\n  let ref = React.useRef(null);\n  let isDisabled = state.disabledKeys.has(item.key);\n  let isSelected = state.selectionManager.isSelected(item.key);\n  let isFocused = state.selectionManager.focusedKey === item.key;\n\n  let { optionProps } = useOption(\n    {\n      key: item.key,\n      isDisabled,\n      isSelected,\n      shouldFocusOnHover: true,\n      shouldUseVirtualFocus: true,\n    },\n    state,\n    ref\n  );\n\n  let backgroundColor = searchItemStyle.backgroundColor;\n  let opacity = 1;\n\n  if (isSelected) {\n    backgroundColor = searchItemStyle._focus.backgroundColor;\n  } else if (isFocused) {\n    backgroundColor = searchItemStyle._focus.backgroundColor;\n  } else if (isDisabled) {\n    opacity = 0.6;\n    backgroundColor = searchItemStyle._disabled.backgroundColor;\n  }\n\n  return (\n    <Pressable\n      {...optionProps}\n      opacity={opacity}\n      cursor={\n        isDisabled ? (Platform.OS === 'web' ? 'not-allowed' : null) : null\n      }\n      backgroundColor={backgroundColor}\n      ref={ref}\n    >\n      {item.rendered}\n    </Pressable>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}