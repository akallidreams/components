{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"align\", \"justify\", \"wrap\", \"basis\", \"grow\", \"shrink\", \"direction\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../Box\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar Flex = function Flex(props, ref) {\n  var _usePropsResolution = usePropsResolution('Flex', props),\n      align = _usePropsResolution.align,\n      justify = _usePropsResolution.justify,\n      wrap = _usePropsResolution.wrap,\n      basis = _usePropsResolution.basis,\n      grow = _usePropsResolution.grow,\n      shrink = _usePropsResolution.shrink,\n      direction = _usePropsResolution.direction,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Box, _extends({}, resolvedProps, {\n    flexDirection: direction || resolvedProps.flexDirection,\n    alignItems: align || resolvedProps.alignItems,\n    justifyContent: justify || resolvedProps.justifyContent,\n    flexGrow: grow || resolvedProps.flexGrow,\n    flexBasis: basis || resolvedProps.flexBasis,\n    flexShrink: shrink || resolvedProps.flexShrink,\n    flexWrap: wrap || resolvedProps.flexWrap,\n    ref: ref\n  }));\n};\n\nexport var Spacer = function Spacer(props) {\n  var resolvedProps = usePropsResolution('Spacer', props);\n  return React.createElement(Box, resolvedProps);\n};\nexport default memo(forwardRef(Flex));","map":{"version":3,"sources":["index.tsx"],"names":["Flex","resolvedProps","usePropsResolution","useHasResponsiveProps","direction","align","justify","grow","basis","shrink","wrap","ref","Spacer","props","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,GAAA;AAEA,SAAA,kBAAA;AACA,SAAA,qBAAA;;AAEA,IAAMA,IAAI,GAAG,SAAPA,IAAO,CAAA,KAAA,EAAA,GAAA,EAAiC;EAC5C,0BASIE,kBAAkB,CAAA,MAAA,EAVsB,KAUtB,CATtB;EAAA,IAAM,KAAN,uBAAM,KAAN;EAAA,IAAM,OAAN,uBAAM,OAAN;EAAA,IAAM,IAAN,uBAAM,IAAN;EAAA,IAAM,KAAN,uBAAM,KAAN;EAAA,IAAM,IAAN,uBAAM,IAAN;EAAA,IAAM,MAAN,uBAAM,MAAN;EAAA,IAAM,SAAN,uBAAM,SAAN;EAAA,IAQKD,aARL;;EAYA,IAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EAED,OACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA,EAAA,EAAA,aAAA,EAAA;IAEE,aAAa,EAAEC,SAAS,IAAIH,aAAa,CAF3C,aAAA;IAGE,UAAU,EAAEI,KAAK,IAAIJ,aAAa,CAHpC,UAAA;IAIE,cAAc,EAAEK,OAAO,IAAIL,aAAa,CAJ1C,cAAA;IAKE,QAAQ,EAAEM,IAAI,IAAIN,aAAa,CALjC,QAAA;IAME,SAAS,EAAEO,KAAK,IAAIP,aAAa,CANnC,SAAA;IAOE,UAAU,EAAEQ,MAAM,IAAIR,aAAa,CAPrC,UAAA;IAQE,QAAQ,EAAES,IAAI,IAAIT,aAAa,CARjC,QAAA;IASE,GAAG,EAAEU;EATP,CAAA,CAAA,CADF;AAjBF,CAAA;;AAiCA,OAAO,IAAMC,MAAM,GAAIC,SAAVD,MAAUC,CAAAA,KAAD,EAAgB;EACpC,IAAMZ,aAAa,GAAGC,kBAAkB,CAAA,QAAA,EAAxC,KAAwC,CAAxC;EAEA,OAAO,KAAA,CAAA,aAAA,CAAA,GAAA,EAAP,aAAO,CAAP;AAHK,CAAA;AAOP,eAAeY,IAAI,CAACC,UAAU,CAA9B,IAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport type { IFlexProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Flex = (props: IFlexProps, ref: any) => {\n  const {\n    align,\n    justify,\n    wrap,\n    basis,\n    grow,\n    shrink,\n    direction,\n    ...resolvedProps\n  } = usePropsResolution('Flex', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      {...resolvedProps}\n      flexDirection={direction || resolvedProps.flexDirection}\n      alignItems={align || resolvedProps.alignItems}\n      justifyContent={justify || resolvedProps.justifyContent}\n      flexGrow={grow || resolvedProps.flexGrow}\n      flexBasis={basis || resolvedProps.flexBasis}\n      flexShrink={shrink || resolvedProps.flexShrink}\n      flexWrap={wrap || resolvedProps.flexWrap}\n      ref={ref}\n    />\n  );\n};\n\n//Spacer Component that adds space between components where it is placed\nexport const Spacer = (props: any) => {\n  const resolvedProps = usePropsResolution('Spacer', props);\n\n  return <Box {...resolvedProps} />;\n};\n\nexport type { IFlexProps };\nexport default memo(forwardRef(Flex));\n"]},"metadata":{},"sourceType":"module"}