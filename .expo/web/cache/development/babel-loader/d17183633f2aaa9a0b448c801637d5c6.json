{"ast":null,"code":"import { useTheme } from \"./useTheme\";\nexport function useResolvedFontFamily(props) {\n  var fontFamily = props.fontFamily,\n      fontStyle = props.fontStyle,\n      fontWeight = props.fontWeight;\n  var newFontFamily = fontFamily;\n  var newFontStyle = fontStyle;\n  var newFontWeight = fontWeight;\n\n  var _useTheme = useTheme(),\n      fontConfig = _useTheme.fontConfig,\n      fontWeights = _useTheme.fontWeights,\n      fonts = _useTheme.fonts;\n\n  if (fontWeight && fontStyle && fontFamily && fontFamily in fonts) {\n    var fontToken = fonts[fontFamily];\n\n    if (fontConfig && fontConfig[fontToken]) {\n      newFontWeight = undefined;\n      newFontStyle = undefined;\n      var fontWeightNumber = fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      var fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle\n  };\n}","map":{"version":3,"sources":["useResolvedFontFamily.ts"],"names":["fontWeight","newFontFamily","newFontStyle","newFontWeight","fonts","useTheme","fontFamily","fontToken","fontConfig","fontWeightNumber","fontWeights","fontVariant","fontStyle"],"mappings":"AAAA,SAAA,QAAA;AAWA,OAAO,SAAA,qBAAA,CAAA,KAAA,EAIJ;EACD,IAAM,UAAN,GAAA,KAAA,CAAM,UAAN;EAAA,IAAM,SAAN,GAAA,KAAA,CAAM,SAAN;EAAA,IAA+BA,UAA/B,GAAA,KAAA,CAA+BA,UAA/B;EACA,IAAIC,aAAa,GAAjB,UAAA;EACA,IAAIC,YAAY,GAAhB,SAAA;EACA,IAAIC,aAAa,GAAjB,UAAA;;EAEA,gBAA2CE,QAA3C,EAAA;EAAA,IAAM,UAAN,aAAM,UAAN;EAAA,IAAM,WAAN,aAAM,WAAN;EAAA,IAAiCD,KAAjC,aAAiCA,KAAjC;;EACA,IAAIJ,UAAU,IAAVA,SAAAA,IAAAA,UAAAA,IAAyCM,UAAU,IAAvD,KAAA,EAAkE;IAEhE,IAAMC,SAAc,GAAGH,KAAK,CAA5B,UAA4B,CAA5B;;IACA,IAAII,UAAU,IAAIA,UAAU,CAA5B,SAA4B,CAA5B,EAAyC;MAKvCL,aAAa,GAL0B,SAKvCA;MAEAD,YAAY,GAAZA,SAAAA;MAEA,IAAIO,gBAAgB,GAClBT,UAAU,IAAVA,WAAAA,GAA4BU,WAAW,CAAvCV,UAAuC,CAAvCA,GADF,UAAA;MAEA,IAAIW,WAAW,GAAGH,UAAU,CAAVA,SAAU,CAAVA,CAAlB,gBAAkBA,CAAlB;;MAEA,IAAI,OAAA,WAAA,KAAJ,QAAA,EAAqC;QACnC,IAAIG,WAAW,CAAf,SAAe,CAAf,EAA4BV,aAAa,GAAGU,WAAW,CAA3BV,SAA2B,CAA3BA;MAD9B,CAAA,MAEO;QACLA,aAAa,GAAbA,WAAAA;MACD;IAjBH,CAAA,MAkBO;MACLA,aAAa,GAAGG,KAAK,CAArBH,UAAqB,CAArBA;IACD;EACF;;EAED,OAAO;IACLK,UAAU,EADL,aAAA;IAELN,UAAU,EAFL,aAAA;IAGLY,SAAS,EAAEV;EAHN,CAAP;AAKD","sourcesContent":["import { useTheme } from './useTheme';\nimport type { ITheme } from '../theme';\n/**\n *\n * @param props\n * @returns resolved fontFamily\n * @description Combination of fontWeight, fontStyle and font family is fully supported on web but on Android we need to pass the exact font family.\n * for e.g. If we load Roboto-Light-Italic.ttf using css, we can use fontFamily: Roboto, fontWeight: 300, fontStyle: italic on web, but same may not work on all the platforms. Other platform needs to set fontFamily: Roboto-Light-Italic in order to work.\n * So this function's purpose is to intake styles like fontFamily: Roboto, fontWeight: 300, fontStyle: Italic and return fontFamily: Roboto-Light-Italic depending upon the fontConfig token in typography theme.\n * This function depends upon fontConfig token in typography for mapping.\n */\nexport function useResolvedFontFamily(props: {\n  fontFamily?: keyof ITheme['fonts'];\n  fontStyle?: string;\n  fontWeight?: keyof ITheme['fontWeights'];\n}) {\n  const { fontFamily, fontStyle, fontWeight } = props;\n  let newFontFamily = fontFamily;\n  let newFontStyle = fontStyle;\n  let newFontWeight = fontWeight;\n\n  const { fontConfig, fontWeights, fonts } = useTheme();\n  if (fontWeight && fontStyle && fontFamily && fontFamily in fonts) {\n    // TODO: Fix typing remove any.\n    const fontToken: any = fonts[fontFamily];\n    if (fontConfig && fontConfig[fontToken]) {\n      // If a custom font family is resolved, set fontWeight and fontStyle to undefined.\n      // https://github.com/GeekyAnts/NativeBase/issues/3811\n      // On Android, If a fontFamily and fontWeight both are passed, it behaves in a weird way and applies system fonts with passed fontWeight. This happens only for some fontWeights e.g. '700' or 'bold'. So, if we find a custom fontFamily, we remove fontWeight and fontStyle\n      //@ts-ignore\n      newFontWeight = undefined;\n      //@ts-ignore\n      newFontStyle = undefined;\n\n      let fontWeightNumber =\n        fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      let fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}