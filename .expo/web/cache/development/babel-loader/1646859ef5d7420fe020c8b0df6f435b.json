{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"orientation\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport Box from \"./../../primitives/Box\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar Divider = function Divider(props, ref) {\n  var _usePropsResolution = usePropsResolution('Divider', props, {}, {\n    resolveResponsively: ['thickness']\n  }),\n      orientation = _usePropsResolution.orientation,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Box, _extends({}, resolvedProps, {\n    ref: ref,\n    \"aria-orientation\": orientation,\n    accessibilityRole: Platform.OS === 'web' ? 'separator' : undefined\n  }));\n};\n\nexport default memo(forwardRef(Divider));","map":{"version":3,"sources":["index.tsx"],"names":["Divider","resolvedProps","usePropsResolution","resolveResponsively","useHasResponsiveProps","Platform","undefined","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;;AAEA,SAAA,kBAAA;AACA,OAAA,GAAA;AAEA,SAAA,qBAAA;;AAEA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAAA,KAAA,EAAA,GAAA,EAAqC;EACnD,0BAA0CE,kBAAkB,CAAA,SAAA,EAAA,KAAA,EAAA,EAAA,EAI1D;IAAEC,mBAAmB,EAAE,CAAA,WAAA;EAAvB,CAJ0D,CAA5D;EAAA,IAAM,WAAN,uBAAM,WAAN;EAAA,IAAwBF,aAAxB;;EAOA,IAAIG,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EACD,OACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA,EAAA,EAAA,aAAA,EAAA;IAEE,GAAG,EAFL,GAAA;IAGE,oBAHF,WAAA;IAKE,iBAAiB,EAAEC,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,GAAAA,WAAAA,GAAsCC;EAL3D,CAAA,CAAA,CADF;AAXF,CAAA;;AAsBA,eAAeC,IAAI,CAACC,UAAU,CAA9B,OAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from './../../primitives/Box';\nimport type { IDividerProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Divider = (props: IDividerProps, ref?: any) => {\n  const { orientation, ...resolvedProps } = usePropsResolution(\n    'Divider',\n    props,\n    {},\n    { resolveResponsively: ['thickness'] }\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...resolvedProps}\n      ref={ref}\n      aria-orientation={orientation}\n      //@ts-ignore web only role\n      accessibilityRole={Platform.OS === 'web' ? 'separator' : undefined}\n    />\n  );\n};\n\nexport default memo(forwardRef(Divider));\n"]},"metadata":{},"sourceType":"module"}