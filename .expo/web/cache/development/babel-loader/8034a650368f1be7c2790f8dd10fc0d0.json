{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"startIcon\", \"rightIcon\", \"leftIcon\", \"endIcon\", \"spinner\", \"isDisabled\", \"isLoading\", \"isHovered\", \"isPressed\", \"isFocused\", \"isFocusVisible\", \"spinnerPlacement\"],\n    _excluded2 = [\"onPressIn\", \"onPressOut\", \"onHoverIn\", \"onHoverOut\", \"onFocus\", \"onBlur\", \"_text\", \"_stack\", \"_spinner\", \"isLoadingText\", \"_icon\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Spinner from \"../Spinner\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { default as Box } from \"../Box\";\nimport HStack from \"../Stack/HStack\";\nimport { Pressable } from \"../Pressable\";\nimport { composeEventHandlers } from \"../../../utils\";\nimport { useHover, useFocus, useIsPressed } from \"../../primitives/Pressable/Pressable\";\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar Button = function Button(_ref, ref) {\n  var children = _ref.children,\n      startIcon = _ref.startIcon,\n      rightIcon = _ref.rightIcon,\n      leftIcon = _ref.leftIcon,\n      endIcon = _ref.endIcon,\n      spinner = _ref.spinner,\n      isDisabled = _ref.isDisabled,\n      isLoading = _ref.isLoading,\n      isHoveredProp = _ref.isHovered,\n      isPressedProp = _ref.isPressed,\n      isFocusedProp = _ref.isFocused,\n      isFocusVisibleProp = _ref.isFocusVisible,\n      _ref$spinnerPlacement = _ref.spinnerPlacement,\n      spinnerPlacement = _ref$spinnerPlacement === void 0 ? 'start' : _ref$spinnerPlacement,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _props$accessibilityR;\n\n  var _useHover = useHover(),\n      hoverProps = _useHover.hoverProps,\n      isHovered = _useHover.isHovered;\n\n  var _useIsPressed = useIsPressed(),\n      pressableProps = _useIsPressed.pressableProps,\n      isPressed = _useIsPressed.isPressed;\n\n  var _useFocus = useFocus(),\n      focusProps = _useFocus.focusProps,\n      isFocused = _useFocus.isFocused;\n\n  var _useFocusRing = useFocusRing(),\n      isFocusVisible = _useFocusRing.isFocusVisible,\n      focusRingProps = _useFocusRing.focusProps;\n\n  var _usePropsResolution = usePropsResolution('Button', props, {\n    isDisabled: isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isPressed: isPressedProp || isPressed,\n    isLoading: isLoading,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible\n  }),\n      onPressIn = _usePropsResolution.onPressIn,\n      onPressOut = _usePropsResolution.onPressOut,\n      onHoverIn = _usePropsResolution.onHoverIn,\n      onHoverOut = _usePropsResolution.onHoverOut,\n      onFocus = _usePropsResolution.onFocus,\n      onBlur = _usePropsResolution.onBlur,\n      _text = _usePropsResolution._text,\n      _stack = _usePropsResolution._stack,\n      _spinner = _usePropsResolution._spinner,\n      isLoadingText = _usePropsResolution.isLoadingText,\n      _icon = _usePropsResolution._icon,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (leftIcon) {\n    startIcon = leftIcon;\n  }\n\n  if (rightIcon) {\n    endIcon = rightIcon;\n  }\n\n  if (endIcon && React.isValidElement(endIcon)) {\n    endIcon = React.Children.map(endIcon, function (child, index) {\n      return React.cloneElement(child, _objectSpread(_objectSpread({\n        key: \"button-end-icon-\".concat(index)\n      }, _icon), child.props));\n    });\n  }\n\n  if (startIcon && React.isValidElement(startIcon)) {\n    startIcon = React.Children.map(startIcon, function (child, index) {\n      return React.cloneElement(child, _objectSpread(_objectSpread({\n        key: \"button-start-icon-\".concat(index)\n      }, _icon), child.props));\n    });\n  }\n\n  var spinnerElement = spinner ? spinner : React.createElement(Spinner, _extends({\n    color: _text === null || _text === void 0 ? void 0 : _text.color\n  }, _spinner));\n\n  var boxChildren = function boxChildren(child) {\n    return child ? React.createElement(Box, {\n      _text: _text\n    }, child) : null;\n  };\n\n  return React.createElement(Pressable, _extends({\n    disabled: isDisabled || isLoading,\n    ref: ref,\n    onPressIn: composeEventHandlers(onPressIn, pressableProps.onPressIn),\n    onPressOut: composeEventHandlers(onPressOut, pressableProps.onPressOut),\n    onHoverIn: composeEventHandlers(onHoverIn, hoverProps.onHoverIn),\n    onHoverOut: composeEventHandlers(onHoverOut, hoverProps.onHoverOut),\n    onFocus: composeEventHandlers(composeEventHandlers(onFocus, focusProps.onFocus), focusRingProps.onFocus),\n    onBlur: composeEventHandlers(composeEventHandlers(onBlur, focusProps.onBlur), focusRingProps.onBlur)\n  }, resolvedProps, {\n    accessibilityRole: (_props$accessibilityR = props.accessibilityRole) !== null && _props$accessibilityR !== void 0 ? _props$accessibilityR : 'button'\n  }), React.createElement(HStack, _extends({}, _stack, {\n    test: true\n  }), startIcon && !isLoading ? startIcon : null, isLoading && spinnerPlacement === 'start' ? spinnerElement : null, isLoading ? isLoadingText ? boxChildren(isLoadingText) : null : boxChildren(children), endIcon && !isLoading ? endIcon : null, isLoading && spinnerPlacement === 'end' ? spinnerElement : null));\n};\n\nexport default memo(forwardRef(Button));","map":{"version":3,"sources":["Button.tsx"],"names":["default","Button","isHovered","isPressed","isFocused","isFocusVisible","spinnerPlacement","props","useHover","useIsPressed","useFocus","focusProps","focusRingProps","useFocusRing","resolvedProps","usePropsResolution","isDisabled","isHoveredProp","isFocusedProp","isPressedProp","isLoading","isFocusVisibleProp","useHasResponsiveProps","startIcon","endIcon","React","key","child","spinnerElement","spinner","_text","color","boxChildren","composeEventHandlers","pressableProps","hoverProps","isLoadingText","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Spinner from '../Spinner';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { default as Box, IBoxProps } from '../Box';\nimport HStack from '../Stack/HStack';\nimport { Pressable } from '../Pressable';\nimport type { IButtonProps } from './types';\nimport { composeEventHandlers } from '../../../utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Button = (\n  {\n    //@ts-ignore\n    children,\n    startIcon,\n    rightIcon,\n    leftIcon,\n    endIcon,\n    spinner,\n    isDisabled,\n    isLoading,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    spinnerPlacement = 'start',\n    ...props\n  }: IButtonProps & IBoxProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    _text,\n    _stack,\n    _spinner,\n    isLoadingText,\n    _icon,\n    ...resolvedProps\n  } = usePropsResolution('Button', props, {\n    isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isPressed: isPressedProp || isPressed,\n    isLoading,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (leftIcon) {\n    startIcon = leftIcon;\n  }\n  if (rightIcon) {\n    endIcon = rightIcon;\n  }\n  if (endIcon && React.isValidElement(endIcon)) {\n    endIcon = React.Children.map(\n      endIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-end-icon-${index}`,\n          ..._icon,\n          ...child.props,\n        });\n      }\n    );\n  }\n  if (startIcon && React.isValidElement(startIcon)) {\n    startIcon = React.Children.map(\n      startIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-start-icon-${index}`,\n          ..._icon,\n          ...child.props,\n        });\n      }\n    );\n  }\n\n  const spinnerElement = spinner ? (\n    spinner\n  ) : (\n    <Spinner color={_text?.color} {..._spinner} />\n  );\n\n  const boxChildren = (child: any) => {\n    return child ? <Box _text={_text}>{child}</Box> : null;\n  };\n\n  return (\n    <Pressable\n      disabled={isDisabled || isLoading}\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n      accessibilityRole={props.accessibilityRole ?? 'button'}\n    >\n      <HStack {..._stack} test={true}>\n        {startIcon && !isLoading ? startIcon : null}\n        {isLoading && spinnerPlacement === 'start' ? spinnerElement : null}\n        {isLoading\n          ? isLoadingText\n            ? boxChildren(isLoadingText)\n            : null\n          : boxChildren(children)}\n\n        {endIcon && !isLoading ? endIcon : null}\n        {isLoading && spinnerPlacement === 'end' ? spinnerElement : null}\n      </HStack>\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Button));\n"]},"metadata":{},"sourceType":"module"}