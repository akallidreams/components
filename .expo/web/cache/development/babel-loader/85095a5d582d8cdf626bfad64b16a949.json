{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isDisabled\", \"onPress\", \"onPressStart\", \"onPressEnd\", \"onPressUp\", \"onPressChange\", \"isPressed\"];\nimport React from 'react';\nimport { mergeProps } from '@react-aria/utils';\nexport function usePress(_ref) {\n  var isDisabled = _ref.isDisabled,\n      _onPress = _ref.onPress,\n      onPressStart = _ref.onPressStart,\n      onPressEnd = _ref.onPressEnd,\n      onPressUp = _ref.onPressUp,\n      onPressChange = _ref.onPressChange,\n      isPressedProp = _ref.isPressed,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isPressed = _React$useState2[0],\n      setPressed = _React$useState2[1];\n\n  var pressProps = {\n    onPress: function onPress(e) {\n      if (isDisabled) return;\n      _onPress && _onPress(e);\n    },\n    onPressIn: function onPressIn(e) {\n      if (isDisabled) return;\n      onPressStart && onPressStart(e);\n      setPressed(true);\n      onPressChange && onPressChange(true);\n    },\n    onPressOut: function onPressOut(e) {\n      if (isDisabled) return;\n      onPressEnd && onPressEnd(e);\n      setPressed(false);\n      onPressChange && onPressChange(false);\n      onPressUp && onPressUp(e);\n    }\n  };\n  pressProps = mergeProps(pressProps, restProps);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: pressProps\n  };\n}","map":{"version":3,"sources":["usePress.ts"],"names":["isPressed","restProps","React","pressProps","onPress","e","onPressIn","onPressStart","setPressed","onPressChange","onPressOut","onPressEnd","onPressUp","mergeProps","isPressedProp"],"mappings":";;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,UAAA,QAAA,mBAAA;AA0CA,OAAO,SAAA,QAAA,OASyB;EAAA,IATP,UASO,QATP,UASO;EAAA,IATP,QASO,QATP,OASO;EAAA,IATP,YASO,QATP,YASO;EAAA,IATP,UASO,QATP,UASO;EAAA,IATP,SASO,QATP,SASO;EAAA,IATP,aASO,QATP,aASO;EAAA,IATP,aASO,QAF9BA,SAE8B;EAAA,IAD3BC,SAC2B;;EAC9B,sBAA8BC,KAAK,CAALA,QAAAA,CAA9B,KAA8BA,CAA9B;EAAA;EAAA,IAAI,SAAJ;EAAA,IAAI,UAAJ;;EAEA,IAAIC,UAAU,GAAG;IACfC,OAAO,EAAGC,iBAAAA,CAAD,EAAY;MACnB,IAAA,UAAA,EAAgB;MAChBD,QAAO,IAAIA,QAAO,CAAlBA,CAAkB,CAAlBA;IAHa,CAAA;IAKfE,SAAS,EAAGD,mBAAAA,CAAD,EAAY;MACrB,IAAA,UAAA,EAAgB;MAChBE,YAAY,IAAIA,YAAY,CAA5BA,CAA4B,CAA5BA;MACAC,UAAU,CAAVA,IAAU,CAAVA;MACAC,aAAa,IAAIA,aAAa,CAA9BA,IAA8B,CAA9BA;IATa,CAAA;IAWfC,UAAU,EAAGL,oBAAAA,CAAD,EAAY;MACtB,IAAA,UAAA,EAAgB;MAChBM,UAAU,IAAIA,UAAU,CAAxBA,CAAwB,CAAxBA;MACAH,UAAU,CAAVA,KAAU,CAAVA;MACAC,aAAa,IAAIA,aAAa,CAA9BA,KAA8B,CAA9BA;MACAG,SAAS,IAAIA,SAAS,CAAtBA,CAAsB,CAAtBA;IACD;EAjBc,CAAjB;EAoBAT,UAAU,GAAGU,UAAU,CAAA,UAAA,EAAvBV,SAAuB,CAAvBA;EAEA,OAAO;IACLH,SAAS,EAAEc,aAAa,IADnB,SAAA;IAELX,UAAAA,EAAAA;EAFK,CAAP;AAID","sourcesContent":["import React, { RefObject } from 'react';\nimport { mergeProps } from '@react-aria/utils';\n\nexport interface PressEvents {\n  /** Handler that is called when the press is released over the target. */\n  onPress?: (e: any) => void;\n  /** Handler that is called when a press interaction starts. */\n  onPressStart?: (e: any) => void;\n  /**\n   * Handler that is called when a press interaction ends, either\n   * over the target or when the pointer leaves the target.\n   */\n  onPressEnd?: (e: any) => void;\n  /** Handler that is called when the press state changes. */\n  onPressChange?: (isPressed: boolean) => void;\n  /**\n   * Handler that is called when a press is released over the target, regardless of\n   * whether it started on the target or not.\n   */\n  onPressUp?: (e: any) => void;\n}\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean;\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean;\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean;\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<any>;\n}\n\nexport type PressResult = {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean;\n  /** Props to spread on the target element. */\n  pressProps: any;\n};\n\nexport function usePress({\n  isDisabled,\n  onPress,\n  onPressStart,\n  onPressEnd,\n  onPressUp, // No onPressUp on RN.\n  onPressChange,\n  isPressed: isPressedProp,\n  ...restProps\n}: PressHookProps): PressResult {\n  let [isPressed, setPressed] = React.useState(false);\n\n  let pressProps = {\n    onPress: (e: any) => {\n      if (isDisabled) return;\n      onPress && onPress(e);\n    },\n    onPressIn: (e: any) => {\n      if (isDisabled) return;\n      onPressStart && onPressStart(e);\n      setPressed(true);\n      onPressChange && onPressChange(true);\n    },\n    onPressOut: (e: any) => {\n      if (isDisabled) return;\n      onPressEnd && onPressEnd(e);\n      setPressed(false);\n      onPressChange && onPressChange(false);\n      onPressUp && onPressUp(e);\n    },\n  };\n\n  pressProps = mergeProps(pressProps, restProps);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}