{"ast":null,"code":"import React from 'react';\nimport { useEffect } from 'react';\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nvar keyboardDismissHandlers = [];\nexport var keyboardDismissHandlerManager = {\n  push: function push(handler) {\n    keyboardDismissHandlers.push(handler);\n    return function () {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(function (h) {\n        return h !== handler;\n      });\n    };\n  },\n  length: function length() {\n    return keyboardDismissHandlers.length;\n  },\n  pop: function pop() {\n    return keyboardDismissHandlers.pop();\n  }\n};\nexport var useKeyboardDismissable = function useKeyboardDismissable(_ref) {\n  var enabled = _ref.enabled,\n      callback = _ref.callback;\n  React.useEffect(function () {\n    var cleanupFn = function cleanupFn() {};\n\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n\n    return function () {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n  useBackHandler({\n    enabled: enabled,\n    callback: callback\n  });\n};\nexport function useBackHandler(_ref2) {\n  var enabled = _ref2.enabled,\n      callback = _ref2.callback;\n  useEffect(function () {\n    var backHandler = function backHandler() {\n      callback();\n      return true;\n    };\n\n    if (enabled) {\n      BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n\n    return function () {\n      return BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    };\n  }, [enabled, callback]);\n}","map":{"version":3,"sources":["useKeyboardDismissable.ts"],"names":["keyboardDismissHandlers","keyboardDismissHandlerManager","push","handler","h","length","pop","useKeyboardDismissable","callback","React","cleanupFn","useBackHandler","enabled","useEffect","backHandler","BackHandler"],"mappings":"AAAA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,SAAA,QAAA,OAAA;;AAQA,IAAIA,uBAAyC,GAA7C,EAAA;AACA,OAAO,IAAMC,6BAA6B,GAAG;EAC3CC,IAAI,EAAGC,cAAAA,OAAD,EAAwB;IAC5BH,uBAAuB,CAAvBA,IAAAA,CAAAA,OAAAA;IACA,OAAO,YAAM;MACXA,uBAAuB,GAAGA,uBAAuB,CAAvBA,MAAAA,CACvBI,UAAAA,CAAD;QAAA,OAAOA,CAAC,KADVJ,OACE;MAAA,CADwBA,CAA1BA;IADF,CAAA;EAHyC,CAAA;EAS3CK,MAAM,EAAE;IAAA,OAAML,uBAAuB,CATM,MASnC;EAAA,CATmC;EAU3CM,GAAG,EAAE,eAAM;IACT,OAAON,uBAAuB,CAA9B,GAAOA,EAAP;EACD;AAZ0C,CAAtC;AAkBP,OAAO,IAAMO,sBAAsB,GAAG,SAAzBA,sBAAyB,OAAoC;EAAA,IAAnC,OAAmC,QAAnC,OAAmC;EAAA,IAAxBC,QAAwB,QAAxBA,QAAwB;EACxEC,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAIC,SAAS,GAAG,qBAAM,CAAtB,CAAA;;IACA,IAAA,OAAA,EAAa;MACXA,SAAS,GAAGT,6BAA6B,CAA7BA,IAAAA,CAAZS,QAAYT,CAAZS;IADF,CAAA,MAEO;MACLA,SAAS;IACV;;IACD,OAAO,YAAM;MACXA,SAAS;IADX,CAAA;EAPFD,CAAAA,EAUG,CAAA,OAAA,EAVHA,QAUG,CAVHA;EAYAE,cAAc,CAAC;IAAEC,OAAF,EAAEA,OAAF;IAAWJ,QAAAA,EAAAA;EAAX,CAAD,CAAdG;AAbK,CAAA;AAgBP,OAAO,SAAA,cAAA,QAAwD;EAAA,IAAhC,OAAgC,SAAhC,OAAgC;EAAA,IAArBH,QAAqB,SAArBA,QAAqB;EAC7DK,SAAS,CAAC,YAAM;IACd,IAAIC,WAAW,GAAG,SAAdA,WAAc,GAAM;MACtBN,QAAQ;MACR,OAAA,IAAA;IAFF,CAAA;;IAIA,IAAA,OAAA,EAAa;MACXO,WAAW,CAAXA,gBAAAA,CAAAA,mBAAAA,EAAAA,WAAAA;IADF,CAAA,MAEO;MACLA,WAAW,CAAXA,mBAAAA,CAAAA,mBAAAA,EAAAA,WAAAA;IACD;;IACD,OAAO;MAAA,OACLA,WAAW,CAAXA,mBAAAA,CAAAA,mBAAAA,EADF,WACEA,CADK;IAAA,CAAP;EAVO,CAAA,EAYN,CAAA,OAAA,EAZHF,QAYG,CAZM,CAATA;AAaD","sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\nimport { BackHandler } from 'react-native';\n\ntype IParams = {\n  enabled?: boolean;\n  callback: () => any;\n};\n\nlet keyboardDismissHandlers: Array<() => any> = [];\nexport const keyboardDismissHandlerManager = {\n  push: (handler: () => any) => {\n    keyboardDismissHandlers.push(handler);\n    return () => {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(\n        (h) => h !== handler\n      );\n    };\n  },\n  length: () => keyboardDismissHandlers.length,\n  pop: () => {\n    return keyboardDismissHandlers.pop();\n  },\n};\n\n/**\n * Handles attaching callback for Escape key listener on web and Back button listener on Android\n */\nexport const useKeyboardDismissable = ({ enabled, callback }: IParams) => {\n  React.useEffect(() => {\n    let cleanupFn = () => {};\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n    return () => {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n\n  useBackHandler({ enabled, callback });\n};\n\nexport function useBackHandler({ enabled, callback }: IParams) {\n  useEffect(() => {\n    let backHandler = () => {\n      callback();\n      return true;\n    };\n    if (enabled) {\n      BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n    return () =>\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n  }, [enabled, callback]);\n}\n"]},"metadata":{},"sourceType":"module"}