{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { extractInObject } from \"./../theme/tools/\";\nimport isEmpty from 'lodash.isempty';\nexport var filterShadowProps = function filterShadowProps(props, ignoredProps, OS) {\n  var _ignoredProps$style;\n\n  if (OS !== 'web') {\n    return _objectSpread(_objectSpread({}, ignoredProps), props);\n  }\n\n  var style = (_ignoredProps$style = ignoredProps.style) !== null && _ignoredProps$style !== void 0 ? _ignoredProps$style : {};\n\n  var _extractInObject = extractInObject(props, ['shadowColor', 'shadowOffset', 'shadowOpacity', 'shadowRadius']),\n      _extractInObject2 = _slicedToArray(_extractInObject, 2),\n      shadowProps = _extractInObject2[0],\n      remainingProps = _extractInObject2[1];\n\n  if (!isEmpty(shadowProps)) {\n    style = _objectSpread(_objectSpread({}, style), shadowProps);\n  }\n\n  return _objectSpread(_objectSpread(_objectSpread({}, remainingProps), ignoredProps), {}, {\n    style: style\n  });\n};","map":{"version":3,"sources":["filterShadowProps.ts"],"names":["filterShadowProps","OS","props","style","ignoredProps","extractInObject","isEmpty","shadowProps"],"mappings":";;;;;;;AAAA,SAAA,eAAA;AACA,OAAA,OAAA,MAAA,gBAAA;AAEA,OAAO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,KAAA,EAAA,YAAA,EAAA,EAAA,EAI5B;EAAA,IAAA,mBAAA;;EACH,IAAIC,EAAE,KAAN,KAAA,EAAkB;IAChB,uCAAO,YAAP,GAA6BC,KAA7B;EACD;;EACD,IAAIC,KAAK,GAAA,CAAA,mBAAA,GAAGC,YAAY,CAAf,KAAA,MAAA,IAAA,IAAA,mBAAA,KAAA,KAAA,CAAA,GAAA,mBAAA,GAAT,EAAA;;EACA,uBAAoCC,eAAe,CAAA,KAAA,EAAQ,CAAA,aAAA,EAAA,cAAA,EAAA,eAAA,EAA3D,cAA2D,CAAR,CAAnD;EAAA;EAAA,IAAI,WAAJ;EAAA,IAAI,cAAJ;;EAMA,IAAI,CAACC,OAAO,CAAZ,WAAY,CAAZ,EAA2B;IACzBH,KAAK,mCAAG,KAAH,GAAkBI,WAAlB,CAALJ;EACD;;EACD,qDAAO,cAAP,GAAO,YAAP;IAA6CA,KAAAA,EAAAA;EAA7C;AAlBK,CAAA","sourcesContent":["import { extractInObject } from './../theme/tools/';\nimport isEmpty from 'lodash.isempty';\n\nexport const filterShadowProps = (\n  props: any,\n  ignoredProps: any,\n  OS: string\n) => {\n  if (OS !== 'web') {\n    return { ...ignoredProps, ...props };\n  }\n  let style = ignoredProps.style ?? {};\n  let [shadowProps, remainingProps] = extractInObject(props, [\n    'shadowColor',\n    'shadowOffset',\n    'shadowOpacity',\n    'shadowRadius',\n  ]);\n  if (!isEmpty(shadowProps)) {\n    style = { ...style, ...shadowProps };\n  }\n  return { ...remainingProps, ...ignoredProps, style };\n};\n"]},"metadata":{},"sourceType":"module"}