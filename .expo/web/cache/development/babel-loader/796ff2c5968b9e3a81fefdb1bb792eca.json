{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useMemo } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { HybridContext } from \"./Context\";\nimport { useModeManager } from \"./../color-mode/hooks\";\nimport { keyboardDismissHandlerManager } from \"../../hooks\";\n\nvar HybridProvider = function HybridProvider(_ref) {\n  var children = _ref.children,\n      _ref$options = _ref.options,\n      _ref$options$initialC = _ref$options.initialColorMode,\n      initialColorMode = _ref$options$initialC === void 0 ? 'light' : _ref$options$initialC,\n      _ref$options$accessib = _ref$options.accessibleColors,\n      isTextColorAccessible = _ref$options$accessib === void 0 ? false : _ref$options$accessib,\n      useSystemColorMode = _ref$options.useSystemColorMode,\n      colorModeManager = _ref.colorModeManager;\n\n  var _useModeManager = useModeManager(initialColorMode, useSystemColorMode, colorModeManager),\n      colorMode = _useModeManager.colorMode,\n      setColorMode = _useModeManager.setColorMode;\n\n  var toggleColorMode = React.useCallback(function () {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  var _React$useState = React.useState(isTextColorAccessible),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      accessibleColors = _React$useState2[0],\n      setAccessibleColors = _React$useState2[1];\n\n  var contextValue = useMemo(function () {\n    return {\n      colorMode: {\n        colorMode: colorMode,\n        toggleColorMode: toggleColorMode,\n        setColorMode: setColorMode,\n        accessibleColors: accessibleColors,\n        setAccessibleColors: setAccessibleColors\n      }\n    };\n  }, [colorMode, toggleColorMode, setColorMode, accessibleColors, setAccessibleColors]);\n  React.useEffect(function () {\n    var escapeKeyListener = null;\n\n    if (Platform.OS === 'web') {\n      escapeKeyListener = function escapeKeyListener(e) {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            var lastHandler = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return function () {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n  return React.createElement(HybridContext.Provider, {\n    value: contextValue\n  }, children);\n};\n\nexport default HybridProvider;","map":{"version":3,"sources":["HybridProvider.tsx"],"names":["HybridProvider","options","initialColorMode","accessibleColors","isTextColorAccessible","useSystemColorMode","colorModeManager","setColorMode","useModeManager","toggleColorMode","colorMode","React","contextValue","useMemo","setAccessibleColors","escapeKeyListener","Platform","e","keyboardDismissHandlerManager","lastHandler","document"],"mappings":";AAAA,OAAA,KAAA,IAAA,OAAA,QAAA,OAAA;;AAEA,SAAA,aAAA;AACA,SAAA,cAAA;AAEA,SAAA,6BAAA;;AAEA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,OAQQ;EAAA,IARP,QAQO,QARP,QAQO;EAAA,wBAN7BC,OAM6B;EAAA,yCAL3BC,gBAK2B;EAAA,IAL3BA,gBAK2B,sCANpB,OAMoB;EAAA,yCAJ3BC,gBAI2B;EAAA,IAJTC,qBAIS,sCANpB,KAMoB;EAAA,IAH3BC,kBAG2B,gBAH3BA,kBAG2B;EAAA,IAD7BC,gBAC6B,QAD7BA,gBAC6B;;EAE7B,sBAAoCE,cAAc,CAAA,gBAAA,EAAA,kBAAA,EAAlD,gBAAkD,CAAlD;EAAA,IAAM,SAAN,mBAAM,SAAN;EAAA,IAAmBD,YAAnB,mBAAmBA,YAAnB;;EAMA,IAAME,eAAe,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAM;IAC9CF,YAAY,CAACG,SAAS,KAATA,OAAAA,GAAAA,MAAAA,GAAbH,OAAY,CAAZA;EADsB,CAAA,EAErB,CAAA,SAAA,EAV0B,YAU1B,CAFqB,CAAxB;;EAKA,sBAAgDI,KAAK,CAALA,QAAAA,CAAhD,qBAAgDA,CAAhD;EAAA;EAAA,IAAM,gBAAN;EAAA,IAAM,mBAAN;;EAIA,IAAMC,YAAY,GAAGC,OAAO,CAAC,YAAM;IACjC,OAAO;MACLH,SAAS,EAAE;QACTA,SADS,EACTA,SADS;QAETD,eAFS,EAETA,eAFS;QAGTF,YAHS,EAGTA,YAHS;QAITJ,gBAJS,EAITA,gBAJS;QAKTW,mBAAAA,EAAAA;MALS;IADN,CAAP;EAD0B,CAAA,EAUzB,CAAA,SAAA,EAAA,eAAA,EAAA,YAAA,EAAA,gBAAA,EAVH,mBAUG,CAVyB,CAA5B;EAkBAH,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAII,iBAAsB,GAA1B,IAAA;;IAEA,IAAIC,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;MACzBD,iBAAiB,GAAIE,2BAAAA,CAAD,EAAsB;QACxC,IAAIA,CAAC,CAADA,GAAAA,KAAJ,QAAA,EAAwB;UACtB,IAAIC,6BAA6B,CAA7BA,MAAAA,KAAJ,CAAA,EAAgD;YAC9C,IAAMC,WAAgB,GAAGD,6BAA6B,CAAtD,GAAyBA,EAAzB;YACAC,WAAW;UACZ;QACF;MANHJ,CAAAA;;MAQAK,QAAQ,CAARA,gBAAAA,CAAAA,SAAAA,EAAAA,iBAAAA;IACD;;IAED,OAAO,YAAM;MACX,IAAIJ,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;QACzBI,QAAQ,CAARA,mBAAAA,CAAAA,SAAAA,EAAAA,iBAAAA;MACD;IAHH,CAAA;EAfFT,CAAAA,EAAAA,EAAAA;EAsBA,OACE,KAAA,CAAA,aAAA,CAAC,aAAD,CAAA,QAAA,EAAA;IAAwB,KAAK,EAAEC;EAA/B,CAAA,EADF,QACE,CADF;AAjEF,CAAA;;AAwEA,eAAA,cAAA","sourcesContent":["import React, { useMemo } from 'react';\nimport { Platform } from 'react-native';\nimport { HybridContext } from './Context';\nimport { useModeManager } from './../color-mode/hooks';\nimport type { IColorModeProviderProps } from './../color-mode';\nimport { keyboardDismissHandlerManager } from '../../hooks';\n\nconst HybridProvider = ({\n  children,\n  options: {\n    initialColorMode = 'light',\n    accessibleColors: isTextColorAccessible = false,\n    useSystemColorMode,\n  },\n  colorModeManager,\n}: IColorModeProviderProps) => {\n  // Color-mode content\n  const { colorMode, setColorMode } = useModeManager(\n    initialColorMode,\n    useSystemColorMode,\n    colorModeManager\n  );\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  // Accessible color hook\n  const [accessibleColors, setAccessibleColors] = React.useState<boolean>(\n    isTextColorAccessible\n  );\n\n  const contextValue = useMemo(() => {\n    return {\n      colorMode: {\n        colorMode,\n        toggleColorMode,\n        setColorMode,\n        accessibleColors,\n        setAccessibleColors,\n      },\n    };\n  }, [\n    colorMode,\n    toggleColorMode,\n    setColorMode,\n    accessibleColors,\n    setAccessibleColors,\n  ]);\n\n  React.useEffect(() => {\n    let escapeKeyListener: any = null;\n\n    if (Platform.OS === 'web') {\n      escapeKeyListener = (e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            const lastHandler: any = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return () => {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n\n  return (\n    <HybridContext.Provider value={contextValue}>\n      {children}\n    </HybridContext.Provider>\n  );\n};\n\nexport default HybridProvider;\n"]},"metadata":{},"sourceType":"module"}