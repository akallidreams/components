{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"hideDragIndicator\"],\n    _excluded2 = [\"isOpen\", \"disableOverlay\", \"onClose\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Modal } from \"../../composites/Modal\";\nimport { usePropsResolution } from \"../../../hooks\";\nimport { ActionSheetContext } from \"./ActionSheetContext\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nvar Actionsheet = function Actionsheet(_ref, ref) {\n  var children = _ref.children,\n      _ref$hideDragIndicato = _ref.hideDragIndicator,\n      hideDragIndicator = _ref$hideDragIndicato === void 0 ? false : _ref$hideDragIndicato,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _usePropsResolution = usePropsResolution('Actionsheet', props),\n      isOpen = _usePropsResolution.isOpen,\n      disableOverlay = _usePropsResolution.disableOverlay,\n      onClose = _usePropsResolution.onClose,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  var overlayStyle = Platform.OS === 'web' ? {\n    position: 'fixed'\n  } : {};\n  return React.createElement(Modal, _extends({\n    isOpen: isOpen,\n    onClose: onClose\n  }, resolvedProps, {\n    overlayVisible: disableOverlay ? false : true,\n    closeOnOverlayClick: disableOverlay ? false : true,\n    ref: ref,\n    _overlay: {\n      style: overlayStyle\n    }\n  }), React.createElement(ActionSheetContext.Provider, {\n    value: {\n      hideDragIndicator: hideDragIndicator\n    }\n  }, children));\n};\n\nexport default memo(forwardRef(Actionsheet));","map":{"version":3,"sources":["Actionsheet.tsx"],"names":["Actionsheet","hideDragIndicator","props","resolvedProps","usePropsResolution","useHasResponsiveProps","overlayStyle","position","onClose","disableOverlay","style","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,KAAA;AAEA,SAAA,kBAAA;AACA,SAAA,kBAAA;AACA,SAAA,qBAAA;;;AAGA,IAAMA,WAAW,GAAG,SAAdA,WAAc,OAAA,GAAA,EAGf;EAAA,IAFH,QAEG,QAFH,QAEG;EAAA,iCAFSC,iBAET;EAAA,IAFSA,iBAET,sCAFH,KAEG;EAAA,IAFuCC,KAEvC;;EACH,0BAKIE,kBAAkB,CAAA,aAAA,EANnB,KAMmB,CALtB;EAAA,IAAM,MAAN,uBAAM,MAAN;EAAA,IAAM,cAAN,uBAAM,cAAN;EAAA,IAAM,OAAN,uBAAM,OAAN;EAAA,IAIKD,aAJL;;EAQA,IAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EAVC;;EAaH,IAAIC,YAAY,GAAG,QAAQ,CAAR,EAAA,KAAA,KAAA,GAAwB;IAAEC,QAAQ,EAAE;EAAZ,CAAxB,GAAnB,EAAA;EAEA,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;IACE,MAAM,EADR,MAAA;IAEE,OAAO,EAAEC;EAFX,CAAA,EAAA,aAAA,EAAA;IAIE,cAAc,EAAEC,cAAc,GAAA,KAAA,GAJhC,IAAA;IAKE,mBAAmB,EAAEA,cAAc,GAAA,KAAA,GALrC,IAAA;IAME,GAAG,EANL,GAAA;IAOE,QAAQ,EAAE;MAAEC,KAAK,EAAEJ;IAAT;EAPZ,CAAA,CAAA,EASE,KAAA,CAAA,aAAA,CAAC,kBAAD,CAAA,QAAA,EAAA;IAA6B,KAAK,EAAE;MAAEL,iBAAAA,EAAAA;IAAF;EAApC,CAAA,EAVJ,QAUI,CATF,CADF;AAlBF,CAAA;;AAmCA,eAAeU,IAAI,CAACC,UAAU,CAA9B,WAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Modal } from '../../composites/Modal';\nimport type { IActionsheetProps } from './types';\nimport { usePropsResolution } from '../../../hooks';\nimport { ActionSheetContext } from './ActionSheetContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { Platform } from 'react-native';\n\nconst Actionsheet = (\n  { children, hideDragIndicator = false, ...props }: IActionsheetProps,\n  ref: any\n) => {\n  const {\n    isOpen,\n    disableOverlay,\n    onClose,\n    ...resolvedProps\n  } = usePropsResolution('Actionsheet', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  //Fixing overlay position for Web due to scrollView issue\n  let overlayStyle = Platform.OS === 'web' ? { position: 'fixed' } : {};\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      {...resolvedProps}\n      overlayVisible={disableOverlay ? false : true}\n      closeOnOverlayClick={disableOverlay ? false : true}\n      ref={ref}\n      _overlay={{ style: overlayStyle }}\n    >\n      <ActionSheetContext.Provider value={{ hideDragIndicator }}>\n        {children}\n      </ActionSheetContext.Provider>\n    </Modal>\n  );\n};\n\nexport default memo(forwardRef(Actionsheet));\n"]},"metadata":{},"sourceType":"module"}