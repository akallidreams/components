{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"in\", \"placement\", \"overlay\", \"duration\", \"_overlay\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport Box from \"../../primitives/Box\";\nimport PresenceTransition from \"./PresenceTransition\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { Overlay } from \"../../primitives/Overlay\";\nimport { usePropsResolution } from \"../../../hooks/\";\nvar holderStyle = {\n  top: {\n    top: 0,\n    right: 0,\n    left: 0\n  },\n  right: {\n    right: 0,\n    top: 0,\n    bottom: 0\n  },\n  bottom: {\n    bottom: 0,\n    right: 0,\n    left: 0\n  },\n  left: {\n    left: 0,\n    bottom: 0,\n    top: 0\n  }\n};\nexport var Slide = memo(forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _usePropsResolution = usePropsResolution('Slide', props),\n      visible = _usePropsResolution.in,\n      placement = _usePropsResolution.placement,\n      overlay = _usePropsResolution.overlay,\n      duration = _usePropsResolution.duration,\n      _overlay = _usePropsResolution._overlay,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      containerOpacity = _React$useState2[0],\n      setContainerOpacity = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      size = _React$useState4[0],\n      setSize = _React$useState4[1];\n\n  var provideSize = function provideSize(layoutSize) {\n    if (placement === 'right' || placement === 'left') setSize(layoutSize.width);else setSize(layoutSize.height);\n    setContainerOpacity(1);\n  };\n\n  var transition = {\n    duration: duration\n  };\n  var animationStyle = {\n    top: {\n      initial: {\n        translateY: -size\n      },\n      animate: {\n        translateY: 0,\n        transition: transition\n      }\n    },\n    bottom: {\n      initial: {\n        translateY: size\n      },\n      animate: {\n        translateY: 0,\n        transition: transition\n      },\n      exit: {\n        translateY: size,\n        transition: transition\n      }\n    },\n    left: {\n      initial: {\n        translateX: -size\n      },\n      animate: {\n        translateX: 0,\n        transition: transition\n      }\n    },\n    right: {\n      initial: {\n        translateX: size\n      },\n      animate: {\n        translateX: 0,\n        transition: transition\n      }\n    }\n  };\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  var slideComponent = React.createElement(PresenceTransition, _extends({\n    visible: visible\n  }, animationStyle[placement], {\n    style: [{\n      position: 'absolute'\n    }, holderStyle[placement], {\n      height: '100%'\n    }]\n  }), React.createElement(Box, _extends({}, resolvedProps, {\n    opacity: containerOpacity,\n    ref: ref,\n    onLayout: function onLayout(e) {\n      return provideSize(e.nativeEvent.layout);\n    }\n  }), children));\n\n  if (overlay) {\n    return React.createElement(React.Fragment, null, React.createElement(Overlay, _overlay, slideComponent));\n  } else {\n    return slideComponent;\n  }\n}));\nexport default Slide;","map":{"version":3,"sources":["Slide.tsx"],"names":["holderStyle","top","right","left","bottom","Slide","memo","forwardRef","props","in","resolvedProps","usePropsResolution","React","provideSize","layoutSize","placement","setSize","setContainerOpacity","transition","duration","animationStyle","initial","translateY","size","animate","exit","translateX","useHasResponsiveProps","slideComponent","visible","position","height","e"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport Box from '../../primitives/Box';\nimport type { ISlideProps } from './types';\nimport PresenceTransition from './PresenceTransition';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { Overlay } from '../../primitives/Overlay';\nimport { usePropsResolution } from '../../../hooks/';\n\nconst holderStyle: any = {\n  top: {\n    top: 0,\n    right: 0,\n    left: 0,\n  },\n  right: {\n    right: 0,\n    top: 0,\n    bottom: 0,\n  },\n  bottom: {\n    bottom: 0,\n    right: 0,\n    left: 0,\n  },\n  left: {\n    left: 0,\n    bottom: 0,\n    top: 0,\n  },\n};\n\nexport const Slide = memo(\n  forwardRef(({ children, ...props }: ISlideProps, ref: any) => {\n    const {\n      in: visible,\n      placement,\n      overlay,\n      duration,\n      _overlay,\n      ...resolvedProps\n    } = usePropsResolution('Slide', props);\n    const [containerOpacity, setContainerOpacity] = React.useState(0);\n    const [size, setSize] = React.useState(0);\n    const provideSize = (layoutSize: any) => {\n      if (placement === 'right' || placement === 'left')\n        setSize(layoutSize.width);\n      else setSize(layoutSize.height);\n      setContainerOpacity(1);\n    };\n\n    const transition = { duration };\n\n    const animationStyle: any = {\n      top: {\n        initial: {\n          translateY: -size,\n        },\n        animate: {\n          translateY: 0,\n          transition,\n        },\n      },\n      bottom: {\n        initial: {\n          translateY: size,\n        },\n        animate: {\n          translateY: 0,\n          transition,\n        },\n        exit: {\n          translateY: size,\n          transition,\n        },\n      },\n      left: {\n        initial: {\n          translateX: -size,\n        },\n        animate: {\n          translateX: 0,\n          transition,\n        },\n      },\n      right: {\n        initial: {\n          translateX: size,\n        },\n        animate: {\n          translateX: 0,\n          transition,\n        },\n      },\n    };\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n\n    const slideComponent = (\n      <PresenceTransition\n        visible={visible}\n        {...animationStyle[placement]}\n        style={[\n          { position: 'absolute' },\n          holderStyle[placement],\n          { height: '100%' },\n        ]}\n      >\n        <Box\n          {...resolvedProps}\n          opacity={containerOpacity}\n          ref={ref}\n          onLayout={(e) => provideSize(e.nativeEvent.layout)}\n        >\n          {children}\n        </Box>\n      </PresenceTransition>\n    );\n\n    if (overlay) {\n      return (\n        <>\n          <Overlay {..._overlay}>{slideComponent}</Overlay>\n        </>\n      );\n    } else {\n      return slideComponent;\n    }\n  })\n);\n\nexport default Slide;\n"]},"metadata":{},"sourceType":"module"}