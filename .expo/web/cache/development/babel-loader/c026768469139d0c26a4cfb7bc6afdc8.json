{"ast":null,"code":"import useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport isNil from 'lodash.isnil';\nexport function useMediaQuery(query) {\n  var dims = useWindowDimensions();\n  var height = dims === null || dims === void 0 ? void 0 : dims.height;\n  var width = dims === null || dims === void 0 ? void 0 : dims.width;\n  return iterateQuery(query, height, width);\n}\n\nfunction queryResolver(query, width, height) {\n  for (var queryKey in query) {\n    if (!calculateQuery(queryKey, query[queryKey], height, width)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction iterateQuery(query, height, width) {\n  var queryResults = [];\n\n  if (Array.isArray(query)) {\n    query.forEach(function (subQuery) {\n      queryResults.push(queryResolver(subQuery, width, height));\n    });\n  } else {\n    queryResults.push(queryResolver(query, width, height));\n  }\n\n  return queryResults;\n}\n\nfunction calculateQuery(key, val, height, width) {\n  var retval;\n\n  if (isNil(width) || isNil(height) || isNil(val)) {\n    return;\n  }\n\n  switch (key) {\n    case 'maxWidth':\n      retval = !isNil(val) ? width <= val : undefined;\n      break;\n\n    case 'minWidth':\n      retval = !isNil(val) ? width >= val : undefined;\n      break;\n\n    case 'maxHeight':\n      retval = !isNil(val) ? height <= val : undefined;\n      break;\n\n    case 'minHeight':\n      retval = !isNil(val) ? height >= val : undefined;\n      break;\n\n    case 'orientation':\n      if (!isNil(val)) {\n        if (width > height) {\n          retval = val === 'landscape';\n        } else {\n          retval = val === 'portrait';\n        }\n      }\n\n      break;\n\n    default:\n      break;\n  }\n\n  return retval;\n}","map":{"version":3,"sources":["useMediaQuery.ts"],"names":["dims","useWindowDimensions","height","width","iterateQuery","calculateQuery","query","queryResults","Array","subQuery","queryResolver","isNil","retval","val"],"mappings":";AACA,OAAA,KAAA,MAAA,cAAA;AAcA,OAAO,SAAA,aAAA,CAAA,KAAA,EAAgD;EACrD,IAAMA,IAAI,GAAGC,mBAAb,EAAA;EACA,IAAMC,MAAM,GAAGF,IAAH,KAAA,IAAGA,IAAAA,IAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,IAAI,CAAnB,MAAA;EACA,IAAMG,KAAK,GAAGH,IAAH,KAAA,IAAGA,IAAAA,IAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,IAAI,CAAlB,KAAA;EAEA,OAAOI,YAAY,CAAA,KAAA,EAAA,MAAA,EAAnB,KAAmB,CAAnB;AACD;;AAED,SAAA,aAAA,CAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAoE;EAClE,KAAK,IAAL,QAAA,IAAA,KAAA,EAA8B;IAC5B,IAAI,CAACC,cAAc,CAAA,QAAA,EAAWC,KAAK,CAAhB,QAAgB,CAAhB,EAAA,MAAA,EAAnB,KAAmB,CAAnB,EAA+D;MAC7D,OAAA,KAAA;IACD;EACF;;EACD,OAAA,IAAA;AACD;;AAED,SAAA,YAAA,CAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAIE;EACA,IAAMC,YAAY,GAAlB,EAAA;;EACA,IAAIC,KAAK,CAALA,OAAAA,CAAJ,KAAIA,CAAJ,EAA0B;IACxBF,KAAK,CAALA,OAAAA,CAAeG,UAAAA,QAAD,EAAwB;MACpCF,YAAY,CAAZA,IAAAA,CAAkBG,aAAa,CAAA,QAAA,EAAA,KAAA,EAA/BH,MAA+B,CAA/BA;IADFD,CAAAA;EADF,CAAA,MAIO;IACLC,YAAY,CAAZA,IAAAA,CAAkBG,aAAa,CAAA,KAAA,EAAA,KAAA,EAA/BH,MAA+B,CAA/BA;EACD;;EACD,OAAA,YAAA;AACD;;AAED,SAAA,cAAA,CAAA,GAAA,EAAA,GAAA,EAAA,MAAA,EAAA,KAAA,EAKE;EACA,IAAA,MAAA;;EACA,IAAII,KAAK,CAALA,KAAK,CAALA,IAAgBA,KAAK,CAArBA,MAAqB,CAArBA,IAAiCA,KAAK,CAA1C,GAA0C,CAA1C,EAAiD;IAC/C;EACD;;EACD,QAAA,GAAA;IACE,KAAA,UAAA;MACEC,MAAM,GAAG,CAACD,KAAK,CAAN,GAAM,CAAN,GAAcR,KAAK,IAAnB,GAAA,GAATS,SAAAA;MACA;;IACF,KAAA,UAAA;MACEA,MAAM,GAAG,CAACD,KAAK,CAAN,GAAM,CAAN,GAAcR,KAAK,IAAnB,GAAA,GAATS,SAAAA;MACA;;IACF,KAAA,WAAA;MACEA,MAAM,GAAG,CAACD,KAAK,CAAN,GAAM,CAAN,GAAcT,MAAM,IAApB,GAAA,GAATU,SAAAA;MACA;;IACF,KAAA,WAAA;MACEA,MAAM,GAAG,CAACD,KAAK,CAAN,GAAM,CAAN,GAAcT,MAAM,IAApB,GAAA,GAATU,SAAAA;MACA;;IACF,KAAA,aAAA;MACE,IAAI,CAACD,KAAK,CAAV,GAAU,CAAV,EAAiB;QACf,IAAIR,KAAK,GAAT,MAAA,EAAoB;UAClBS,MAAM,GAAGC,GAAG,KAAZD,WAAAA;QADF,CAAA,MAEO;UACLA,MAAM,GAAGC,GAAG,KAAZD,UAAAA;QACD;MACF;;MACD;;IACF;MACE;EAvBJ;;EAyBA,OAAA,MAAA;AACD","sourcesContent":["import { useWindowDimensions } from 'react-native';\nimport isNil from 'lodash.isnil';\n\ntype QueryKeys =\n  | 'maxWidth'\n  | 'minWidth'\n  | 'maxHeight'\n  | 'minHeight'\n  | 'orientation';\n\ntype SubQuery = {\n  [queryKey in QueryKeys]?: number | string;\n};\ntype Query = Array<SubQuery>;\n\nexport function useMediaQuery(query: SubQuery | Query) {\n  const dims = useWindowDimensions();\n  const height = dims?.height;\n  const width = dims?.width;\n\n  return iterateQuery(query, height, width);\n}\n\nfunction queryResolver(query: any, width?: number, height?: number) {\n  for (const queryKey in query) {\n    if (!calculateQuery(queryKey, query[queryKey], height, width)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction iterateQuery(\n  query: SubQuery | Query,\n  height?: number,\n  width?: number\n) {\n  const queryResults = [];\n  if (Array.isArray(query)) {\n    query.forEach((subQuery: SubQuery) => {\n      queryResults.push(queryResolver(subQuery, width, height));\n    });\n  } else {\n    queryResults.push(queryResolver(query, width, height));\n  }\n  return queryResults;\n}\n\nfunction calculateQuery(\n  key: string,\n  val?: number | string,\n  height?: number,\n  width?: number\n) {\n  let retval;\n  if (isNil(width) || isNil(height) || isNil(val)) {\n    return;\n  }\n  switch (key) {\n    case 'maxWidth':\n      retval = !isNil(val) ? width <= val : undefined;\n      break;\n    case 'minWidth':\n      retval = !isNil(val) ? width >= val : undefined;\n      break;\n    case 'maxHeight':\n      retval = !isNil(val) ? height <= val : undefined;\n      break;\n    case 'minHeight':\n      retval = !isNil(val) ? height >= val : undefined;\n      break;\n    case 'orientation':\n      if (!isNil(val)) {\n        if (width > height) {\n          retval = val === 'landscape';\n        } else {\n          retval = val === 'portrait';\n        }\n      }\n      break;\n    default:\n      break;\n  }\n  return retval;\n}\n"]},"metadata":{},"sourceType":"module"}