{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport get from 'lodash.get';\nimport isNil from 'lodash.isnil';\nimport mergeWith from 'lodash.mergewith';\nimport cloneDeep from 'lodash.clonedeep';\nimport { themePropertyMap } from \"./../../theme/base\";\nimport { getClosestBreakpoint, findLastValidBreakpoint, hasValidBreakpointFormat, extractInObject } from \"./../../theme/tools\";\nimport { useContrastText } from \"../useContrastText\";\nexport function extractProps(props, theme, _ref, componentTheme, currentBreakpoint) {\n  _objectDestructuringEmpty(_ref);\n\n  var newProps = {};\n\n  for (var property in props) {\n    if (themePropertyMap[property]) {\n      var propValues = extractPropertyFromFunction(property, props, theme, componentTheme);\n\n      if (typeof propValues === 'string' || typeof propValues === 'number') {\n        newProps[property] = propValues;\n      } else if (!isNil(propValues)) {\n        for (var nestedProp in propValues) {\n          newProps[nestedProp] = get(theme, \"\".concat(themePropertyMap[nestedProp], \".\").concat(propValues[nestedProp]), propValues[nestedProp]);\n        }\n      } else if (property === 'shadow') {\n        var shadowProps = theme[themePropertyMap[property]][props[property]];\n\n        if (!isNil(shadowProps)) {\n          newProps = _objectSpread(_objectSpread({}, newProps), shadowProps);\n        }\n      } else {\n        newProps[property] = resolveValueWithBreakpoint(props[property], theme.breakpoints, currentBreakpoint, property);\n      }\n    } else {\n      newProps[property] = resolveValueWithBreakpoint(props[property], theme.breakpoints, currentBreakpoint, property);\n    }\n  }\n\n  return cloneDeep(newProps);\n}\n\nfunction filterDefaultProps(props, defaultProps) {\n  var _extractInObject = extractInObject(defaultProps, Object.keys(props)),\n      _extractInObject2 = _slicedToArray(_extractInObject, 2),\n      resultProps = _extractInObject2[1];\n\n  return resultProps;\n}\n\nexport var extractPropertyFromFunction = function extractPropertyFromFunction(property, props, theme, componentTheme) {\n  var propValues;\n\n  if (componentTheme && typeof componentTheme[themePropertyMap[property]] === 'function') {\n    var funcProps = componentTheme[themePropertyMap[property]](_objectSpread({\n      theme: theme\n    }, props));\n    var isNested = Object.keys(funcProps).some(function (key) {\n      return funcProps[key] && typeof funcProps[key] === 'object';\n    });\n    propValues = isNested ? _objectSpread({}, get(funcProps, \"\".concat(props[property]))) : _objectSpread({}, funcProps);\n  } else {\n    propValues = get(componentTheme, \"\".concat(themePropertyMap[property], \".\").concat(props[property]));\n  }\n\n  return propValues;\n};\nexport function mergeUnderscoreProps(newProps, props) {\n  var _props = Object.keys(newProps).filter(function (propName) {\n    return propName.startsWith('_');\n  });\n\n  _props.forEach(function (propName) {\n    var _newProps$bg, _newProps$propName$co, _newProps$propName, _props$propName;\n\n    var bg = (_newProps$bg = newProps.bg) !== null && _newProps$bg !== void 0 ? _newProps$bg : newProps.backgroundColor;\n    var textColor = bg ? {\n      color: useContrastText(bg, (_newProps$propName$co = (_newProps$propName = newProps[propName]) === null || _newProps$propName === void 0 ? void 0 : _newProps$propName.color) !== null && _newProps$propName$co !== void 0 ? _newProps$propName$co : (_props$propName = props[propName]) === null || _props$propName === void 0 ? void 0 : _props$propName.color)\n    } : {};\n    newProps[propName] = _objectSpread(_objectSpread(_objectSpread({}, textColor), newProps[propName]), props[propName]);\n  });\n\n  return newProps;\n}\nexport var resolveValueWithBreakpoint = function resolveValueWithBreakpoint(values, breakpointTheme, currentBreakpoint, property) {\n  if (hasValidBreakpointFormat(values, breakpointTheme, property)) {\n    return findLastValidBreakpoint(values, breakpointTheme, currentBreakpoint);\n  } else {\n    return values;\n  }\n};\nexport function calculateProps(theme, colorModeProps, componentTheme, props, windowWidth) {\n  var currentBreakpoint = getClosestBreakpoint(theme.breakpoints, windowWidth);\n\n  if (!props) {\n    props = {};\n  }\n\n  var newProps;\n\n  if (componentTheme) {\n    newProps = extractProps(filterDefaultProps(props, componentTheme.defaultProps), theme, colorModeProps, componentTheme, currentBreakpoint);\n    var componentBaseStyle = typeof componentTheme.baseStyle !== 'function' ? componentTheme.baseStyle : componentTheme.baseStyle(_objectSpread(_objectSpread(_objectSpread({\n      theme: theme\n    }, newProps), props), colorModeProps));\n    newProps = mergeWith(newProps, componentBaseStyle, function (objValue, srcValue, key) {\n      if (!isNil(objValue)) {\n        delete newProps[key];\n      }\n    });\n    var variant = props.variant || get(componentTheme, 'defaultProps.variant');\n\n    if (variant && componentTheme.variants && componentTheme.variants[variant]) {\n      var colorScheme = props.colorScheme || get(componentTheme, 'defaultProps.colorScheme');\n      var variantProps = componentTheme.variants[variant](_objectSpread(_objectSpread(_objectSpread({}, props), newProps), {}, {\n        colorScheme: colorScheme,\n        theme: theme\n      }, colorModeProps));\n      variantProps = extractProps(variantProps, theme, colorModeProps, componentTheme, currentBreakpoint);\n      newProps = mergeWith(newProps, variantProps, function (objValue, srcValue, key) {\n        if (!isNil(objValue)) {\n          delete newProps[key];\n        }\n      });\n      delete newProps.variant;\n      delete newProps.colorScheme;\n    }\n  }\n\n  var extractedProps = extractProps(props, theme, colorModeProps, componentTheme, currentBreakpoint);\n  newProps = mergeWith(newProps, extractedProps, function (objValue, srcValue, key) {\n    if (!isNil(objValue)) {\n      delete newProps[key];\n    }\n  });\n  newProps = mergeUnderscoreProps(newProps, props);\n  return newProps;\n}","map":{"version":3,"sources":["utils.ts"],"names":["newProps","themePropertyMap","propValues","extractPropertyFromFunction","isNil","get","property","shadowProps","theme","props","resolveValueWithBreakpoint","cloneDeep","extractInObject","Object","componentTheme","funcProps","isNested","_props","propName","bg","textColor","color","useContrastText","hasValidBreakpointFormat","findLastValidBreakpoint","currentBreakpoint","getClosestBreakpoint","extractProps","filterDefaultProps","componentBaseStyle","colorModeProps","mergeWith","variant","colorScheme","variantProps","extractedProps","mergeUnderscoreProps"],"mappings":"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","sourcesContent":["import get from 'lodash.get';\nimport isNil from 'lodash.isnil';\nimport mergeWith from 'lodash.mergewith';\nimport cloneDeep from 'lodash.clonedeep';\nimport { themePropertyMap } from './../../theme/base';\nimport {\n  getClosestBreakpoint,\n  findLastValidBreakpoint,\n  hasValidBreakpointFormat,\n  extractInObject,\n} from './../../theme/tools';\nimport { useContrastText } from '../useContrastText';\n\n/*\n Extract props from theme props and omit those from props\n*/\n/**\n *\n * @param props Props passed by the user\n * @param theme Theme object\n * @param colorModeProps `colorMode` object\n * @param componentTheme Theme for specific components\n * @param currentBreakpoint Current breakpoint values\n * @returns Extracting props from defaultProps while overriding the props that are already present\n */\nexport function extractProps(\n  props: any,\n  theme: any,\n  {},\n  componentTheme: any,\n  currentBreakpoint: number\n) {\n  let newProps: any = {};\n  for (let property in props) {\n    // If the property exists in themePropertyMap then get its value\n    if (themePropertyMap[property]) {\n      let propValues = extractPropertyFromFunction(\n        property,\n        props,\n        theme,\n        componentTheme\n      );\n      if (typeof propValues === 'string' || typeof propValues === 'number') {\n        newProps[property] = propValues;\n      } else if (!isNil(propValues)) {\n        for (let nestedProp in propValues) {\n          newProps[nestedProp] = get(\n            theme,\n            `${themePropertyMap[nestedProp]}.${propValues[nestedProp]}`,\n            propValues[nestedProp]\n          );\n        }\n      } else if (property === 'shadow') {\n        let shadowProps = theme[themePropertyMap[property]][props[property]];\n        if (!isNil(shadowProps)) {\n          newProps = { ...newProps, ...shadowProps };\n        }\n      } else {\n        newProps[property] = resolveValueWithBreakpoint(\n          props[property],\n          theme.breakpoints,\n          currentBreakpoint,\n          property\n        );\n      }\n    } else {\n      newProps[property] = resolveValueWithBreakpoint(\n        props[property],\n        theme.breakpoints,\n        currentBreakpoint,\n        property\n      );\n    }\n  }\n  return cloneDeep(newProps);\n}\n\n/*\nRemove props from defaultProps that are already present in props\n*/\nfunction filterDefaultProps(props: any, defaultProps: any) {\n  let [, resultProps] = extractInObject(defaultProps, Object.keys(props));\n  return resultProps;\n}\n\n/**\n * If property is functional in componentTheme, get its returned object\n *\n * @param property : name of the prop\n * @param props : all props\n * @param theme : provided theme without components\n * @param componentTheme : component specific theme\n * @returns\n */\nexport const extractPropertyFromFunction = (\n  property: string,\n  props: any,\n  theme: any,\n  componentTheme: any\n) => {\n  let propValues;\n  // Check if the entry in the theme is a function then calling it with all theme and props as params\n  if (\n    componentTheme &&\n    typeof componentTheme[themePropertyMap[property]] === 'function'\n  ) {\n    let funcProps = componentTheme[themePropertyMap[property]]({\n      theme,\n      ...props,\n    });\n    // Check if returned object from componentTheme is a nested object\n    let isNested: boolean = Object.keys(funcProps).some(function (key) {\n      return funcProps[key] && typeof funcProps[key] === 'object';\n    });\n    // If the returned value is nested object then find the property value in it, otherwise return the whole object\n    propValues = isNested\n      ? { ...get(funcProps, `${props[property]}`) }\n      : { ...funcProps };\n  } else {\n    // If the entry is any value other than function then return the whole object or value\n    propValues = get(\n      componentTheme,\n      `${themePropertyMap[property]}.${props[property]}`\n    );\n  }\n  return propValues;\n};\n\n/*\nMerge _props and apply contrastText color if not passed by theme or user\n*/\nexport function mergeUnderscoreProps(newProps: any, props: any) {\n  const _props = Object.keys(newProps).filter((propName) =>\n    propName.startsWith('_')\n  );\n  _props.forEach((propName: string) => {\n    // Adding color based on bg contrast if no color is given\n    const bg = newProps.bg ?? newProps.backgroundColor;\n    const textColor = bg\n      ? {\n          color: useContrastText(\n            bg,\n            newProps[propName]?.color ?? props[propName]?.color\n          ),\n        }\n      : {};\n    // Overriding calculated props with user added props\n    newProps[propName] = {\n      ...textColor,\n      ...newProps[propName],\n      ...props[propName],\n    };\n  });\n  return newProps;\n}\n\n/**\n *\n * Checks the property and resolves it if it has breakpoints\n * @param values : value from props\n * @param currentBreakpoint : current value for which breakpoint will be calculated\n * @param property : property name\n * @returns\n */\nexport const resolveValueWithBreakpoint = (\n  values: any,\n  breakpointTheme: any,\n  currentBreakpoint: number,\n  property: any\n) => {\n  if (hasValidBreakpointFormat(values, breakpointTheme, property)) {\n    // Check the last valid breakpoint value from all values\n    // If current breakpoint is `md` and we have `base` then `lg`, then last value will be taken(`base` in this case)\n    return findLastValidBreakpoint(values, breakpointTheme, currentBreakpoint);\n  } else {\n    return values;\n  }\n};\n\n/**\n * Takes all prop related data and returns the props that needs to be applied to the component\n *\n * @param theme Theme object\n * @param colorModeProps Color mode information\n * @param componentTheme Theme object for the specific component\n * @param props Props passed by the user\n * @param windowWidth Width of the current window\n * @returns props to be applied\n */\nexport function calculateProps(\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  props: any,\n  windowWidth: any\n) {\n  let currentBreakpoint = getClosestBreakpoint(theme.breakpoints, windowWidth);\n  if (!props) {\n    props = {};\n  }\n\n  let newProps: any;\n  if (componentTheme) {\n    // Extracting props from defaultProps\n    newProps = extractProps(\n      filterDefaultProps(props, componentTheme.defaultProps),\n      theme,\n      colorModeProps,\n      componentTheme,\n      currentBreakpoint\n    );\n    // Extracting props from base style\n    let componentBaseStyle =\n      typeof componentTheme.baseStyle !== 'function'\n        ? componentTheme.baseStyle\n        : componentTheme.baseStyle({\n            theme,\n            ...newProps,\n            ...props,\n            ...colorModeProps,\n          });\n    newProps = mergeWith(\n      newProps,\n      componentBaseStyle,\n      // @ts-ignore\n      (objValue, srcValue, key) => {\n        if (!isNil(objValue)) {\n          delete newProps[key];\n        }\n      }\n    );\n\n    const variant =\n      props.variant || get(componentTheme, 'defaultProps.variant');\n    // Extracting props from variant\n    if (\n      variant &&\n      componentTheme.variants &&\n      componentTheme.variants[variant]\n    ) {\n      const colorScheme =\n        props.colorScheme || get(componentTheme, 'defaultProps.colorScheme');\n      let variantProps = componentTheme.variants[variant]({\n        ...props,\n        ...newProps,\n        colorScheme,\n        theme,\n        ...colorModeProps,\n      });\n      variantProps = extractProps(\n        variantProps,\n        theme,\n        colorModeProps,\n        componentTheme,\n        currentBreakpoint\n      );\n      // added this to handle order of props\n      newProps = mergeWith(\n        newProps,\n        variantProps,\n        // @ts-ignore\n        (objValue, srcValue, key) => {\n          if (!isNil(objValue)) {\n            delete newProps[key];\n          }\n        }\n      );\n      delete newProps.variant;\n      delete newProps.colorScheme;\n    }\n  }\n  // Extracting props from normal props\n  let extractedProps = extractProps(\n    props,\n    theme,\n    colorModeProps,\n    componentTheme,\n    currentBreakpoint\n  );\n  // added this to handle order of props\n  // @ts-ignore\n  newProps = mergeWith(newProps, extractedProps, (objValue, srcValue, key) => {\n    if (!isNil(objValue)) {\n      delete newProps[key];\n    }\n  });\n  newProps = mergeUnderscoreProps(newProps, props);\n  return newProps;\n}\n"]},"metadata":{},"sourceType":"module"}