{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"fieldIndex\", \"defaultValue\"],\n    _excluded2 = [\"handleChange\", \"value\", \"setRefList\", \"defaultValue\", \"handleMultiValueChange\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { Input } from \"../../primitives/Input\";\nimport { PinInputContext } from \"./Context\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { mergeRefs } from \"../../../utils\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar PinInputFiled = function PinInputFiled(_ref, ref) {\n  var _ref$fieldIndex = _ref.fieldIndex,\n      fieldIndex = _ref$fieldIndex === void 0 ? 0 : _ref$fieldIndex,\n      pDefaultValue = _ref.defaultValue,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useContext = React.useContext(PinInputContext),\n      handleChange = _React$useContext.handleChange,\n      cValue = _React$useContext.value,\n      setRefList = _React$useContext.setRefList,\n      cDefaultValue = _React$useContext.defaultValue,\n      handleMultiValueChange = _React$useContext.handleMultiValueChange,\n      context = _objectWithoutProperties(_React$useContext, _excluded2);\n\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  var defaultValue = pDefaultValue || cDefaultValue;\n  var value = cValue && cValue[fieldIndex];\n\n  var keyPressHandler = function keyPressHandler(event) {\n    if (Platform.OS !== 'web') {\n      if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n        handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n      } else if (event.nativeEvent.key === 'Backspace') {\n        handleChange && handleChange('', fieldIndex);\n      }\n    }\n  };\n\n  var textChangeHandler = function textChangeHandler(value) {\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n\n  var myRef = React.useRef(null);\n  React.useEffect(function () {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Input, _extends({\n    ref: mergeRefs([myRef, ref])\n  }, context, props, {\n    onKeyPress: function onKeyPress(event) {\n      return keyPressHandler(event);\n    },\n    onChangeText: function onChangeText(value) {\n      return textChangeHandler(value);\n    },\n    keyboardType: \"numeric\",\n    defaultValue: defaultValue,\n    value: value\n  }));\n};\n\nexport default React.memo(React.forwardRef(PinInputFiled));","map":{"version":3,"sources":["PinInputField.tsx"],"names":["PinInputFiled","fieldIndex","defaultValue","props","value","context","React","cDefaultValue","pDefaultValue","cValue","keyPressHandler","event","Platform","handleChange","textChangeHandler","handleMultiValueChange","myRef","setRefList","useHasResponsiveProps","mergeRefs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,KAAA;AAEA,SAAA,eAAA;;AAEA,SAAA,SAAA;AACA,SAAA,qBAAA;;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,OAAA,GAAA,EAOjB;EAAA,2BALDC,UAKC;EAAA,IALDA,UAKC,gCANH,CAMG;EAAA,IANH,aAMG,QAJDC,YAIC;EAAA,IAHEC,KAGF;;EACH,wBAOsBG,KAAK,CAALA,UAAAA,CAPtB,eAOsBA,CAPtB;EAAA,IAAI,YAAJ,qBAAI,YAAJ;EAAA,IAAI,MAAJ,qBAEEF,KAFF;EAAA,IAAI,UAAJ,qBAAI,UAAJ;EAAA,IAAI,aAAJ,qBAIEF,YAJF;EAAA,IAAI,sBAAJ,qBAAI,sBAAJ;EAAA,IAMKG,OANL;;EAQAE,aAAa,GAAGA,aAAa,IAAIA,aAAa,CAA9CA,UAA8C,CAA9CA;EACA,IAAIL,YAAY,GAAGM,aAAa,IAAhC,aAAA;EACA,IAAIJ,KAAK,GAAGK,MAAM,IAAIA,MAAM,CAA5B,UAA4B,CAA5B;;EAEA,IAAMC,eAAe,GAAIC,SAAnBD,eAAmBC,CAAAA,KAAD,EAAgB;IACtC,IAAIC,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;MACzB,IAAID,KAAK,CAALA,WAAAA,CAAAA,GAAAA,IAAAA,CAAAA,IAA8BA,KAAK,CAALA,WAAAA,CAAAA,GAAAA,IAAlC,CAAA,EAA8D;QAC5DE,YAAY,IAAIA,YAAY,CAACF,KAAK,CAALA,WAAAA,CAAD,GAAA,EAA5BE,UAA4B,CAA5BA;MADF,CAAA,MAEO,IAAIF,KAAK,CAALA,WAAAA,CAAAA,GAAAA,KAAJ,WAAA,EAA2C;QAChDE,YAAY,IAAIA,YAAY,CAAA,EAAA,EAA5BA,UAA4B,CAA5BA;MACD;IACF;EAPH,CAAA;;EASA,IAAMC,iBAAiB,GAAIV,SAArBU,iBAAqBV,CAAAA,KAAD,EAAgB;IAExCW,sBAAsB,IAAIA,sBAAsB,CAAA,KAAA,EAAhDA,UAAgD,CAAhDA;EAFF,CAAA;;EAIA,IAAMC,KAAK,GAAGV,KAAK,CAALA,MAAAA,CAAd,IAAcA,CAAd;EACAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpBW,UAAU,IAAIA,UAAU,CAAA,KAAA,EAAxBA,UAAwB,CAAxBA;EADFX,CAAAA,EAEG,CAAA,KAAA,EAAA,UAAA,EA7BA,UA6BA,CAFHA;;EAKA,IAAIY,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EACD,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;IAEE,GAAG,EAAEC,SAAS,CAAC,CAAA,KAAA,EAAD,GAAC,CAAD;EAFhB,CAAA,EAAA,OAAA,EAAA,KAAA,EAAA;IAKE,UAAU,EAAGR,oBAAAA,KAAD;MAAA,OAAWD,eAAe,CALxC,KAKwC,CAA1B;IAAA,CALd;IAME,YAAY,EAAGN,sBAAAA,KAAD;MAAA,OAAWU,iBAAiB,CAN5C,KAM4C,CAA5B;IAAA,CANhB;IAOE,YAAY,EAPd,SAAA;IAQE,YAAY,EARd,YAAA;IASE,KAAK,EAAEV;EATT,CAAA,CAAA,CADF;AA1CF,CAAA;;AAyDA,eAAeE,KAAK,CAALA,IAAAA,CAAWA,KAAK,CAALA,UAAAA,CAA1B,aAA0BA,CAAXA,CAAf","sourcesContent":["import React from 'react';\nimport { Input } from '../../primitives/Input';\nimport type { IPinInputFieldProps, IPinInputContext } from './types';\nimport { PinInputContext } from './Context';\nimport { Platform } from 'react-native';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst PinInputFiled = (\n  {\n    fieldIndex = 0,\n    defaultValue: pDefaultValue,\n    ...props\n  }: IPinInputFieldProps,\n  ref?: any\n) => {\n  let {\n    handleChange,\n    value: cValue,\n    setRefList,\n    defaultValue: cDefaultValue,\n    handleMultiValueChange,\n    ...context\n  }: IPinInputContext = React.useContext(PinInputContext);\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  let defaultValue = pDefaultValue || cDefaultValue;\n  let value = cValue && cValue[fieldIndex];\n\n  const keyPressHandler = (event: any) => {\n    if (Platform.OS !== 'web') {\n      if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n        handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n      } else if (event.nativeEvent.key === 'Backspace') {\n        handleChange && handleChange('', fieldIndex);\n      }\n    }\n  };\n  const textChangeHandler = (value: any) => {\n    // Also used to handle change for Android.\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n  const myRef = React.useRef(null);\n  React.useEffect(() => {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Input\n      //@ts-ignore\n      ref={mergeRefs([myRef, ref])}\n      {...context}\n      {...props}\n      onKeyPress={(event) => keyPressHandler(event)}\n      onChangeText={(value) => textChangeHandler(value)}\n      keyboardType=\"numeric\"\n      defaultValue={defaultValue}\n      value={value}\n    />\n  );\n};\n\nexport default React.memo(React.forwardRef(PinInputFiled));\n"]},"metadata":{},"sourceType":"module"}