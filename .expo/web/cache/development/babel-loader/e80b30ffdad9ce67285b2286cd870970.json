{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useEffect, useState } from 'react';\nimport { useTheme } from \"../hooks/useTheme\";\nimport { useNativeBaseConfig } from \"../core/NativeBaseContext\";\nimport { isResponsiveAnyProp } from \"../theme/tools\";\nexport function useResponsiveSSRProps(incomingProps) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modified = _useState2[0],\n      setModified = _useState2[1];\n\n  var theme = useTheme();\n  var responsivePropsExists = isResponsiveAnyProp(incomingProps, theme);\n  var isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n  var modifiedProps = incomingProps;\n\n  if (responsivePropsExists && isSSR && !modified) {\n    modifiedProps = _objectSpread(_objectSpread({}, modifiedProps), {}, {\n      key: Math.random()\n    });\n  }\n\n  useEffect(function () {\n    if (responsivePropsExists && isSSR) {\n      setModified(true);\n    }\n  }, [responsivePropsExists, isSSR]);\n  return modifiedProps;\n}","map":{"version":3,"sources":["useResponsiveSSRProps.ts"],"names":["useState","theme","useTheme","responsivePropsExists","isResponsiveAnyProp","isSSR","useNativeBaseConfig","modifiedProps","key","Math","useEffect","setModified"],"mappings":";;;;;;;AAAA,SAAA,SAAA,EAAA,QAAA,QAAA,OAAA;AACA,SAAA,QAAA;AACA,SAAA,mBAAA;AACA,SAAA,mBAAA;AAEA,OAAO,SAAA,qBAAA,CAAA,aAAA,EAAmD;EACxD,gBAAgCA,QAAQ,CAAxC,KAAwC,CAAxC;EAAA;EAAA,IAAM,QAAN;EAAA,IAAM,WAAN;;EACA,IAAMC,KAAK,GAAGC,QAAd,EAAA;EAEA,IAAMC,qBAAqB,GAAGC,mBAAmB,CAAA,aAAA,EAAjD,KAAiD,CAAjD;EACA,IAAMC,KAAK,GAAGC,mBAAmB,CAAnBA,4BAAmB,CAAnBA,CAAd,KAAA;EAEA,IAAIC,aAAa,GAAjB,aAAA;;EACA,IAAIJ,qBAAqB,IAArBA,KAAAA,IAAkC,CAAtC,QAAA,EAAiD;IAC/CI,aAAa,mCAAG,aAAH;MAAuBC,GAAG,EAAEC,IAAI,CAAJA,MAAAA;IAA5B,EAAbF;EACD;;EACDG,SAAS,CAAC,YAAW;IACnB,IAAIP,qBAAqB,IAAzB,KAAA,EAAoC;MAClCQ,WAAW,CAAXA,IAAW,CAAXA;IACD;EAHM,CAAA,EAIN,CAAA,qBAAA,EAJHD,KAIG,CAJM,CAATA;EAMA,OAAA,aAAA;AACD","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useTheme } from '../hooks/useTheme';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\nimport { isResponsiveAnyProp } from '../theme/tools';\n\nexport function useResponsiveSSRProps(incomingProps: any) {\n  const [modified, setModified] = useState(false);\n  const theme = useTheme();\n\n  const responsivePropsExists = isResponsiveAnyProp(incomingProps, theme);\n  const isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n\n  let modifiedProps = incomingProps;\n  if (responsivePropsExists && isSSR && !modified) {\n    modifiedProps = { ...modifiedProps, key: Math.random() };\n  }\n  useEffect((): any => {\n    if (responsivePropsExists && isSSR) {\n      setModified(true);\n    }\n  }, [responsivePropsExists, isSSR]);\n\n  return modifiedProps;\n}\n"]},"metadata":{},"sourceType":"module"}