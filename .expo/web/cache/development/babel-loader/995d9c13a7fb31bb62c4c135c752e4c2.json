{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { mergeProps as $7CUUz$mergeProps, filterDOMProps as $7CUUz$filterDOMProps } from \"@react-aria/utils\";\nimport { useFocusable as $7CUUz$useFocusable } from \"@react-aria/focus\";\nimport { usePress as $7CUUz$usePress } from \"@react-aria/interactions\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $d2c8e2b0480f3f34$exports = {};\n$parcel$export($d2c8e2b0480f3f34$exports, \"useToggle\", function () {\n  return $d2c8e2b0480f3f34$export$cbe85ee05b554577;\n});\n\nfunction $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state, ref) {\n  var _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n      isRequired = props.isRequired,\n      isReadOnly = props.isReadOnly,\n      value = props.value,\n      name = props.name,\n      children = props.children,\n      ariaLabel = props['aria-label'],\n      ariaLabelledby = props['aria-labelledby'],\n      _props$validationStat = props.validationState,\n      validationState = _props$validationStat === void 0 ? 'valid' : _props$validationStat;\n\n  var onChange = function onChange(e) {\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  var hasChildren = children != null;\n  var hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n\n  var _$7CUUz$usePress = $7CUUz$usePress({\n    isDisabled: isDisabled\n  }),\n      pressProps = _$7CUUz$usePress.pressProps;\n\n  var _$7CUUz$useFocusable = $7CUUz$useFocusable(props, ref),\n      focusableProps = _$7CUUz$useFocusable.focusableProps;\n\n  var interactions = $7CUUz$mergeProps(pressProps, focusableProps);\n  var domProps = $7CUUz$filterDOMProps(props, {\n    labelable: true\n  });\n  return {\n    inputProps: $7CUUz$mergeProps(domProps, _objectSpread({\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      onChange: onChange,\n      disabled: isDisabled,\n      value: value,\n      name: name,\n      type: 'checkbox'\n    }, interactions))\n  };\n}\n\nexport { $d2c8e2b0480f3f34$export$cbe85ee05b554577 as useToggle };","map":{"version":3,"sources":["packages/@react-aria/toggle/src/useToggle.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;SA6BgB,yC,CAAU,K,EAAwB,K,EAAoB,G,EAAyC;EAC7G,wBAUI,KAVJ,CAAK,UAAL;EAAA,IACE,UADF,kCACe,KADf;EAAA,IAEE,UAFF,GAUI,KAVJ,CACoB,UADpB;EAAA,IAGE,UAHF,GAUI,KAVJ,CAEY,UAFZ;EAAA,IAIE,KAJF,GAUI,KAVJ,CAGY,KAHZ;EAAA,IAKE,IALF,GAUI,KAVJ,CAIO,IAJP;EAAA,IAME,QANF,GAUI,KAVJ,CAKM,QALN;EAAA,IAOgB,SAPhB,GAUI,KAVJ,CAOE,YAPF;EAAA,IAQqB,cARrB,GAUI,KAVJ,CAQE,iBARF;EAAA,4BAUI,KAVJ,CAQmC,eARnC;EAAA,IASE,eATF,sCASoB,OATpB;;EAYA,IAAI,QAAQ,GAAA,SAAR,QAAQ,CAAI,CAAJ,EAAU;IAGpB,CAAC,CAAC,eAAF;IACA,KAAK,CAAC,WAAN,CAAkB,CAAC,CAAC,MAAF,CAAS,OAA3B;EACD,CALD;;EAOA,IAAI,WAAW,GAAG,QAAQ,IAAI,IAA9B;EACA,IAAI,YAAY,GAAG,SAAS,IAAI,IAAb,IAAqB,cAAc,IAAI,IAA1D;EACA,IAAE,CAAG,WAAH,IAAc,CAAK,YAArB,EACE,OAAO,CAAC,IAAR,CAAa,kFAAb;;EAIF,uBAAmB,eAAQ,CAAC;gBAC1B;EAD0B,CAAD,CAA3B;EAAA,IAAK,UAAL,oBAAK,UAAL;;EAIA,2BAAuB,mBAAY,CAAC,KAAD,EAAQ,GAAR,CAAnC;EAAA,IAAK,cAAL,wBAAK,cAAL;;EACA,IAAI,YAAY,GAAG,iBAAU,CAAC,UAAD,EAAa,cAAb,CAA7B;EACA,IAAI,QAAQ,GAAG,qBAAc,CAAC,KAAD,EAAQ;IAAC,SAAS,EAAE;EAAZ,CAAR,CAA7B;EAEA,OAAO;IACL,UAAU,EAAE,iBAAU,CAAC,QAAD;MACpB,gBAAgB,eAAe,KAAK,SAApB,IAAiC,SAD7B;MAEpB,qBAAqB,KAAK,CAAC,mBAAD,CAFN;MAGpB,iBAAiB,KAAK,CAAC,eAAD,CAHF;MAIpB,iBAAiB,UAAU,IAAI,SAJX;MAKpB,iBAAiB,UAAU,IAAI,SALX;gBAMpB,QANoB;MAOpB,QAAQ,EAAE,UAPU;aAQpB,KARoB;YASpB,IAToB;MAUpB,IAAI,EAAE;IAVc,GAWjB,YAXiB;EADjB,CAAP;AAeD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaToggleProps} from '@react-types/checkbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {InputHTMLAttributes, RefObject} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface ToggleAria {\n  /**\n   * Props to be spread on the input element.\n   */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Handles interactions for toggle elements, e.g. Checkboxes and Switches.\n */\nexport function useToggle(props: AriaToggleProps, state: ToggleState, ref: RefObject<HTMLElement>): ToggleAria {\n  let {\n    isDisabled = false,\n    isRequired,\n    isReadOnly,\n    value,\n    name,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    validationState = 'valid'\n  } = props;\n\n  let onChange = (e) => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  // This handles focusing the input on pointer down, which Safari does not do by default.\n  let {pressProps} = usePress({\n    isDisabled\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  return {\n    inputProps: mergeProps(domProps, {\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      onChange,\n      disabled: isDisabled,\n      value,\n      name,\n      type: 'checkbox',\n      ...interactions\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}