{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isDisabled\", \"label\", \"value\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Actionsheet } from \"../../composites/Actionsheet\";\nimport { SelectContext } from \"./Select\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nexport var Item = function Item(_ref, ref) {\n  var isDisabled = _ref.isDisabled,\n      label = _ref.label,\n      value = _ref.value,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useContext = React.useContext(SelectContext),\n      onValueChange = _React$useContext.onValueChange,\n      selectedValue = _React$useContext.selectedValue,\n      _selectedItem = _React$useContext._selectedItem,\n      _item = _React$useContext._item;\n\n  if (useHasResponsiveProps(_objectSpread(_objectSpread({}, props), {}, {\n    isDisabled: isDisabled,\n    label: label,\n    value: value\n  }))) {\n    return null;\n  }\n\n  if (Platform.OS !== 'web') {\n    var isSelected = selectedValue === value;\n    return React.createElement(Actionsheet.Item, _extends({\n      ref: ref,\n      onPress: function onPress() {\n        if (!isDisabled) {\n          onValueChange(value);\n        }\n      },\n      accessibilityState: {\n        selected: isSelected\n      }\n    }, _item, isSelected && _selectedItem, props), label);\n  } else {\n    return React.createElement(\"option\", {\n      ref: ref,\n      value: value,\n      disabled: isDisabled\n    }, label);\n  }\n};\nexport default memo(forwardRef(Item));","map":{"version":3,"sources":["SelectItem.tsx"],"names":["Item","props","_item","React","useHasResponsiveProps","isDisabled","label","value","Platform","isSelected","selectedValue","onValueChange","selected","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,UAAA,EAAA,IAAA,QAAA,OAAA;;AAGA,SAAA,WAAA;AACA,SAAA,aAAA;AACA,SAAA,qBAAA;AAEA,OAAO,IAAMA,IAAI,GAAG,SAAPA,IAAO,OAAA,GAAA,EAGf;EAAA,IAFH,UAEG,QAFH,UAEG;EAAA,IAFH,KAEG,QAFH,KAEG;EAAA,IAFH,KAEG,QAFH,KAEG;EAAA,IAF4BC,KAE5B;;EACH,wBAKIE,KAAK,CAALA,UAAAA,CAND,aAMCA,CALJ;EAAA,IAAM,aAAN,qBAAM,aAAN;EAAA,IAAM,aAAN,qBAAM,aAAN;EAAA,IAAM,aAAN,qBAAM,aAAN;EAAA,IAIED,KAJF,qBAIEA,KAJF;;EAOA,IAAIE,qBAAqB,iCAAC,KAAD;IAAaC,UAAZ,EAAYA,UAAb;IAAyBC,KAAxB,EAAwBA,KAAzB;IAAgCC,KAAAA,EAAAA;EAAhC,GAAzB,EAAmE;IACjE,OAAA,IAAA;EACD;;EACD,IAAIC,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;IACzB,IAAMC,UAAU,GAAGC,aAAa,KAAhC,KAAA;IAEA,OACE,KAAA,CAAA,aAAA,CAAC,WAAD,CAAA,IAAA,EAAA,QAAA,CAAA;MACE,GAAG,EADL,GAAA;MAEE,OAAO,EAAE,mBAAM;QACb,IAAI,CAAJ,UAAA,EAAiB;UACfC,aAAa,CAAbA,KAAa,CAAbA;QACD;MALL,CAAA;MAOE,kBAAkB,EAAE;QAAEC,QAAQ,EAAEH;MAAZ;IAPtB,CAAA,EAAA,KAAA,EASOA,UAAU,IATjB,aAAA,EAAA,KAAA,CAAA,EADF,KACE,CADF;EAHF,CAAA,MAmBO;IACL,OACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;MAAQ,GAAG,EAAX,GAAA;MAAkB,KAAK,EAAvB,KAAA;MAAgC,QAAQ,EAAEJ;IAA1C,CAAA,EADF,KACE,CADF;EAKD;AAvCI,CAAA;AA0CP,eAAeQ,IAAI,CAACC,UAAU,CAA9B,IAA8B,CAAX,CAAnB","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport type { ISelectItemProps } from './types';\nimport { Platform } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport { SelectContext } from './Select';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const Item = (\n  { isDisabled, label, value, ...props }: ISelectItemProps,\n  ref?: any\n) => {\n  const {\n    onValueChange,\n    selectedValue,\n    _selectedItem,\n    _item,\n  } = React.useContext(SelectContext);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, isDisabled, label, value })) {\n    return null;\n  }\n  if (Platform.OS !== 'web') {\n    const isSelected = selectedValue === value;\n\n    return (\n      <Actionsheet.Item\n        ref={ref}\n        onPress={() => {\n          if (!isDisabled) {\n            onValueChange(value);\n          }\n        }}\n        accessibilityState={{ selected: isSelected }}\n        {..._item}\n        {...(isSelected && _selectedItem)}\n        {...props}\n      >\n        {label}\n      </Actionsheet.Item>\n    );\n  } else {\n    return (\n      <option ref={ref} value={value} disabled={isDisabled}>\n        {label}\n      </option>\n    );\n  }\n};\n\nexport default memo(forwardRef(Item));\n"]},"metadata":{},"sourceType":"module"}