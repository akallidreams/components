{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"type\", \"defaultValue\", \"value\", \"onChange\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport MenuGroup from \"./MenuGroup\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nexport var MenuOptionContext = React.createContext({\n  values: [],\n  onChange: function onChange(_val) {},\n  type: 'checkbox'\n});\n\nvar MenuOptionGroup = function MenuOptionGroup(_ref, ref) {\n  var type = _ref.type,\n      defaultValue = _ref.defaultValue,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var internalDefaultValue = defaultValue ? Array.isArray(defaultValue) ? defaultValue : [defaultValue] : [];\n\n  var _React$useState = React.useState(internalDefaultValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      internalValues = _React$useState2[0],\n      setValues = _React$useState2[1];\n\n  var _onChange = function _onChange(newValue) {\n    if (type === 'checkbox') {\n      var newValues = _toConsumableArray(internalValues);\n\n      if (internalValues.includes(newValue)) {\n        newValues.splice(newValues.indexOf(newValue), 1);\n        setValues(newValues);\n      } else {\n        newValues.push(newValue);\n        setValues(newValues);\n      }\n\n      onChange && onChange(newValues);\n    } else if (type === 'radio') {\n      setValues([newValue]);\n      onChange && onChange(newValue);\n    }\n  };\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(MenuOptionContext.Provider, {\n    value: {\n      values: !value ? internalValues : Array.isArray(value) ? value : [value],\n      onChange: _onChange,\n      type: type\n    }\n  }, React.createElement(MenuGroup, _extends({}, props, {\n    ref: ref\n  })));\n};\n\nexport default memo(forwardRef(MenuOptionGroup));","map":{"version":3,"sources":["MenuOptionGroup.tsx"],"names":["MenuOptionContext","values","onChange","_val","type","MenuOptionGroup","props","internalDefaultValue","defaultValue","Array","React","_onChange","newValue","newValues","internalValues","setValues","useHasResponsiveProps","ref","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,UAAA,EAAA,IAAA,QAAA,OAAA;AACA,OAAA,SAAA;AAEA,SAAA,qBAAA;AAEA,OAAO,IAAMA,iBAAiB,GAAG,KAAK,CAAL,aAAA,CAA6C;EAC5EC,MAAM,EADsE,EAAA;EAE5EC,QAAQ,EAAGC,kBAAAA,IAAD,EAAU,CAFwD,CAAA;EAG5EC,IAAI,EAAE;AAHsE,CAA7C,CAA1B;;AAMP,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAAA,GAAA,EAGnB;EAAA,IAFH,IAEG,QAFH,IAEG;EAAA,IAFH,YAEG,QAFH,YAEG;EAAA,IAFH,KAEG,QAFH,KAEG;EAAA,IAFH,QAEG,QAFH,QAEG;EAAA,IAFuCC,KAEvC;;EACH,IAAMC,oBAAoB,GAAGC,YAAY,GACrCC,KAAK,CAALA,OAAAA,CAAAA,YAAAA,IAAAA,YAAAA,GAEE,CAHmC,YAGnC,CAHmC,GAAzC,EAAA;;EAMA,sBAAoCC,KAAK,CAALA,QAAAA,CAApC,oBAAoCA,CAApC;EAAA;EAAA,IAAM,cAAN;EAAA,IAAM,SAAN;;EAGA,IAAMC,SAAS,GAAIC,SAAbD,SAAaC,CAAAA,QAAD,EAA+B;IAC/C,IAAIR,IAAI,KAAR,UAAA,EAAyB;MACvB,IAAMS,SAAS,sBAAf,cAAe,CAAf;;MACA,IAAIC,cAAc,CAAdA,QAAAA,CAAJ,QAAIA,CAAJ,EAAuC;QACrCD,SAAS,CAATA,MAAAA,CAAiBA,SAAS,CAATA,OAAAA,CAAjBA,QAAiBA,CAAjBA,EAAAA,CAAAA;QACAE,SAAS,CAATA,SAAS,CAATA;MAFF,CAAA,MAGO;QACLF,SAAS,CAATA,IAAAA,CAAAA,QAAAA;QACAE,SAAS,CAATA,SAAS,CAATA;MACD;;MACDb,QAAQ,IAAIA,QAAQ,CAApBA,SAAoB,CAApBA;IATF,CAAA,MAUO,IAAIE,IAAI,KAAR,OAAA,EAAsB;MAC3BW,SAAS,CAAC,CAAVA,QAAU,CAAD,CAATA;MACAb,QAAQ,IAAIA,QAAQ,CAApBA,QAAoB,CAApBA;IACD;EAxBA,CAUH;;EAiBA,IAAIc,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EACD,OACE,KAAA,CAAA,aAAA,CAAC,iBAAD,CAAA,QAAA,EAAA;IACE,KAAK,EAAE;MACLf,MAAM,EAAE,CAAA,KAAA,GAAA,cAAA,GAEJQ,KAAK,CAALA,OAAAA,CAAAA,KAAAA,IAAAA,KAAAA,GAEA,CALC,KAKD,CALC;MAMLP,QAAQ,EANH,SAAA;MAOLE,IAAAA,EAAAA;IAPK;EADT,CAAA,EAWE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;IAAsB,GAAG,EAAEa;EAA3B,CAAA,CAAA,CAXF,CADF;AAjCF,CAAA;;AAkDA,eAAeC,IAAI,CAACC,UAAU,CAA9B,eAA8B,CAAX,CAAnB","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport MenuGroup from './MenuGroup';\nimport type { IMenuOptionGroupProps, IMenuOptionContextProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const MenuOptionContext = React.createContext<IMenuOptionContextProps>({\n  values: [],\n  onChange: (_val) => {},\n  type: 'checkbox',\n});\n\nconst MenuOptionGroup = (\n  { type, defaultValue, value, onChange, ...props }: IMenuOptionGroupProps,\n  ref?: any\n) => {\n  const internalDefaultValue = defaultValue\n    ? Array.isArray(defaultValue)\n      ? defaultValue\n      : [defaultValue]\n    : [];\n\n  const [internalValues, setValues] = React.useState<Array<string | number>>(\n    internalDefaultValue\n  );\n  const _onChange = (newValue: string | number) => {\n    if (type === 'checkbox') {\n      const newValues = [...internalValues];\n      if (internalValues.includes(newValue)) {\n        newValues.splice(newValues.indexOf(newValue), 1);\n        setValues(newValues);\n      } else {\n        newValues.push(newValue);\n        setValues(newValues);\n      }\n      onChange && onChange(newValues);\n    } else if (type === 'radio') {\n      setValues([newValue]);\n      onChange && onChange(newValue);\n    }\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <MenuOptionContext.Provider\n      value={{\n        values: !value\n          ? internalValues\n          : Array.isArray(value)\n          ? value\n          : [value],\n        onChange: _onChange,\n        type,\n      }}\n    >\n      <MenuGroup {...props} ref={ref} />\n    </MenuOptionContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(MenuOptionGroup));\n"]},"metadata":{},"sourceType":"module"}