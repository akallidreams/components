{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { usePropsResolution } from \"../../../hooks\";\nimport Box from \"../../primitives/Box\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar Container = function Container(_ref, ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var resolvedProps = usePropsResolution('Container', props);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Box, _extends({\n    ref: ref\n  }, resolvedProps), children);\n};\n\nexport default React.memo(React.forwardRef(Container));","map":{"version":3,"sources":["index.tsx"],"names":["Container","props","resolvedProps","usePropsResolution","useHasResponsiveProps","ref","React"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,kBAAA;AACA,OAAA,GAAA;AAEA,SAAA,qBAAA;;AAEA,IAAMA,SAAS,GAAG,SAAZA,SAAY,OAAA,GAAA,EAAwD;EAAA,IAAvD,QAAuD,QAAvD,QAAuD;EAAA,IAAxCC,KAAwC;;EACxE,IAAMC,aAAa,GAAGC,kBAAkB,CAAA,WAAA,EADgC,KAChC,CAAxC;;EAGA,IAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EACD,OACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;IAAK,GAAG,EAAEC;EAAV,CAAA,EAAA,aAAA,CAAA,EADF,QACE,CADF;AAPF,CAAA;;AAcA,eAAeC,KAAK,CAALA,IAAAA,CAAWA,KAAK,CAALA,UAAAA,CAA1B,SAA0BA,CAAXA,CAAf","sourcesContent":["import React from 'react';\nimport { usePropsResolution } from '../../../hooks';\nimport Box from '../../primitives/Box';\nimport type { IContainerProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Container = ({ children, ...props }: IContainerProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('Container', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box ref={ref} {...resolvedProps}>\n      {children}\n    </Box>\n  );\n};\n\nexport default React.memo(React.forwardRef(Container));\nexport type { IContainerProps };\n"]},"metadata":{},"sourceType":"module"}