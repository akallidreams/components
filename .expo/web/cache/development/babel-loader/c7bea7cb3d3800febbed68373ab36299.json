{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { usePropsResolution } from \"../../../hooks\";\nimport React, { useContext, memo, forwardRef, useEffect } from 'react';\nimport { default as Box } from \"../../primitives/Box\";\nimport { PopoverContext } from \"./PopoverContext\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar PopoverBody = function PopoverBody(props, ref) {\n  var resolvedProps = usePropsResolution('PopoverBody', props);\n\n  var _useContext = useContext(PopoverContext),\n      setBodyMounted = _useContext.setBodyMounted,\n      bodyId = _useContext.bodyId;\n\n  useEffect(function () {\n    setBodyMounted(true);\n    return function () {\n      setBodyMounted(false);\n    };\n  }, [setBodyMounted]);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Box, _extends({\n    nativeID: bodyId\n  }, resolvedProps, {\n    ref: ref\n  }));\n};\n\nexport default memo(forwardRef(PopoverBody));","map":{"version":3,"sources":["PopoverBody.tsx"],"names":["default","PopoverBody","resolvedProps","usePropsResolution","bodyId","useContext","useEffect","setBodyMounted","useHasResponsiveProps","ref","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAA,kBAAA;AACA,OAAA,KAAA,IAAA,UAAA,EAAA,IAAA,EAAA,UAAA,EAAA,SAAA,QAAA,OAAA;AACA,SAASA,OAAO,IAAhB,GAAA;AACA,SAAA,cAAA;AACA,SAAA,qBAAA;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAA,KAAA,EAAA,GAAA,EAAiC;EACnD,IAAMC,aAAa,GAAGC,kBAAkB,CAAA,aAAA,EAAxC,KAAwC,CAAxC;;EACA,kBAAmCE,UAAU,CAA7C,cAA6C,CAA7C;EAAA,IAAM,cAAN,eAAM,cAAN;EAAA,IAAwBD,MAAxB,eAAwBA,MAAxB;;EAEAE,SAAS,CAAC,YAAM;IACdC,cAAc,CAAdA,IAAc,CAAdA;IACA,OAAO,YAAM;MACXA,cAAc,CAAdA,KAAc,CAAdA;IADF,CAAA;EAFO,CAAA,EAKN,CATgD,cAShD,CALM,CAATD;;EAQA,IAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EACD,OAAO,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;IAAK,QAAQ,EAAEJ;EAAf,CAAA,EAAA,aAAA,EAAA;IAA0C,GAAG,EAAEK;EAA/C,CAAA,CAAA,CAAP;AAfF,CAAA;;AAkBA,eAAeC,IAAI,CAACC,UAAU,CAA9B,WAA8B,CAAX,CAAnB","sourcesContent":["import { usePropsResolution } from '../../../hooks';\nimport React, { useContext, memo, forwardRef, useEffect } from 'react';\nimport { default as Box, IBoxProps } from '../../primitives/Box';\nimport { PopoverContext } from './PopoverContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst PopoverBody = (props: IBoxProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('PopoverBody', props);\n  const { setBodyMounted, bodyId } = useContext(PopoverContext);\n\n  useEffect(() => {\n    setBodyMounted(true);\n    return () => {\n      setBodyMounted(false);\n    };\n  }, [setBodyMounted]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <Box nativeID={bodyId} {...resolvedProps} ref={ref} />;\n};\n\nexport default memo(forwardRef(PopoverBody));\n"]},"metadata":{},"sourceType":"module"}