{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { disableTextSelection, restoreTextSelection } from \"./textSelection\";\nimport { useMemo, useRef } from 'react';\nimport { useGlobalListeners } from '@react-aria/utils';\nexport function useMove(props) {\n  var onMoveStart = props.onMoveStart,\n      onMove = props.onMove,\n      onMoveEnd = props.onMoveEnd;\n  var state = useRef({\n    didMove: false,\n    lastPosition: null,\n    id: null\n  });\n\n  var _useGlobalListeners = useGlobalListeners(),\n      addGlobalListener = _useGlobalListeners.addGlobalListener,\n      removeGlobalListener = _useGlobalListeners.removeGlobalListener;\n\n  var moveProps = useMemo(function () {\n    var moveProps = {};\n\n    var start = function start() {\n      disableTextSelection();\n      state.current.didMove = false;\n    };\n\n    var move = function move(pointerType, deltaX, deltaY) {\n      if (deltaX === 0 && deltaY === 0) {\n        return;\n      }\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n          type: 'movestart',\n          pointerType: pointerType\n        });\n      }\n\n      onMove({\n        type: 'move',\n        pointerType: pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY\n      });\n    };\n\n    var end = function end(pointerType) {\n      restoreTextSelection();\n\n      if (state.current.didMove) {\n        onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n          type: 'moveend',\n          pointerType: pointerType\n        });\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      var onMouseMove = function onMouseMove(e) {\n        if (e.button === 0) {\n          move('mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n\n      var onMouseUp = function onMouseUp(e) {\n        if (e.button === 0) {\n          end('mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      moveProps.onMouseDown = function (e) {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      var onTouchMove = function onTouchMove(e) {\n        var touch = _toConsumableArray(e.changedTouches).findIndex(function (_ref) {\n          var identifier = _ref.identifier;\n          return identifier === state.current.id;\n        });\n\n        if (touch >= 0) {\n          var _e$changedTouches$tou = e.changedTouches[touch],\n              pageX = _e$changedTouches$tou.pageX,\n              pageY = _e$changedTouches$tou.pageY;\n          move('touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: pageX,\n            pageY: pageY\n          };\n        }\n      };\n\n      var onTouchEnd = function onTouchEnd(e) {\n        var touch = _toConsumableArray(e.changedTouches).findIndex(function (_ref2) {\n          var identifier = _ref2.identifier;\n          return identifier === state.current.id;\n        });\n\n        if (touch >= 0) {\n          end('touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n\n      moveProps.onTouchStart = function (e) {\n        if (e.changedTouches.length === 0 || state.current.id != null) {\n          return;\n        }\n\n        var _e$changedTouches$ = e.changedTouches[0],\n            pageX = _e$changedTouches$.pageX,\n            pageY = _e$changedTouches$.pageY,\n            identifier = _e$changedTouches$.identifier;\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {\n          pageX: pageX,\n          pageY: pageY\n        };\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    }\n\n    var triggerKeyboardMove = function triggerKeyboardMove(deltaX, deltaY) {\n      start();\n      move('keyboard', deltaX, deltaY);\n      end('keyboard');\n    };\n\n    moveProps.onKeyDown = function (e) {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(-1, 0);\n          break;\n\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(1, 0);\n          break;\n\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(0, -1);\n          break;\n\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n  return {\n    moveProps: moveProps\n  };\n}","map":{"version":3,"sources":["useMove.web.ts"],"names":["onMoveEnd","state","useRef","didMove","lastPosition","id","removeGlobalListener","useGlobalListeners","moveProps","useMemo","start","disableTextSelection","move","deltaX","deltaY","onMoveStart","type","pointerType","onMove","end","restoreTextSelection","onMouseMove","e","pageX","pageY","onMouseUp","addGlobalListener","onTouchMove","touch","identifier","onTouchEnd","triggerKeyboardMove"],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { disableTextSelection, restoreTextSelection } from './textSelection';\nimport { MoveEvents, PointerType } from '@react-types/shared';\nimport React, { HTMLAttributes, useMemo, useRef } from 'react';\nimport { useGlobalListeners } from '@react-aria/utils';\n\ninterface MoveResult {\n  /** Props to spread on the target element. */\n  moveProps: HTMLAttributes<HTMLElement>;\n}\n\n/**\n * Handles move interactions across mouse, touch, and keyboard, including dragging with\n * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and\n * platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useMove(props: MoveEvents): MoveResult {\n  let { onMoveStart, onMove, onMoveEnd } = props;\n\n  let state = useRef<{\n    didMove: boolean;\n    lastPosition: { pageX: number; pageY: number } | null;\n    id: number | null;\n  }>({ didMove: false, lastPosition: null, id: null });\n\n  let { addGlobalListener, removeGlobalListener } = useGlobalListeners();\n\n  let moveProps = useMemo(() => {\n    let moveProps: HTMLAttributes<HTMLElement> = {};\n\n    let start = () => {\n      disableTextSelection();\n      state.current.didMove = false;\n    };\n    let move = (pointerType: PointerType, deltaX: number, deltaY: number) => {\n      if (deltaX === 0 && deltaY === 0) {\n        return;\n      }\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart?.({\n          type: 'movestart',\n          pointerType,\n        });\n      }\n      onMove({\n        type: 'move',\n        pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n      });\n    };\n    let end = (pointerType: PointerType) => {\n      restoreTextSelection();\n      if (state.current.didMove) {\n        onMoveEnd?.({\n          type: 'moveend',\n          pointerType,\n        });\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      let onMouseMove = (e: MouseEvent) => {\n        if (e.button === 0) {\n          move(\n            'mouse',\n            e.pageX - state.current.lastPosition.pageX,\n            e.pageY - state.current.lastPosition.pageY\n          );\n          state.current.lastPosition = { pageX: e.pageX, pageY: e.pageY };\n        }\n      };\n      let onMouseUp = (e: MouseEvent) => {\n        if (e.button === 0) {\n          end('mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = { pageX: e.pageX, pageY: e.pageY };\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = (e: TouchEvent) => {\n        // @ts-ignore\n        let touch = [...e.changedTouches].findIndex(\n          ({ identifier }) => identifier === state.current.id\n        );\n        if (touch >= 0) {\n          let { pageX, pageY } = e.changedTouches[touch];\n          move(\n            'touch',\n            pageX - state.current.lastPosition.pageX,\n            pageY - state.current.lastPosition.pageY\n          );\n          state.current.lastPosition = { pageX, pageY };\n        }\n      };\n      let onTouchEnd = (e: TouchEvent) => {\n        // @ts-ignore\n        let touch = [...e.changedTouches].findIndex(\n          ({ identifier }) => identifier === state.current.id\n        );\n        if (touch >= 0) {\n          end('touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = (e: React.TouchEvent) => {\n        if (e.changedTouches.length === 0 || state.current.id != null) {\n          return;\n        }\n\n        let { pageX, pageY, identifier } = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = { pageX, pageY };\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    }\n\n    let triggerKeyboardMove = (deltaX: number, deltaY: number) => {\n      start();\n      move('keyboard', deltaX, deltaY);\n      end('keyboard');\n    };\n\n    moveProps.onKeyDown = (e) => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(-1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [\n    state,\n    onMoveStart,\n    onMove,\n    onMoveEnd,\n    addGlobalListener,\n    removeGlobalListener,\n  ]);\n\n  return { moveProps };\n}\n"]},"metadata":{},"sourceType":"module"}