{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport var useKeyboardBottomInset = function useKeyboardBottomInset() {\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      bottom = _React$useState2[0],\n      setBottom = _React$useState2[1];\n\n  var subscriptions = React.useRef([]);\n  React.useEffect(function () {\n    function onKeyboardChange(e) {\n      if (e.startCoordinates && e.endCoordinates.screenY <= e.startCoordinates.screenY) setBottom(e.endCoordinates.height / 2);else setBottom(0);\n    }\n\n    if (Platform.OS === 'ios') {\n      subscriptions.current = [Keyboard.addListener('keyboardWillChangeFrame', onKeyboardChange)];\n    } else {\n      subscriptions.current = [Keyboard.addListener('keyboardDidHide', onKeyboardChange), Keyboard.addListener('keyboardDidShow', onKeyboardChange)];\n    }\n\n    return function () {\n      subscriptions.current.forEach(function (subscription) {\n        subscription.remove();\n      });\n    };\n  }, [setBottom, subscriptions]);\n  return bottom;\n};","map":{"version":3,"sources":["useKeyboardBottomInset.ts"],"names":["useKeyboardBottomInset","React","subscriptions","e","setBottom","Platform","Keyboard","subscription"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAGA,OAAO,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;EAC1C,sBAA4BC,KAAK,CAALA,QAAAA,CAA5B,CAA4BA,CAA5B;EAAA;EAAA,IAAM,MAAN;EAAA,IAAM,SAAN;;EACA,IAAMC,aAAa,GAAGD,KAAK,CAALA,MAAAA,CAAtB,EAAsBA,CAAtB;EAEAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,SAAA,gBAAA,CAAA,CAAA,EAA4C;MAC1C,IACEE,CAAC,CAADA,gBAAAA,IACAA,CAAC,CAADA,cAAAA,CAAAA,OAAAA,IAA4BA,CAAC,CAADA,gBAAAA,CAF9B,OAAA,EAIEC,SAAS,CAACD,CAAC,CAADA,cAAAA,CAAAA,MAAAA,GAJZ,CAIW,CAATC,CAJF,KAKKA,SAAS,CAATA,CAAS,CAATA;IACN;;IAED,IAAIC,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;MACzBH,aAAa,CAAbA,OAAAA,GAAwB,CACtBI,QAAQ,CAARA,WAAAA,CAAAA,yBAAAA,EADFJ,gBACEI,CADsB,CAAxBJ;IADF,CAAA,MAIO;MACLA,aAAa,CAAbA,OAAAA,GAAwB,CACtBI,QAAQ,CAARA,WAAAA,CAAAA,iBAAAA,EADsB,gBACtBA,CADsB,EAEtBA,QAAQ,CAARA,WAAAA,CAAAA,iBAAAA,EAFFJ,gBAEEI,CAFsB,CAAxBJ;IAID;;IACD,OAAO,YAAM;MACXA,aAAa,CAAbA,OAAAA,CAAAA,OAAAA,CAA+BK,UAAAA,YAAD,EAAkB;QAC9CA,YAAY,CAAZA,MAAAA;MADFL,CAAAA;IADF,CAAA;EApBFD,CAAAA,EAyBG,CAAA,SAAA,EAzBHA,aAyBG,CAzBHA;EA2BA,OAAA,MAAA;AA/BK,CAAA","sourcesContent":["import * as React from 'react';\nimport { Keyboard, Platform, KeyboardEvent } from 'react-native';\n\nexport const useKeyboardBottomInset = () => {\n  const [bottom, setBottom] = React.useState(0);\n  const subscriptions = React.useRef<any[]>([]);\n\n  React.useEffect(() => {\n    function onKeyboardChange(e: KeyboardEvent) {\n      if (\n        e.startCoordinates &&\n        e.endCoordinates.screenY <= e.startCoordinates.screenY\n      )\n        setBottom(e.endCoordinates.height / 2);\n      else setBottom(0);\n    }\n\n    if (Platform.OS === 'ios') {\n      subscriptions.current = [\n        Keyboard.addListener('keyboardWillChangeFrame', onKeyboardChange),\n      ];\n    } else {\n      subscriptions.current = [\n        Keyboard.addListener('keyboardDidHide', onKeyboardChange),\n        Keyboard.addListener('keyboardDidShow', onKeyboardChange),\n      ];\n    }\n    return () => {\n      subscriptions.current.forEach((subscription) => {\n        subscription.remove();\n      });\n    };\n  }, [setBottom, subscriptions]);\n\n  return bottom;\n};\n"]},"metadata":{},"sourceType":"module"}