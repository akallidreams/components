{"ast":null,"code":"import { useFocusManager } from '@react-aria/focus';\nimport { useId } from '@react-aria/utils';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport var useMenuTrigger = function useMenuTrigger(_ref) {\n  var handleOpen = _ref.handleOpen,\n      isOpen = _ref.isOpen;\n  var menuTriggerId = useId();\n  return {\n    'onKeyDownCapture': function onKeyDownCapture(event) {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId\n  };\n};\nexport var useMenu = function useMenu() {\n  var focusManager = useFocusManager();\n\n  var onKeyDown = function onKeyDown(e) {\n    switch (e.key) {\n      case 'ArrowDown':\n        {\n          e.preventDefault();\n          focusManager.focusNext({\n            wrap: true\n          });\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          e.preventDefault();\n          focusManager.focusPrevious({\n            wrap: true\n          });\n          break;\n        }\n    }\n  };\n\n  return {\n    onKeyDown: onKeyDown,\n    accessibilityRole: 'menu'\n  };\n};\nexport var useMenuItem = function useMenuItem(_ref2) {\n  var textValue = _ref2.textValue,\n      ref = _ref2.ref;\n  return {\n    accessibilityRole: 'menuitem',\n    dataSet: {\n      nativebaseMenuItem: textValue\n    },\n    onHoverIn: function onHoverIn() {\n      if (ref.current && Platform.OS === 'web') ref.current.focus();\n    }\n  };\n};\nexport var useMenuOptionItem = function useMenuOptionItem(_ref3) {\n  var isChecked = _ref3.isChecked,\n      type = _ref3.type;\n  return {\n    accessibilityRole: 'menuitem' + (Platform.OS === 'web' ? type : ''),\n    accessibilityState: {\n      checked: isChecked\n    },\n    accessibilityChecked: isChecked\n  };\n};\nvar ITEM_ATTR = 'data-nativebase-menu-item';\n\nvar getValue = function getValue(element) {\n  var _element$getAttribute;\n\n  return (_element$getAttribute = element.getAttribute(ITEM_ATTR)) !== null && _element$getAttribute !== void 0 ? _element$getAttribute : '';\n};\n\nexport var useMenuTypeahead = function useMenuTypeahead(props) {\n  return {\n    onKeyDown: function onKeyDown(event) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n\n      if (event.key.length === 1 && !(event.ctrlKey || event.altKey || event.metaKey)) {\n        var container = event.currentTarget;\n        var values = Array.from(container.querySelectorAll(\"[\".concat(ITEM_ATTR, \"]\"))).map(getValue);\n        var searchKey = event.key;\n        var foundValue = values.find(function (value) {\n          return value.toLowerCase().startsWith(searchKey);\n        });\n        var newItem = container.querySelector(\"[\".concat(ITEM_ATTR, \"=\\\"\").concat(foundValue, \"\\\"]\"));\n\n        if (newItem) {\n          setTimeout(function () {\n            return newItem.focus();\n          });\n        }\n      }\n    }\n  };\n};","map":{"version":3,"sources":["useMenu.tsx"],"names":["useMenuTrigger","isOpen","menuTriggerId","useId","event","handleOpen","useMenu","focusManager","useFocusManager","onKeyDown","e","wrap","accessibilityRole","useMenuItem","ref","dataSet","nativebaseMenuItem","textValue","onHoverIn","Platform","useMenuOptionItem","type","accessibilityState","checked","isChecked","accessibilityChecked","ITEM_ATTR","getValue","element","useMenuTypeahead","props","container","values","Array","searchKey","foundValue","value","newItem","setTimeout"],"mappings":"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","sourcesContent":["import { useFocusManager } from '@react-aria/focus';\nimport { useId } from '@react-aria/utils';\nimport { AccessibilityRole, Platform } from 'react-native';\n\ntype IMenuTriggerProps = {\n  handleOpen: () => void;\n  isOpen: boolean;\n};\n\nexport const useMenuTrigger = ({ handleOpen, isOpen }: IMenuTriggerProps) => {\n  const menuTriggerId = useId();\n  return {\n    'onKeyDownCapture': (event: KeyboardEvent) => {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId,\n  };\n};\n\nexport const useMenu = () => {\n  const focusManager = useFocusManager();\n  const onKeyDown = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowDown': {\n        e.preventDefault();\n        focusManager.focusNext({ wrap: true });\n        break;\n      }\n      case 'ArrowUp': {\n        e.preventDefault();\n        focusManager.focusPrevious({ wrap: true });\n        break;\n      }\n    }\n  };\n\n  return {\n    onKeyDown,\n    accessibilityRole: 'menu' as AccessibilityRole,\n  };\n};\n\nexport const useMenuItem = ({\n  textValue,\n  ref,\n}: {\n  textValue: string;\n  ref: any;\n}) => {\n  return {\n    accessibilityRole: 'menuitem' as AccessibilityRole,\n    dataSet: {\n      nativebaseMenuItem: textValue,\n    },\n    onHoverIn: () => {\n      if (ref.current && Platform.OS === 'web') ref.current.focus();\n    },\n  };\n};\n\nexport const useMenuOptionItem = ({\n  isChecked,\n  type,\n}: {\n  isChecked: boolean;\n  type: 'checkbox' | 'radio';\n}) => {\n  return {\n    accessibilityRole: ('menuitem' +\n      (Platform.OS === 'web' ? type : '')) as AccessibilityRole,\n    accessibilityState: {\n      checked: isChecked,\n    },\n    accessibilityChecked: isChecked,\n  };\n};\n\nconst ITEM_ATTR = 'data-nativebase-menu-item';\nconst getValue = (element: Element) => element.getAttribute(ITEM_ATTR) ?? '';\n\nexport const useMenuTypeahead = (props: any): any => {\n  return {\n    onKeyDown(event: KeyboardEvent) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n\n      if (\n        event.key.length === 1 &&\n        !(event.ctrlKey || event.altKey || event.metaKey)\n      ) {\n        const container = event.currentTarget as HTMLElement;\n        const values = Array.from(\n          container.querySelectorAll(`[${ITEM_ATTR}]`)\n        ).map(getValue);\n\n        const searchKey = event.key;\n\n        const foundValue = values.find((value) =>\n          value.toLowerCase().startsWith(searchKey)\n        );\n        const newItem = container.querySelector(\n          `[${ITEM_ATTR}=\"${foundValue}\"]`\n        );\n\n        if (newItem) {\n          /**\n           * Imperative focus during keydown is risky so we prevent React's batching updates\n           * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n           */\n          setTimeout(() => (newItem as HTMLElement).focus());\n        }\n      }\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}