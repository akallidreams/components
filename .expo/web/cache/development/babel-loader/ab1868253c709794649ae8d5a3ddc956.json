{"ast":null,"code":"import useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { getClosestBreakpoint, hasValidBreakpointFormat, findLastValidBreakpoint } from \"../theme/tools\";\nimport { useTheme } from \"./../hooks/useTheme\";\nexport function useBreakpointValue(values) {\n  var _useWindowDimensions;\n\n  var windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width;\n  var theme = useTheme();\n\n  if (hasValidBreakpointFormat(values, theme.breakpoints)) {\n    var currentBreakpoint = getClosestBreakpoint(theme.breakpoints, windowWidth);\n    return findLastValidBreakpoint(values, theme.breakpoints, currentBreakpoint);\n  } else {\n    return values;\n  }\n}","map":{"version":3,"sources":["useBreakpointValue.ts"],"names":["windowWidth","useWindowDimensions","theme","useTheme","hasValidBreakpointFormat","currentBreakpoint","getClosestBreakpoint","findLastValidBreakpoint"],"mappings":";AACA,SAAA,oBAAA,EAAA,wBAAA,EAAA,uBAAA;AAKA,SAAA,QAAA;AAOA,OAAO,SAAA,kBAAA,CAAA,MAAA,EAA6D;EAAA,IAAA,oBAAA;;EAClE,IAAIA,WAAW,GAAA,CAAA,oBAAA,GAAGC,mBAAH,EAAA,MAAA,IAAA,IAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,oBAAAA,CAAlB,KAAA;EACA,IAAMC,KAAK,GAAGC,QAAd,EAAA;;EAEA,IAAIC,wBAAwB,CAAA,MAAA,EAASF,KAAK,CAA1C,WAA4B,CAA5B,EAAyD;IACvD,IAAIG,iBAAiB,GAAGC,oBAAoB,CAC1CJ,KAAK,CADqC,WAAA,EAA5C,WAA4C,CAA5C;IAIA,OAAOK,uBAAuB,CAAA,MAAA,EAE5BL,KAAK,CAFuB,WAAA,EAA9B,iBAA8B,CAA9B;EALF,CAAA,MAUO;IACL,OAAA,MAAA;EACD;AACF","sourcesContent":["import { useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  hasValidBreakpointFormat,\n  findLastValidBreakpoint,\n} from '../theme/tools';\nimport { useTheme } from './../hooks/useTheme';\nimport type { ITheme } from '../theme/index';\n\ntype UseBreakpointValueParam =\n  | { [key in keyof ITheme['breakpoints']]?: any }\n  | Array<any>;\n\nexport function useBreakpointValue(values: UseBreakpointValueParam) {\n  let windowWidth = useWindowDimensions()?.width;\n  const theme = useTheme();\n\n  if (hasValidBreakpointFormat(values, theme.breakpoints)) {\n    let currentBreakpoint = getClosestBreakpoint(\n      theme.breakpoints,\n      windowWidth\n    );\n    return findLastValidBreakpoint(\n      values,\n      theme.breakpoints,\n      currentBreakpoint\n    );\n  } else {\n    return values;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}