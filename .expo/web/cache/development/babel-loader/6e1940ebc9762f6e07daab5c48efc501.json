{"ast":null,"code":"import _extends2 from \"@babel/runtime/helpers/extends\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef } from 'react';\nimport RNView from \"react-native-web/dist/exports/View\";\nimport { usePropsResolution } from \"../../../hooks\";\nimport { makeStyledComponent } from \"../../../utils/styled\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar StyledView = makeStyledComponent(RNView);\nexport var View = forwardRef(function (props, ref) {\n  var _usePropsResolution = usePropsResolution('View', props),\n      resolvedProps = _extends2({}, _usePropsResolution);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(StyledView, _extends({}, resolvedProps, {\n    ref: ref\n  }));\n});","map":{"version":3,"sources":["View.tsx"],"names":["StyledView","makeStyledComponent","View","forwardRef","resolvedProps","usePropsResolution","useHasResponsiveProps","ref"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,UAAA,QAAA,OAAA;;AAEA,SAAA,kBAAA;AACA,SAAA,mBAAA;AAEA,SAAA,qBAAA;AAEA,IAAMA,UAAe,GAAGC,mBAAmB,CAA3C,MAA2C,CAA3C;AAEA,OAAO,IAAMC,IAAI,GAAGC,UAAU,CAAC,UAAA,KAAA,EAAA,GAAA,EAAiC;EAC9D,0BAA6BE,kBAAkB,CAAA,MAAA,EADe,KACf,CAA/C;EAAA,IAAWD,aAAX;;EAEA,IAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EACD,OAAO,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA,EAAA,EAAA,aAAA,EAAA;IAA+B,GAAG,EAAEC;EAApC,CAAA,CAAA,CAAP;AANK,CAAuB,CAAvB","sourcesContent":["import React, { forwardRef } from 'react';\nimport { View as RNView } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport type { IViewProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyledView: any = makeStyledComponent(RNView);\n\nexport const View = forwardRef((props: IViewProps, ref: any) => {\n  const { ...resolvedProps } = usePropsResolution('View', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <StyledView {...resolvedProps} ref={ref} />;\n});\n"]},"metadata":{},"sourceType":"module"}