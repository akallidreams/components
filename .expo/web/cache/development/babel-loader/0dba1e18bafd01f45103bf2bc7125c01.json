{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"ratio\", \"children\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { default as Box } from \"../../primitives/Box\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { usePropsResolution } from \"../../../hooks\";\nvar AspectView = forwardRef(function (props, ref) {\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      layout = _React$useState2[0],\n      setLayout = _React$useState2[1];\n\n  var aspectViewStyle = [StyleSheet.flatten(props.style) || {}];\n\n  if (layout) {\n    var _layout$width = layout.width,\n        width = _layout$width === void 0 ? 0 : _layout$width,\n        _layout$height = layout.height,\n        height = _layout$height === void 0 ? 0 : _layout$height;\n\n    if (width === 0) {\n      aspectViewStyle.push({\n        width: height * props.aspectRatio,\n        height: height\n      });\n    } else {\n      aspectViewStyle.push({\n        width: width,\n        height: width / props.aspectRatio\n      });\n    }\n  }\n\n  return React.createElement(Box, _extends({\n    ref: ref\n  }, props, {\n    style: aspectViewStyle,\n    onLayout: function onLayout(_ref) {\n      var inLayout = _ref.nativeEvent.layout;\n      return setLayout(inLayout);\n    }\n  }));\n});\n\nvar AspectRatio = function AspectRatio(props, ref) {\n  var _children$props;\n\n  var _usePropsResolution = usePropsResolution('AspectRatio', props, {}, {\n    resolveResponsively: ['ratio']\n  }),\n      ratio = _usePropsResolution.ratio,\n      _usePropsResolution$c = _usePropsResolution.children,\n      children = _usePropsResolution$c === void 0 ? React.createElement(React.Fragment, null) : _usePropsResolution$c,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  var computedStyle = resolvedProps.style;\n  var newChildWithProps = React.cloneElement(children, _objectSpread(_objectSpread({}, children === null || children === void 0 ? void 0 : children.props), {}, {\n    style: StyleSheet.absoluteFillObject\n  }), children === null || children === void 0 ? void 0 : (_children$props = children.props) === null || _children$props === void 0 ? void 0 : _children$props.children);\n\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n\n  if (Platform.OS === 'web') {\n    return React.createElement(AspectView, _extends({\n      aspectRatio: ratio\n    }, resolvedProps, {\n      ref: ref\n    }), newChildWithProps);\n  } else {\n    computedStyle = StyleSheet.flatten([{\n      style: resolvedProps.style\n    }, {\n      aspectRatio: ratio\n    }]);\n    return React.createElement(Box, _extends({}, resolvedProps, {\n      style: computedStyle,\n      ref: ref\n    }), newChildWithProps);\n  }\n};\n\nexport default memo(forwardRef(AspectRatio));","map":{"version":3,"sources":["index.tsx"],"names":["default","AspectView","forwardRef","React","aspectViewStyle","StyleSheet","props","width","height","aspectRatio","ref","nativeEvent","layout","inLayout","setLayout","AspectRatio","children","resolvedProps","usePropsResolution","resolveResponsively","computedStyle","newChildWithProps","style","absoluteFillObject","useHasResponsiveProps","Platform","ratio","memo"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { StyleSheet, ViewStyle, Platform } from 'react-native';\nimport { default as Box } from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks';\nimport type { IAspectRatioProps } from './types';\n\nconst AspectView = forwardRef((props: any, ref?: any) => {\n  const [layout, setLayout] = React.useState();\n  const aspectViewStyle = [StyleSheet.flatten(props.style) || {}];\n  if (layout) {\n    // @ts-ignore\n    let { width = 0, height = 0 } = layout;\n    if (width === 0) {\n      aspectViewStyle.push({ width: height * props.aspectRatio, height });\n    } else {\n      aspectViewStyle.push({ width, height: width / props.aspectRatio });\n    }\n  }\n\n  return (\n    <Box\n      ref={ref}\n      {...props}\n      style={aspectViewStyle}\n      onLayout={({ nativeEvent: { layout: inLayout } }: any) =>\n        setLayout(inLayout)\n      }\n    />\n  );\n});\n\nconst AspectRatio = (props: IAspectRatioProps, ref?: any) => {\n  const { ratio, children = <></>, ...resolvedProps } = usePropsResolution(\n    'AspectRatio',\n    props,\n    {},\n    { resolveResponsively: ['ratio'] }\n  );\n  let computedStyle: ViewStyle | undefined = resolvedProps.style;\n  const newChildWithProps = React.cloneElement(\n    children,\n    {\n      ...children?.props,\n      style: StyleSheet.absoluteFillObject,\n    },\n    children?.props?.children\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n  // DOC:  It uses a aspectRatio property of React Native and manually calculate on Web\n  if (Platform.OS === 'web') {\n    return (\n      <AspectView aspectRatio={ratio} {...resolvedProps} ref={ref}>\n        {newChildWithProps}\n      </AspectView>\n    );\n  } else {\n    computedStyle = StyleSheet.flatten([\n      { style: resolvedProps.style },\n      { aspectRatio: ratio },\n    ]);\n    return (\n      <Box {...resolvedProps} style={computedStyle} ref={ref}>\n        {newChildWithProps}\n      </Box>\n    );\n  }\n};\n\nexport default memo(forwardRef(AspectRatio));\n"]},"metadata":{},"sourceType":"module"}