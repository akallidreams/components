{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../../primitives/Box\";\nimport { usePropsResolution } from \"../../../hooks\";\nimport { ModalContext } from \"./Context\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar ModalContent = function ModalContent(props, ref) {\n  var resolvedProps = usePropsResolution('ModalContent', props);\n\n  var _React$useContext = React.useContext(ModalContext),\n      contentSize = _React$useContext.contentSize,\n      initialFocusRef = _React$useContext.initialFocusRef,\n      finalFocusRef = _React$useContext.finalFocusRef,\n      handleClose = _React$useContext.handleClose,\n      visible = _React$useContext.visible;\n\n  React.useEffect(function () {\n    var finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n\n    if (visible) {\n      if (initialFocusRef && initialFocusRef.current) {\n        initialFocusRef.current.focus();\n      }\n    } else {\n      if (finalRefVal) {\n        finalRefVal.focus();\n      }\n    }\n  }, [initialFocusRef, finalFocusRef, visible]);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Box, _extends({}, contentSize, resolvedProps, {\n    ref: ref,\n    onAccessibilityEscape: handleClose,\n    \"aria-modal\": \"true\",\n    accessibilityRole: Platform.OS === 'web' ? 'dialog' : undefined,\n    accessibilityViewIsModal: true\n  }));\n};\n\nexport default memo(forwardRef(ModalContent));","map":{"version":3,"sources":["ModalContent.tsx"],"names":["ModalContent","resolvedProps","usePropsResolution","visible","React","finalRefVal","finalFocusRef","initialFocusRef","useHasResponsiveProps","Platform","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,GAAA;AACA,SAAA,kBAAA;AACA,SAAA,YAAA;;AAEA,SAAA,qBAAA;;AAEA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAAA,KAAA,EAAA,GAAA,EAAiC;EACpD,IAAMC,aAAa,GAAGC,kBAAkB,CAAA,cAAA,EAAxC,KAAwC,CAAxC;;EACA,wBAMIE,KAAK,CAALA,UAAAA,CANJ,YAMIA,CANJ;EAAA,IAAM,WAAN,qBAAM,WAAN;EAAA,IAAM,eAAN,qBAAM,eAAN;EAAA,IAAM,aAAN,qBAAM,aAAN;EAAA,IAAM,WAAN,qBAAM,WAAN;EAAA,IAKED,OALF,qBAKEA,OALF;;EAOAC,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAMC,WAAW,GAAGC,aAAa,GAAGA,aAAa,CAAhB,OAAA,GAAjC,IAAA;;IACA,IAAA,OAAA,EAAa;MACX,IAAIC,eAAe,IAAIA,eAAe,CAAtC,OAAA,EAAgD;QAE9CA,eAAe,CAAfA,OAAAA,CAAAA,KAAAA;MACD;IAJH,CAAA,MAKO;MACL,IAAA,WAAA,EAAiB;QAEfF,WAAW,CAAXA,KAAAA;MACD;IACF;EAZHD,CAAAA,EAaG,CAAA,eAAA,EAAA,aAAA,EAtBiD,OAsBjD,CAbHA;;EAgBA,IAAII,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EACD,OACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA,EAAA,EAAA,WAAA,EAAA,aAAA,EAAA;IAGE,GAAG,EAHL,GAAA;IAIE,qBAAqB,EAJvB,WAAA;IAME,cANF,MAAA;IAQE,iBAAiB,EAAEC,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,GAAAA,QAAAA,GARrB,SAAA;IASE,wBAAwB,EAAA;EAT1B,CAAA,CAAA,CADF;AA5BF,CAAA;;AA2CA,eAAeC,IAAI,CAACC,UAAU,CAA9B,YAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box, { IBoxProps } from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { ModalContext } from './Context';\nimport { Platform } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst ModalContent = (props: IBoxProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('ModalContent', props);\n  const {\n    contentSize,\n    initialFocusRef,\n    finalFocusRef,\n    handleClose,\n    visible,\n  } = React.useContext(ModalContext);\n  React.useEffect(() => {\n    const finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n    if (visible) {\n      if (initialFocusRef && initialFocusRef.current) {\n        //@ts-ignore\n        initialFocusRef.current.focus();\n      }\n    } else {\n      if (finalRefVal) {\n        //@ts-ignore\n        finalRefVal.focus();\n      }\n    }\n  }, [initialFocusRef, finalFocusRef, visible]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...contentSize}\n      {...resolvedProps}\n      ref={ref}\n      onAccessibilityEscape={handleClose}\n      //@ts-ignore - web only\n      aria-modal=\"true\"\n      //@ts-ignore - web only\n      accessibilityRole={Platform.OS === 'web' ? 'dialog' : undefined}\n      accessibilityViewIsModal\n    />\n  );\n};\n\nexport default memo(forwardRef(ModalContent));\n"]},"metadata":{},"sourceType":"module"}