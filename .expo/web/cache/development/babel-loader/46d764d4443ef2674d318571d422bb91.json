{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"_style\", \"_variant\", \"children\"],\n    _excluded2 = [\"onChangeText\", \"_errors\", \"_formData\"],\n    _excluded3 = [\"_customStyles\", \"_placeholder\", \"_register\", \"_colors\", \"_key\", \"_label\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { Text } from \"./Text\";\nimport { forwardRef, memo, useEffect, useState } from \"react\";\nimport RNTextInput from \"react-native-web/dist/exports/TextInput\";\nimport { initialTheme } from \"../helpers\";\nimport { useMyStyledComponent } from \"../hooks\";\nimport { Center } from \"./View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var TextInput = memo(forwardRef(function (props, ref) {\n  var _style = props._style,\n      _variant = props._variant,\n      children = props.children,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var _useMyStyledComponent = useMyStyledComponent({\n    _style: _style,\n    _variant: _variant\n  }, RNTextInput),\n      MyStyledComponent = _useMyStyledComponent.MyStyledComponent;\n\n  return _jsx(MyStyledComponent, _objectSpread(_objectSpread({}, rest), {}, {\n    ref: ref,\n    children: children\n  }));\n}));\nvar defaultColors = {\n  error: initialTheme.colors.error,\n  main: initialTheme.colors.grey\n};\n\nvar validateColor = function validateColor(_ref) {\n  var _ref$_colors = _ref._colors,\n      _colors = _ref$_colors === void 0 ? {\n    error: defaultColors.error,\n    main: defaultColors.main\n  } : _ref$_colors,\n      _errors = _ref._errors,\n      _key = _ref._key;\n\n  if (_key in _errors) {\n    return _colors.error;\n  }\n\n  return _colors.main;\n};\n\nexport var Input = memo(forwardRef(function (props, ref) {\n  var _customStyles = props._customStyles,\n      _placeholder = props._placeholder,\n      _props$_register = props._register,\n      _onChangeText = _props$_register.onChangeText,\n      _errors = _props$_register._errors,\n      _formData = _props$_register._formData,\n      register = _objectWithoutProperties(_props$_register, _excluded2),\n      _colors = props._colors,\n      _key = props._key,\n      _label = props._label,\n      rest = _objectWithoutProperties(props, _excluded3);\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      validColor = _useState2[0],\n      setValidColor = _useState2[1];\n\n  useEffect(function () {\n    var validatedColor = validateColor({\n      _colors: _colors || defaultColors,\n      _errors: _errors,\n      _key: _key\n    });\n    if (validColor !== undefined) setValidColor(validatedColor);\n  }, [_errors]);\n  return _jsxs(Center, {\n    _style: \"width: 100%; \" + (_customStyles == null ? void 0 : _customStyles.container),\n    children: [_jsx(Text, {\n      _style: \"\\n          \" + (_customStyles == null ? void 0 : _customStyles.label) + \";\\n          color: \" + (validColor || defaultColors.main) + \";\\n        \",\n      children: _label\n    }), _jsx(TextInput, _objectSpread(_objectSpread({}, register), {}, {\n      ref: ref,\n      onChangeText: function onChangeText(text) {\n        _onChangeText(_key)(text);\n      },\n      placeholder: _placeholder,\n      value: _formData[_key],\n      _style: \"\\n            width: 100%;\\n            border-width: 1px;\\n            border-color: \" + (validColor || defaultColors.main) + \";\\n            color: \" + (validColor || defaultColors.main) + \";\\n            \" + (_customStyles == null ? void 0 : _customStyles.input) + \";\\n          \"\n    }, rest)), _key in _errors ? _jsx(Text, {\n      \"data-testId\": \"error-message\",\n      _style: \"\\n              \" + (_customStyles == null ? void 0 : _customStyles.errorMessage) + \";\\n             color: \" + ((_colors == null ? void 0 : _colors.error) || defaultColors.error) + \"};\\n          \",\n      children: _errors == null ? void 0 : _errors[_key]\n    }) : null]\n  });\n}));\nexport var TextArea = memo(function (props) {\n  return _jsx(TextInput, _objectSpread(_objectSpread({}, props), {}, {\n    multiline: true,\n    _style: \"text-align-vertical: top\"\n  }));\n});","map":{"version":3,"names":["Text","forwardRef","memo","useEffect","useState","initialTheme","useMyStyledComponent","Center","TextInput","props","ref","_style","_variant","children","rest","RNTextInput","MyStyledComponent","defaultColors","error","colors","main","grey","validateColor","_colors","_errors","_key","Input","_customStyles","_placeholder","_register","onChangeText","_formData","register","_label","validColor","setValidColor","validatedColor","undefined","container","label","text","input","errorMessage","TextArea"],"sources":["/home/danilosilvadev/dev/@akalli/components/src/components/Input.tsx"],"sourcesContent":["import { Text } from \"./Text\";\nimport { forwardRef, memo, Ref, useEffect, useState } from \"react\";\nimport { TextInputProps, TextInput as RNTextInput } from \"react-native\";\nimport { IColor, ITheme } from \"../helpers/types\";\nimport { StyleProps } from \"react-native-reanimated\";\nimport { initialTheme } from \"../helpers\";\nimport { useMyStyledComponent } from \"../hooks\";\nimport { Center } from \"./View\";\n\n/**\n * @params this module needs yup to validation \n * @example\n    import * as yup from \"yup\";\n\n    const schema = yup.object().shape({\n      email: yup.string().email().required(),\n      password: yup.string().min(8).max(32).required(),\n    });\n\n     pass the register prop from useForm to validate the form\n\n  @styling\n     You can style the input with the following props:\n      - colors:\n        - main: the main color of the input\n        - error: the color of the input when it has an error\n      \n      the rest you can add to a prop called style and pass \n      it to the TextInput component using camelCase syntax\n\n    If you want more conrtrol over the input you can import TextInput from \n    our lib that is the common input without validation and you can style using our main syntax\n * \n */\n\ninterface ITextInput extends TextInputProps {\n  _style?: string;\n  _variant?: string;\n}\n\nexport const TextInput = memo(\n  forwardRef((props: ITextInput, ref) => {\n    const { _style, _variant, children, ...rest } = props;\n    const { MyStyledComponent } = useMyStyledComponent(\n      {\n        _style,\n        _variant,\n      },\n      RNTextInput\n    );\n\n    return (\n      <MyStyledComponent {...rest} ref={ref}>\n        {children}\n      </MyStyledComponent>\n    );\n  })\n);\n\ninterface IProps extends ITextInput {\n  _register: {\n    onChangeText: (key: string) => (value: string) => void;\n    onBlur: () => void;\n    _errors: { [key: string]: string } | {};\n    _formData: { [key: string]: string };\n  };\n  _colors?: {\n    error?: IColor;\n    main?: IColor;\n  };\n  _key: string;\n  _placeholder?: string;\n  _label: string;\n  _customStyles?: {\n    label?: string;\n    errorMessage?: string;\n    input?: string;\n    container?: string;\n  };\n}\n\ninterface IValidateColor {\n  _errors: { [key: string]: string } | {};\n  _colors?: {\n    error?: IColor;\n    main?: IColor;\n  };\n  _key: string;\n}\nconst defaultColors = {\n  error: initialTheme.colors.error,\n  main: initialTheme.colors.grey,\n};\n\nconst validateColor = ({\n  _colors = { error: defaultColors.error, main: defaultColors.main },\n  _errors,\n  _key,\n}: IValidateColor) => {\n  if (_key in _errors) {\n    return _colors.error;\n  }\n  return _colors.main;\n};\n\nexport const Input = memo(\n  forwardRef((props: IProps, ref: Ref<RNTextInput> | undefined) => {\n    const {\n      _customStyles,\n      _placeholder,\n      _register: { onChangeText, _errors, _formData, ...register },\n      _colors,\n      _key,\n      _label,\n      ...rest\n    } = props;\n    const [validColor, setValidColor] = useState(\"\");\n\n    useEffect(() => {\n      const validatedColor: IColor = validateColor({\n        _colors: _colors || defaultColors,\n        _errors,\n        _key,\n      }) as IColor;\n      if (validColor !== undefined) setValidColor(validatedColor);\n    }, [_errors]);\n\n    return (\n      <Center _style={`width: 100%; ${_customStyles?.container}`}>\n        {/** TODO: create a way to style this container */}\n        <Text\n          _style={`\n          ${_customStyles?.label};\n          color: ${validColor || defaultColors.main};\n        `}\n        >\n          {_label}\n        </Text>\n        <TextInput\n          {...register}\n          ref={ref}\n          onChangeText={(text) => {\n            onChangeText(_key)(text);\n          }}\n          placeholder={_placeholder}\n          value={_formData[_key]}\n          _style={`\n            width: 100%;\n            border-width: 1px;\n            border-color: ${validColor || defaultColors.main};\n            color: ${validColor || defaultColors.main};\n            ${_customStyles?.input};\n          `}\n          {...rest}\n        />\n        {_key in _errors ? (\n          <Text\n            data-testId=\"error-message\"\n            _style={`\n              ${_customStyles?.errorMessage};\n             color: ${_colors?.error || defaultColors.error}};\n          `}\n          >\n            {_errors?.[_key as keyof typeof _errors]}\n          </Text>\n        ) : null}\n      </Center>\n    );\n  })\n);\n\nexport const TextArea = memo((props: ITextInput) => (\n  <TextInput {...props} multiline _style=\"text-align-vertical: top\" />\n));\n\n/**\n @docs\n- This component is a controlled input using react-hook-form for validations and error messages\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}