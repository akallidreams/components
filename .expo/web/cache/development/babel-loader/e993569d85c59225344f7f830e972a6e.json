{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"style\", \"isIncrement\", \"disablitityCheck\", \"_active\", \"_disabled\", \"isDisabled\", \"accessibilityLabel\", \"pressHandler\", \"iconColor\"],\n    _excluded3 = [\"children\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { VStack, Box } from \"../../primitives\";\nimport { useThemeProps } from \"../../../hooks\";\nimport { NumberInputContext } from \"./Context\";\nimport { ChevronUpIcon, ChevronDownIcon } from \"../../primitives/Icon/Icons\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nexport var NBStepper = React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useThemeProps = useThemeProps('NumberInputStepper', props),\n      style = _useThemeProps.style,\n      isIncrement = _useThemeProps.isIncrement,\n      disablitityCheck = _useThemeProps.disablitityCheck,\n      _active = _useThemeProps._active,\n      _disabled = _useThemeProps._disabled,\n      isDisabled = _useThemeProps.isDisabled,\n      accessibilityLabel = _useThemeProps.accessibilityLabel,\n      pressHandler = _useThemeProps.pressHandler,\n      iconColor = _useThemeProps.iconColor,\n      newProps = _objectWithoutProperties(_useThemeProps, _excluded2);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(TouchableOpacity, {\n    activeOpacity: 0.2,\n    disabled: disablitityCheck || isDisabled,\n    onPress: pressHandler,\n    accessible: true,\n    accessibilityLabel: accessibilityLabel,\n    ref: ref\n  }, React.createElement(Box, _extends({}, newProps, _active, disablitityCheck || isDisabled ? _disabled : {}, {\n    borderColor: \"transparent\",\n    style: style,\n    opacity: disablitityCheck || isDisabled ? 0.4 : 1\n  }, Platform.OS === 'web' ? {\n    disabled: disablitityCheck || isDisabled,\n    cursor: disablitityCheck || isDisabled ? 'not-allowed' : 'auto'\n  } : {}), children || isIncrement ? React.createElement(ChevronUpIcon, {\n    color: iconColor\n  }) : React.createElement(ChevronDownIcon, {\n    color: iconColor\n  })));\n});\n\nvar NumberInputStepper = function NumberInputStepper(_ref2, ref) {\n  var children = _ref2.children,\n      props = _objectWithoutProperties(_ref2, _excluded3);\n\n  var _React$useContext = React.useContext(NumberInputContext),\n      numberInputStepper = _React$useContext.numberInputStepper,\n      setNumberInputStepper = _React$useContext.setNumberInputStepper;\n\n  React.useEffect(function () {\n    !numberInputStepper && setNumberInputStepper(React.createElement(VStack, _extends({}, props, {\n      ref: ref\n    }), children));\n  }, [numberInputStepper, setNumberInputStepper, props, children, ref]);\n  return null;\n};\n\nexport default React.memo(React.forwardRef(NumberInputStepper));","map":{"version":3,"sources":["NumberInputStepper.tsx"],"names":["NBStepper","props","newProps","useThemeProps","useHasResponsiveProps","disablitityCheck","ref","disabled","cursor","iconColor","NumberInputStepper","setNumberInputStepper","React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;;;AAEA,SAAA,MAAA,EAAA,GAAA;AACA,SAAA,aAAA;AAEA,SAAA,kBAAA;AACA,SAAA,aAAA,EAAA,eAAA;AACA,SAAA,qBAAA;AAEA,OAAO,IAAMA,SAAS,GAAG,KAAK,CAAL,UAAA,CACvB,gBAAA,GAAA,EAA4C;EAAA,IAA3C,QAA2C,QAA3C,QAA2C;EAAA,IAA5BC,KAA4B;;EAC1C,qBAWIE,aAAa,CAAA,oBAAA,EAZyB,KAYzB,CAXjB;EAAA,IAAM,KAAN,kBAAM,KAAN;EAAA,IAAM,WAAN,kBAAM,WAAN;EAAA,IAAM,gBAAN,kBAAM,gBAAN;EAAA,IAAM,OAAN,kBAAM,OAAN;EAAA,IAAM,SAAN,kBAAM,SAAN;EAAA,IAAM,UAAN,kBAAM,UAAN;EAAA,IAAM,kBAAN,kBAAM,kBAAN;EAAA,IAAM,YAAN,kBAAM,YAAN;EAAA,IAAM,SAAN,kBAAM,SAAN;EAAA,IAUKD,QAVL;;EAaA,IAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EACD,OACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;IACE,aAAa,EADf,GAAA;IAEE,QAAQ,EAAEC,gBAAgB,IAF5B,UAAA;IAGE,OAAO,EAHT,YAAA;IAIE,UAAU,EAJZ,IAAA;IAKE,kBAAkB,EALpB,kBAAA;IAME,GAAG,EAAEC;EANP,CAAA,EAQE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA,EAAA,EAAA,QAAA,EAAA,OAAA,EAGOD,gBAAgB,IAAhBA,UAAAA,GAAAA,SAAAA,GAHP,EAAA,EAAA;IAIE,WAAW,EAJb,aAAA;IAKE,KAAK,EALP,KAAA;IAME,OAAO,EAAEA,gBAAgB,IAAhBA,UAAAA,GAAAA,GAAAA,GAAuC;EANlD,CAAA,EAOO,QAAQ,CAAR,EAAA,KAAA,KAAA,GACD;IACEE,QAAQ,EAAEF,gBAAgB,IAD5B,UAAA;IAEEG,MAAM,EAAEH,gBAAgB,IAAhBA,UAAAA,GAAAA,aAAAA,GAAiD;EAF3D,CADC,GAPP,EAAA,CAAA,EAcG,QAAQ,IAAR,WAAA,GACC,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;IAAe,KAAK,EAAEI;EAAtB,CAAA,CADD,GAGC,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA;IAAiB,KAAK,EAAEA;EAAxB,CAAA,CAjBJ,CARF,CADF;AAlBG,CAAkB,CAAlB;;AAoDP,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,QAAA,GAAA,EAGtB;EAAA,IAFH,QAEG,SAFH,QAEG;EAAA,IAFYT,KAEZ;;EACH,wBAGyBW,KAAK,CAALA,UAAAA,CAHzB,kBAGyBA,CAHzB;EAAA,IAAM,kBAAN,qBAAM,kBAAN;EAAA,IAEED,qBAFF,qBAEEA,qBAFF;;EAKAC,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,CAAA,kBAAA,IACED,qBAAqB,CACnB,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;MAAmB,GAAG,EAAEL;IAAxB,CAAA,CAAA,EAFJ,QAEI,CADmB,CADvB;EADFM,CAAAA,EAOG,CAAA,kBAAA,EAAA,qBAAA,EAAA,KAAA,EAAA,QAAA,EAPHA,GAOG,CAPHA;EAQA,OAAA,IAAA;AAjBF,CAAA;;AAoBA,eAAeA,KAAK,CAALA,IAAAA,CAAWA,KAAK,CAALA,UAAAA,CAA1B,kBAA0BA,CAAXA,CAAf","sourcesContent":["import React from 'react';\nimport { TouchableOpacity, Platform } from 'react-native';\nimport { VStack, Box } from '../../primitives';\nimport { useThemeProps } from '../../../hooks';\nimport type { INumberInputSteppersProps, INumberInputContext } from './types';\nimport { NumberInputContext } from './Context';\nimport { ChevronUpIcon, ChevronDownIcon } from '../../primitives/Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const NBStepper = React.forwardRef(\n  ({ children, ...props }: any, ref?: any) => {\n    const {\n      style,\n      isIncrement,\n      disablitityCheck,\n      _active,\n      _disabled,\n      isDisabled,\n      accessibilityLabel,\n      pressHandler,\n      iconColor,\n      ...newProps\n    } = useThemeProps('NumberInputStepper', props);\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n    return (\n      <TouchableOpacity\n        activeOpacity={0.2}\n        disabled={disablitityCheck || isDisabled}\n        onPress={pressHandler}\n        accessible\n        accessibilityLabel={accessibilityLabel}\n        ref={ref}\n      >\n        <Box\n          {...newProps}\n          {..._active}\n          {...(disablitityCheck || isDisabled ? _disabled : {})}\n          borderColor=\"transparent\"\n          style={style}\n          opacity={disablitityCheck || isDisabled ? 0.4 : 1}\n          {...(Platform.OS === 'web'\n            ? {\n                disabled: disablitityCheck || isDisabled,\n                cursor: disablitityCheck || isDisabled ? 'not-allowed' : 'auto',\n              }\n            : {})}\n        >\n          {children || isIncrement ? (\n            <ChevronUpIcon color={iconColor} />\n          ) : (\n            <ChevronDownIcon color={iconColor} />\n          )}\n        </Box>\n      </TouchableOpacity>\n    );\n  }\n);\n\nconst NumberInputStepper = (\n  { children, ...props }: INumberInputSteppersProps,\n  ref?: any\n) => {\n  const {\n    numberInputStepper,\n    setNumberInputStepper,\n  }: INumberInputContext = React.useContext(NumberInputContext);\n\n  React.useEffect(() => {\n    !numberInputStepper &&\n      setNumberInputStepper(\n        <VStack {...props} ref={ref}>\n          {children}\n        </VStack>\n      );\n  }, [numberInputStepper, setNumberInputStepper, props, children, ref]);\n  return null;\n};\n\nexport default React.memo(React.forwardRef(NumberInputStepper));\n"]},"metadata":{},"sourceType":"module"}