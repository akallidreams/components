{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useRef as $eCAIO$useRef, useEffect as $eCAIO$useEffect, useMemo as $eCAIO$useMemo } from \"react\";\nimport { getFocusableTreeWalker as $eCAIO$getFocusableTreeWalker, focusSafely as $eCAIO$focusSafely } from \"@react-aria/focus\";\nimport { focusWithoutScrolling as $eCAIO$focusWithoutScrolling, useEvent as $eCAIO$useEvent, scrollIntoView as $eCAIO$scrollIntoView, mergeProps as $eCAIO$mergeProps, isAppleDevice as $eCAIO$isAppleDevice, isMac as $eCAIO$isMac } from \"@react-aria/utils\";\nimport { useLocale as $eCAIO$useLocale, useCollator as $eCAIO$useCollator } from \"@react-aria/i18n\";\nimport { usePress as $eCAIO$usePress, useLongPress as $eCAIO$useLongPress } from \"@react-aria/interactions\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $ae20dd8cbca75726$exports = {};\n$parcel$export($ae20dd8cbca75726$exports, \"useSelectableCollection\", function () {\n  return $ae20dd8cbca75726$export$d6daf82dcd84e87c;\n});\n\nfunction $feb5ffebff200149$export$d3e3bd3e26688c04(e) {\n  return $eCAIO$isAppleDevice() ? e.altKey : e.ctrlKey;\n}\n\nfunction $feb5ffebff200149$export$16792effe837dba3(e) {\n  if ($eCAIO$isMac()) return e.metaKey;\n  return e.ctrlKey;\n}\n\nvar $fb3050f43d946246$exports = {};\n$parcel$export($fb3050f43d946246$exports, \"useTypeSelect\", function () {\n  return $fb3050f43d946246$export$e32c88dfddc6e1d8;\n});\n\nfunction $fb3050f43d946246$export$e32c88dfddc6e1d8(options) {\n  var keyboardDelegate = options.keyboardDelegate,\n      selectionManager = options.selectionManager,\n      onTypeSelect = options.onTypeSelect;\n  var state = $eCAIO$useRef({\n    search: '',\n    timeout: null\n  }).current;\n\n  var onKeyDown = function onKeyDown(e) {\n    var character = $fb3050f43d946246$var$getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) return;\n\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!('continuePropagation' in e)) e.stopPropagation();\n    }\n\n    state.search += character;\n    var key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n    if (key == null) key = keyboardDelegate.getKeyForSearch(state.search);\n\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) onTypeSelect(key);\n    }\n\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(function () {\n      state.search = '';\n    }, 500);\n  };\n\n  return {\n    typeSelectProps: {\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\n\nfunction $fb3050f43d946246$var$getStringForKey(key) {\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) return key;\n  return '';\n}\n\nfunction $ae20dd8cbca75726$export$d6daf82dcd84e87c(options) {\n  var manager = options.selectionManager,\n      delegate = options.keyboardDelegate,\n      ref = options.ref,\n      _options$autoFocus = options.autoFocus,\n      autoFocus = _options$autoFocus === void 0 ? false : _options$autoFocus,\n      _options$shouldFocusW = options.shouldFocusWrap,\n      shouldFocusWrap = _options$shouldFocusW === void 0 ? false : _options$shouldFocusW,\n      _options$disallowEmpt = options.disallowEmptySelection,\n      disallowEmptySelection = _options$disallowEmpt === void 0 ? false : _options$disallowEmpt,\n      _options$disallowSele = options.disallowSelectAll,\n      disallowSelectAll = _options$disallowSele === void 0 ? false : _options$disallowSele,\n      _options$selectOnFocu = options.selectOnFocus,\n      selectOnFocus = _options$selectOnFocu === void 0 ? manager.selectionBehavior === 'replace' : _options$selectOnFocu,\n      _options$disallowType = options.disallowTypeAhead,\n      disallowTypeAhead = _options$disallowType === void 0 ? false : _options$disallowType,\n      shouldUseVirtualFocus = options.shouldUseVirtualFocus,\n      _options$allowsTabNav = options.allowsTabNavigation,\n      allowsTabNavigation = _options$allowsTabNav === void 0 ? false : _options$allowsTabNav,\n      isVirtualized = options.isVirtualized,\n      _options$scrollRef = options.scrollRef,\n      scrollRef = _options$scrollRef === void 0 ? ref : _options$scrollRef;\n\n  var _$eCAIO$useLocale = $eCAIO$useLocale(),\n      direction = _$eCAIO$useLocale.direction;\n\n  var onKeyDown = function onKeyDown(e) {\n    if (e.altKey && e.key === 'Tab') e.preventDefault();\n    if (!ref.current.contains(e.target)) return;\n\n    var navigateToKey = function navigateToKey(key, childFocus) {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n        if (e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(key);else if (selectOnFocus && !$feb5ffebff200149$export$d3e3bd3e26688c04(e)) manager.replaceSelection(key);\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowDown':\n        if (delegate.getKeyBelow) {\n          var ref4, ref1;\n          e.preventDefault();\n          var nextKey = manager.focusedKey != null ? delegate.getKeyBelow(manager.focusedKey) : (ref4 = delegate.getFirstKey) === null || ref4 === void 0 ? void 0 : ref4.call(delegate);\n          if (nextKey == null && shouldFocusWrap) nextKey = (ref1 = delegate.getFirstKey) === null || ref1 === void 0 ? void 0 : ref1.call(delegate, manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n\n        break;\n\n      case 'ArrowUp':\n        if (delegate.getKeyAbove) {\n          var ref2, ref3;\n          e.preventDefault();\n\n          var _nextKey = manager.focusedKey != null ? delegate.getKeyAbove(manager.focusedKey) : (ref2 = delegate.getLastKey) === null || ref2 === void 0 ? void 0 : ref2.call(delegate);\n\n          if (_nextKey == null && shouldFocusWrap) _nextKey = (ref3 = delegate.getLastKey) === null || ref3 === void 0 ? void 0 : ref3.call(delegate, manager.focusedKey);\n          navigateToKey(_nextKey);\n        }\n\n        break;\n\n      case 'ArrowLeft':\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n\n          var _nextKey2 = delegate.getKeyLeftOf(manager.focusedKey);\n\n          navigateToKey(_nextKey2, direction === 'rtl' ? 'first' : 'last');\n        }\n\n        break;\n\n      case 'ArrowRight':\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n\n          var _nextKey3 = delegate.getKeyRightOf(manager.focusedKey);\n\n          navigateToKey(_nextKey3, direction === 'rtl' ? 'last' : 'first');\n        }\n\n        break;\n\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          var firstKey = delegate.getFirstKey(manager.focusedKey, $feb5ffebff200149$export$16792effe837dba3(e));\n          manager.setFocusedKey(firstKey);\n          if ($feb5ffebff200149$export$16792effe837dba3(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(firstKey);else if (selectOnFocus) manager.replaceSelection(firstKey);\n        }\n\n        break;\n\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          var lastKey = delegate.getLastKey(manager.focusedKey, $feb5ffebff200149$export$16792effe837dba3(e));\n          manager.setFocusedKey(lastKey);\n          if ($feb5ffebff200149$export$16792effe837dba3(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(lastKey);else if (selectOnFocus) manager.replaceSelection(lastKey);\n        }\n\n        break;\n\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n\n          var _nextKey4 = delegate.getKeyPageBelow(manager.focusedKey);\n\n          navigateToKey(_nextKey4);\n        }\n\n        break;\n\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n\n          var _nextKey5 = delegate.getKeyPageAbove(manager.focusedKey);\n\n          navigateToKey(_nextKey5);\n        }\n\n        break;\n\n      case 'a':\n        if ($feb5ffebff200149$export$16792effe837dba3(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n\n        break;\n\n      case 'Escape':\n        e.preventDefault();\n        if (!disallowEmptySelection) manager.clearSelection();\n        break;\n\n      case 'Tab':\n        if (!allowsTabNavigation) {\n          if (e.shiftKey) ref.current.focus();else {\n            var walker = $eCAIO$getFocusableTreeWalker(ref.current, {\n              tabbable: true\n            });\n            var next;\n            var last;\n\n            do {\n              last = walker.lastChild();\n              if (last) next = last;\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) $eCAIO$focusWithoutScrolling(next);\n          }\n          break;\n        }\n\n    }\n  };\n\n  var scrollPos = $eCAIO$useRef({\n    top: 0,\n    left: 0\n  });\n  $eCAIO$useEvent(scrollRef, 'scroll', isVirtualized ? null : function () {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n\n  var onFocus = function onFocus(e) {\n    if (manager.isFocused) {\n      if (!e.currentTarget.contains(e.target)) manager.setFocused(false);\n      return;\n    }\n\n    if (!e.currentTarget.contains(e.target)) return;\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      var navigateToFirstKey = function navigateToFirstKey(key) {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) manager.replaceSelection(key);\n        }\n      };\n\n      var relatedTarget = e.relatedTarget;\n\n      var _lastSelectedKey, _firstSelectedKey;\n\n      if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) navigateToFirstKey((_lastSelectedKey = manager.lastSelectedKey) !== null && _lastSelectedKey !== void 0 ? _lastSelectedKey : delegate.getLastKey());else navigateToFirstKey((_firstSelectedKey = manager.firstSelectedKey) !== null && _firstSelectedKey !== void 0 ? _firstSelectedKey : delegate.getFirstKey());\n    } else if (!isVirtualized) {\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n      var element = scrollRef.current.querySelector(\"[data-key=\\\"\" + manager.focusedKey + \"\\\"]\");\n\n      if (element) {\n        $eCAIO$focusWithoutScrolling(element);\n        $eCAIO$scrollIntoView(scrollRef.current, element);\n      }\n    }\n  };\n\n  var onBlur = function onBlur(e) {\n    if (!e.currentTarget.contains(e.relatedTarget)) manager.setFocused(false);\n  };\n\n  var autoFocusRef = $eCAIO$useRef(autoFocus);\n  $eCAIO$useEffect(function () {\n    if (autoFocusRef.current) {\n      var focusedKey = null;\n      if (autoFocus === 'first') focusedKey = delegate.getFirstKey();\n      if (autoFocus === 'last') focusedKey = delegate.getLastKey();\n      var selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) focusedKey = selectedKeys.values().next().value;\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n      if (focusedKey == null && !shouldUseVirtualFocus) $eCAIO$focusSafely(ref.current);\n    }\n\n    autoFocusRef.current = false;\n  }, []);\n  $eCAIO$useEffect(function () {\n    if (!isVirtualized && manager.focusedKey && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)) {\n      var element = scrollRef.current.querySelector(\"[data-key=\\\"\" + manager.focusedKey + \"\\\"]\");\n      if (element) $eCAIO$scrollIntoView(scrollRef.current, element);\n    }\n  }, [isVirtualized, scrollRef, manager.focusedKey]);\n  var handlers = {\n    onKeyDown: onKeyDown,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onMouseDown: function onMouseDown(e) {\n      if (e.currentTarget.contains(e.target)) e.preventDefault();\n    }\n  };\n\n  var _$fb3050f43d946246$ex = $fb3050f43d946246$export$e32c88dfddc6e1d8({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  }),\n      typeSelectProps = _$fb3050f43d946246$ex.typeSelectProps;\n\n  if (!disallowTypeAhead) handlers = $eCAIO$mergeProps(typeSelectProps, handlers);\n  var tabIndex;\n  if (!shouldUseVirtualFocus) tabIndex = manager.focusedKey == null ? 0 : -1;\n  return {\n    collectionProps: _objectSpread(_objectSpread({}, handlers), {}, {\n      tabIndex: tabIndex\n    })\n  };\n}\n\nvar $880e95eb8b93ba9a$exports = {};\n$parcel$export($880e95eb8b93ba9a$exports, \"useSelectableItem\", function () {\n  return $880e95eb8b93ba9a$export$ecf600387e221c37;\n});\n\nfunction $880e95eb8b93ba9a$export$ecf600387e221c37(options) {\n  var manager = options.selectionManager,\n      key = options.key,\n      ref = options.ref,\n      shouldSelectOnPressUp = options.shouldSelectOnPressUp,\n      isVirtualized = options.isVirtualized,\n      shouldUseVirtualFocus = options.shouldUseVirtualFocus,\n      focus = options.focus,\n      isDisabled = options.isDisabled,\n      onAction = options.onAction,\n      allowsDifferentPressOrigin = options.allowsDifferentPressOrigin;\n\n  var onSelect = function onSelect(e) {\n    if (e.pointerType === 'keyboard' && $feb5ffebff200149$export$d3e3bd3e26688c04(e)) manager.toggleSelection(key);else {\n      if (manager.selectionMode === 'none') return;\n\n      if (manager.selectionMode === 'single') {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) manager.toggleSelection(key);else manager.replaceSelection(key);\n      } else if (e && e.shiftKey) manager.extendSelection(key);else if (manager.selectionBehavior === 'toggle' || e && ($feb5ffebff200149$export$16792effe837dba3(e) || e.pointerType === 'touch' || e.pointerType === 'virtual')) manager.toggleSelection(key);else manager.replaceSelection(key);\n    }\n  };\n\n  $eCAIO$useEffect(function () {\n    var isFocused = key === manager.focusedKey;\n\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {\n      if (focus) focus();else $eCAIO$focusSafely(ref.current);\n    }\n  }, [ref, key, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n  var itemProps = {};\n  if (!shouldUseVirtualFocus) itemProps = {\n    tabIndex: key === manager.focusedKey ? 0 : -1,\n    onFocus: function onFocus(e) {\n      if (e.target === ref.current) manager.setFocusedKey(key);\n    }\n  };\n  isDisabled = isDisabled || manager.isDisabled(key);\n  var allowsSelection = !isDisabled && manager.canSelectItem(key);\n  var allowsActions = onAction && !isDisabled;\n  var hasPrimaryAction = allowsActions && (manager.selectionBehavior === 'replace' ? !allowsSelection : manager.isEmpty);\n  var hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === 'replace';\n  var hasAction = hasPrimaryAction || hasSecondaryAction;\n  var modality = $eCAIO$useRef(null);\n  var longPressEnabled = hasAction && allowsSelection;\n  var longPressEnabledOnPressStart = $eCAIO$useRef(false);\n  var hadPrimaryActionOnPressStart = $eCAIO$useRef(false);\n  var itemPressProps = {};\n\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = function (e) {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      if (e.pointerType === 'keyboard' && (!hasAction || $880e95eb8b93ba9a$var$isSelectionKey())) onSelect(e);\n    };\n\n    if (!allowsDifferentPressOrigin) itemPressProps.onPress = function (e) {\n      if (hasPrimaryAction || hasSecondaryAction && e.pointerType !== 'mouse') {\n        if (e.pointerType === 'keyboard' && !$880e95eb8b93ba9a$var$isActionKey()) return;\n        onAction();\n      } else if (e.pointerType !== 'keyboard') onSelect(e);\n    };else {\n      itemPressProps.onPressUp = function (e) {\n        if (e.pointerType !== 'keyboard') onSelect(e);\n      };\n\n      itemPressProps.onPress = hasPrimaryAction ? function () {\n        return onAction();\n      } : null;\n    }\n  } else {\n    itemPressProps.onPressStart = function (e) {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      hadPrimaryActionOnPressStart.current = hasPrimaryAction;\n      if (e.pointerType === 'mouse' && !hasPrimaryAction || e.pointerType === 'keyboard' && (!onAction || $880e95eb8b93ba9a$var$isSelectionKey())) onSelect(e);\n    };\n\n    itemPressProps.onPress = function (e) {\n      if (e.pointerType === 'touch' || e.pointerType === 'pen' || e.pointerType === 'virtual' || e.pointerType === 'keyboard' && hasAction && $880e95eb8b93ba9a$var$isActionKey() || e.pointerType === 'mouse' && hadPrimaryActionOnPressStart.current) {\n        if (hasAction) onAction();else onSelect(e);\n      }\n    };\n  }\n\n  if (!isVirtualized) itemProps['data-key'] = key;\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n\n  var _$eCAIO$usePress = $eCAIO$usePress(itemPressProps),\n      pressProps = _$eCAIO$usePress.pressProps,\n      isPressed = _$eCAIO$usePress.isPressed;\n\n  var onDoubleClick = hasSecondaryAction ? function (e) {\n    if (modality.current === 'mouse') {\n      e.stopPropagation();\n      e.preventDefault();\n      onAction();\n    }\n  } : undefined;\n\n  var _$eCAIO$useLongPress = $eCAIO$useLongPress({\n    isDisabled: !longPressEnabled,\n    onLongPress: function onLongPress(e) {\n      if (e.pointerType === 'touch') {\n        onSelect(e);\n        manager.setSelectionBehavior('toggle');\n      }\n    }\n  }),\n      longPressProps = _$eCAIO$useLongPress.longPressProps;\n\n  var onDragStart = function onDragStart(e) {\n    if (modality.current === 'touch' && longPressEnabledOnPressStart.current) e.preventDefault();\n  };\n\n  return {\n    itemProps: $eCAIO$mergeProps(itemProps, allowsSelection || hasPrimaryAction ? pressProps : {}, longPressEnabled ? longPressProps : {}, {\n      onDoubleClick: onDoubleClick,\n      onDragStart: onDragStart\n    }),\n    isPressed: isPressed,\n    isSelected: manager.isSelected(key),\n    isDisabled: isDisabled,\n    allowsSelection: allowsSelection,\n    hasAction: hasAction\n  };\n}\n\nfunction $880e95eb8b93ba9a$var$isActionKey() {\n  var event = window.event;\n  return (event === null || event === void 0 ? void 0 : event.key) === 'Enter';\n}\n\nfunction $880e95eb8b93ba9a$var$isSelectionKey() {\n  var event = window.event;\n  return (event === null || event === void 0 ? void 0 : event.key) === ' ' || (event === null || event === void 0 ? void 0 : event.code) === 'Space';\n}\n\nvar $982254629710d113$exports = {};\n$parcel$export($982254629710d113$exports, \"useSelectableList\", function () {\n  return $982254629710d113$export$b95089534ab7c1fd;\n});\nvar $2a25aae57d74318e$exports = {};\n$parcel$export($2a25aae57d74318e$exports, \"ListKeyboardDelegate\", function () {\n  return $2a25aae57d74318e$export$a05409b8bb224a5a;\n});\n\nvar $2a25aae57d74318e$export$a05409b8bb224a5a = function () {\n  function $2a25aae57d74318e$export$a05409b8bb224a5a(collection, disabledKeys, ref, collator) {\n    _classCallCheck(this, $2a25aae57d74318e$export$a05409b8bb224a5a);\n\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n\n  _createClass($2a25aae57d74318e$export$a05409b8bb224a5a, [{\n    key: \"getKeyBelow\",\n    value: function getKeyBelow(key) {\n      key = this.collection.getKeyAfter(key);\n\n      while (key != null) {\n        var item = this.collection.getItem(key);\n        if (item.type === 'item' && !this.disabledKeys.has(key)) return key;\n        key = this.collection.getKeyAfter(key);\n      }\n    }\n  }, {\n    key: \"getKeyAbove\",\n    value: function getKeyAbove(key) {\n      key = this.collection.getKeyBefore(key);\n\n      while (key != null) {\n        var item = this.collection.getItem(key);\n        if (item.type === 'item' && !this.disabledKeys.has(key)) return key;\n        key = this.collection.getKeyBefore(key);\n      }\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      var key = this.collection.getFirstKey();\n\n      while (key != null) {\n        var item = this.collection.getItem(key);\n        if (item.type === 'item' && !this.disabledKeys.has(key)) return key;\n        key = this.collection.getKeyAfter(key);\n      }\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      var key = this.collection.getLastKey();\n\n      while (key != null) {\n        var item = this.collection.getItem(key);\n        if (item.type === 'item' && !this.disabledKeys.has(key)) return key;\n        key = this.collection.getKeyBefore(key);\n      }\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.ref.current.querySelector(\"[data-key=\\\"\" + key + \"\\\"]\");\n    }\n  }, {\n    key: \"getKeyPageAbove\",\n    value: function getKeyPageAbove(key) {\n      var menu = this.ref.current;\n      var item = this.getItem(key);\n      if (!item) return null;\n      var pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n\n      while (item && item.offsetTop > pageY) {\n        key = this.getKeyAbove(key);\n        item = this.getItem(key);\n      }\n\n      return key;\n    }\n  }, {\n    key: \"getKeyPageBelow\",\n    value: function getKeyPageBelow(key) {\n      var menu = this.ref.current;\n      var item = this.getItem(key);\n      if (!item) return null;\n      var pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n\n      while (item && item.offsetTop < pageY) {\n        key = this.getKeyBelow(key);\n        item = this.getItem(key);\n      }\n\n      return key;\n    }\n  }, {\n    key: \"getKeyForSearch\",\n    value: function getKeyForSearch(search, fromKey) {\n      if (!this.collator) return null;\n      var collection = this.collection;\n      var key = fromKey || this.getFirstKey();\n\n      while (key != null) {\n        var item = collection.getItem(key);\n        var substring = item.textValue.slice(0, search.length);\n        if (item.textValue && this.collator.compare(substring, search) === 0) return key;\n        key = this.getKeyBelow(key);\n      }\n\n      return null;\n    }\n  }]);\n\n  return $2a25aae57d74318e$export$a05409b8bb224a5a;\n}();\n\nfunction $982254629710d113$export$b95089534ab7c1fd(props) {\n  var selectionManager = props.selectionManager,\n      collection = props.collection,\n      disabledKeys = props.disabledKeys,\n      ref = props.ref,\n      keyboardDelegate = props.keyboardDelegate,\n      autoFocus = props.autoFocus,\n      shouldFocusWrap = props.shouldFocusWrap,\n      isVirtualized = props.isVirtualized,\n      disallowEmptySelection = props.disallowEmptySelection,\n      _props$selectOnFocus = props.selectOnFocus,\n      selectOnFocus = _props$selectOnFocus === void 0 ? false : _props$selectOnFocus,\n      disallowTypeAhead = props.disallowTypeAhead,\n      shouldUseVirtualFocus = props.shouldUseVirtualFocus,\n      allowsTabNavigation = props.allowsTabNavigation;\n  var collator = $eCAIO$useCollator({\n    usage: 'search',\n    sensitivity: 'base'\n  });\n  var delegate = $eCAIO$useMemo(function () {\n    return keyboardDelegate || new $2a25aae57d74318e$export$a05409b8bb224a5a(collection, disabledKeys, ref, collator);\n  }, [keyboardDelegate, collection, disabledKeys, ref, collator]);\n\n  var _$ae20dd8cbca75726$ex = $ae20dd8cbca75726$export$d6daf82dcd84e87c({\n    ref: ref,\n    selectionManager: selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus: autoFocus,\n    shouldFocusWrap: shouldFocusWrap,\n    disallowEmptySelection: disallowEmptySelection,\n    selectOnFocus: selectOnFocus,\n    disallowTypeAhead: disallowTypeAhead,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    allowsTabNavigation: allowsTabNavigation,\n    isVirtualized: isVirtualized,\n    scrollRef: ref\n  }),\n      collectionProps = _$ae20dd8cbca75726$ex.collectionProps;\n\n  return {\n    listProps: collectionProps\n  };\n}\n\nexport { $ae20dd8cbca75726$export$d6daf82dcd84e87c as useSelectableCollection, $880e95eb8b93ba9a$export$ecf600387e221c37 as useSelectableItem, $982254629710d113$export$b95089534ab7c1fd as useSelectableList, $2a25aae57d74318e$export$a05409b8bb224a5a as ListKeyboardDelegate, $fb3050f43d946246$export$e32c88dfddc6e1d8 as useTypeSelect };","map":{"version":3,"sources":["packages/@react-aria/selection/src/useSelectableCollection.ts","packages/@react-aria/selection/src/utils.ts","packages/@react-aria/selection/src/useTypeSelect.ts","packages/@react-aria/selection/src/useSelectableItem.ts","packages/@react-aria/selection/src/useSelectableList.ts","packages/@react-aria/selection/src/ListKeyboardDelegate.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent, HTMLAttributes, Key, KeyboardEvent, RefObject, useEffect, useRef} from 'react';\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {FocusStrategy, KeyboardDelegate} from '@react-types/shared';\nimport {focusWithoutScrolling, mergeProps, scrollIntoView, useEvent} from '@react-aria/utils';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useLocale} from '@react-aria/i18n';\nimport {useTypeSelect} from './useTypeSelect';\n\ninterface SelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean,\n  /**\n   * Whether the collection items are contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * The ref attached to the scrollable body. Used to provide automatic scrolling on item focus for non-virtualized collections.\n   * If not provided, defaults to the collection ref.\n   */\n  scrollRef?: RefObject<HTMLElement>\n}\n\ninterface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(options: SelectableCollectionOptions): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = manager.selectionBehavior === 'replace',\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref\n  } = options;\n  let {direction} = useLocale();\n\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') {\n      e.preventDefault();\n    }\n\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (!ref.current.contains(e.target as HTMLElement)) {\n      return;\n    }\n\n    const navigateToKey = (key: Key | undefined, childFocus?: FocusStrategy) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === 'multiple') {\n          manager.extendSelection(key);\n        } else if (selectOnFocus && !isNonContiguousSelectionModifier(e)) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowDown': {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowUp': {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowLeft': {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n        }\n        break;\n      }\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(firstKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(lastKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'a':\n        if (isCtrlKeyPressed(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab': {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n            let next: HTMLElement;\n            let last: HTMLElement;\n            do {\n              last = walker.lastChild() as HTMLElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              focusWithoutScrolling(next);\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  // Store the scroll position so we can restore it later.\n  let scrollPos = useRef({top: 0, left: 0});\n  useEvent(scrollRef, 'scroll', isVirtualized ? null : () => {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      let navigateToFirstKey = (key: Key | undefined) => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) {\n            manager.replaceSelection(key);\n          }\n        }\n      };\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      if (relatedTarget && (e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)) {\n        navigateToFirstKey(manager.lastSelectedKey ?? delegate.getLastKey());\n      } else {\n        navigateToFirstKey(manager.firstSelectedKey ?? delegate.getFirstKey());\n      }\n    } else if (!isVirtualized) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n\n      // Refocus and scroll the focused item into view if it exists within the scrollable region.\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        // This prevents a flash of focus on the first/last element in the collection\n        focusWithoutScrolling(element);\n        scrollIntoView(scrollRef.current, element);\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  const autoFocusRef = useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') {\n        focusedKey = delegate.getFirstKey();\n      } if (autoFocus === 'last') {\n        focusedKey = delegate.getLastKey();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus) {\n        focusSafely(ref.current);\n      }\n    }\n    autoFocusRef.current = false;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    if (!isVirtualized && manager.focusedKey && scrollRef?.current) {\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        scrollIntoView(scrollRef.current, element);\n      }\n    }\n  }, [isVirtualized, scrollRef, manager.focusedKey]);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (e.currentTarget.contains(e.target)) {\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n      }\n    }\n  };\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isAppleDevice} from '@react-aria/utils';\nimport {isMac} from '@react-aria/utils';\n\ninterface Event {\n  altKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean\n}\n\nexport function isNonContiguousSelectionModifier(e: Event) {\n  // Ctrl + Arrow Up/Arrow Down has a system wide meaning on macOS, so use Alt instead.\n  // On Windows and Ubuntu, Alt + Space has a system wide meaning.\n  return isAppleDevice() ? e.altKey : e.ctrlKey;\n}\n\nexport function isCtrlKeyPressed(e: Event) {\n  if (isMac()) {\n    return e.metaKey;\n  }\n\n  return e.ctrlKey;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, Key, KeyboardEvent, useRef} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {MultipleSelectionManager} from '@react-stately/selection';\n\ninterface TypeSelectOptions {\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * Called when an item is focused by typing.\n   */\n  onTypeSelect?: (key: Key) => void\n}\n\ninterface TypeSelectAria {\n  /**\n   * Props to be spread on the owner of the options.\n   */\n  typeSelectProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles typeahead interactions with collections.\n */\nexport function useTypeSelect(options: TypeSelectOptions): TypeSelectAria {\n  let {keyboardDelegate, selectionManager, onTypeSelect} = options;\n  let state = useRef({\n    search: '',\n    timeout: null\n  }).current;\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    let character = getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) {\n      return;\n    }\n\n    // Do not propagate the Spacebar event if it's meant to be part of the search.\n    // When we time out, the search term becomes empty, hence the check on length.\n    // Trimming is to account for the case of pressing the Spacebar more than once,\n    // which should cycle through the selection/deselection of the focused item.\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!('continuePropagation' in e)) {\n        e.stopPropagation();\n      }\n    }\n\n    state.search += character;\n\n    // Use the delegate to find a key to focus.\n    // Prioritize items after the currently focused item, falling back to searching the whole list.\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n\n    // If no key found, search from the top.\n    if (key == null) {\n      key = keyboardDelegate.getKeyForSearch(state.search);\n    }\n\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) {\n        onTypeSelect(key);\n      }\n    }\n\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = '';\n    }, 500);\n  };\n\n  return {\n    typeSelectProps: {\n      // Using a capturing listener to catch the keydown event before\n      // other hooks in order to handle the Spacebar event.\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\n\nfunction getStringForKey(key: string) {\n  // If the key is of length 1, it is an ASCII value.\n  // Otherwise, if there are no ASCII characters in the key name,\n  // it is a Unicode character.\n  // See https://www.w3.org/TR/uievents-key/\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) {\n    return key;\n  }\n\n  return '';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {focusSafely} from '@react-aria/focus';\nimport {HTMLAttributes, Key, RefObject, useEffect, useRef} from 'react';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {LongPressEvent, PressEvent} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {PressProps, useLongPress, usePress} from '@react-aria/interactions';\n\nexport interface SelectableItemOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A unique key for the item.\n   */\n  key: Key,\n  /**\n   * Ref to the item.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * By default, selection occurs on pointer down. This can be strange if selecting an\n   * item causes the UI to disappear immediately (e.g. menus).\n   */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Whether selection requires the pointer/mouse down and up events to occur on the same target or triggers selection on\n   * the target of the pointer/mouse up event.\n   */\n  allowsDifferentPressOrigin?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Function to focus the item.\n   */\n  focus?: () => void,\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /** Whether the item is disabled. */\n  isDisabled?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the item. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: () => void\n}\n\nexport interface SelectableItemStates {\n  /** Whether the item is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the item is currently selected. */\n  isSelected: boolean,\n  /**\n   * Whether the item is non-interactive, i.e. both selection and actions are disabled and the item may\n   * not be focused. Dependent on `disabledKeys` and `disabledBehavior`.\n   */\n  isDisabled: boolean,\n  /**\n   * Whether the item may be selected, dependent on `selectionMode`, `disabledKeys`, and `disabledBehavior`.\n   */\n  allowsSelection: boolean,\n  /**\n   * Whether the item has an action, dependent on `onAction`, `disabledKeys`,\n   * and `disabledBehavior. It may also change depending on the current selection state\n   * of the list (e.g. when selection is primary). This can be used to enable or disable hover\n   * styles or other visual indications of interactivity.\n   */\n  hasAction: boolean\n}\n\nexport interface SelectableItemAria extends SelectableItemStates {\n  /**\n   * Props to be spread on the item root node.\n   */\n  itemProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles interactions with an item in a selectable collection.\n */\nexport function useSelectableItem(options: SelectableItemOptions): SelectableItemAria {\n  let {\n    selectionManager: manager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    focus,\n    isDisabled,\n    onAction,\n    allowsDifferentPressOrigin\n  } = options;\n\n  let onSelect = (e: PressEvent | LongPressEvent | PointerEvent) => {\n    if (e.pointerType === 'keyboard' && isNonContiguousSelectionModifier(e)) {\n      manager.toggleSelection(key);\n    } else {\n      if (manager.selectionMode === 'none') {\n        return;\n      }\n\n      if (manager.selectionMode === 'single') {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) {\n          manager.toggleSelection(key);\n        } else {\n          manager.replaceSelection(key);\n        }\n      } else if (e && e.shiftKey) {\n        manager.extendSelection(key);\n      } else if (manager.selectionBehavior === 'toggle' || (e && (isCtrlKeyPressed(e) || e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n        // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        manager.toggleSelection(key);\n      } else {\n        manager.replaceSelection(key);\n      }\n    }\n  };\n\n  // Focus the associated DOM node when this item becomes the focusedKey\n  useEffect(() => {\n    let isFocused = key === manager.focusedKey;\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {\n      if (focus) {\n        focus();\n      } else {\n        focusSafely(ref.current);\n      }\n    }\n  }, [ref, key, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n\n  // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n  // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n  let itemProps: SelectableItemAria['itemProps'] = {};\n  if (!shouldUseVirtualFocus) {\n    itemProps = {\n      tabIndex: key === manager.focusedKey ? 0 : -1,\n      onFocus(e) {\n        if (e.target === ref.current) {\n          manager.setFocusedKey(key);\n        }\n      }\n    };\n  }\n\n\n  // With checkbox selection, onAction (i.e. navigation) becomes primary, and occurs on a single click of the row.\n  // Clicking the checkbox enters selection mode, after which clicking anywhere on any row toggles selection for that row.\n  // With highlight selection, onAction is secondary, and occurs on double click. Single click selects the row.\n  // With touch, onAction occurs on single tap, and long press enters selection mode.\n  isDisabled = isDisabled || manager.isDisabled(key);\n  let allowsSelection = !isDisabled && manager.canSelectItem(key);\n  let allowsActions = onAction && !isDisabled;\n  let hasPrimaryAction = allowsActions && (\n    manager.selectionBehavior === 'replace'\n      ? !allowsSelection\n      : manager.isEmpty\n  );\n  let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === 'replace';\n  let hasAction = hasPrimaryAction || hasSecondaryAction;\n  let modality = useRef(null);\n\n  let longPressEnabled = hasAction && allowsSelection;\n  let longPressEnabledOnPressStart = useRef(false);\n  let hadPrimaryActionOnPressStart = useRef(false);\n\n  // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n  let itemPressProps: PressProps = {};\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      if (e.pointerType === 'keyboard' && (!hasAction || isSelectionKey())) {\n        onSelect(e);\n      }\n    };\n\n    // If allowsDifferentPressOrigin, make selection happen on pressUp (e.g. open menu on press down, selection on menu item happens on press up.)\n    // Otherwise, have selection happen onPress (prevents listview row selection when clicking on interactable elements in the row)\n    if (!allowsDifferentPressOrigin) {\n      itemPressProps.onPress = (e) => {\n        if (hasPrimaryAction || (hasSecondaryAction && e.pointerType !== 'mouse')) {\n          if (e.pointerType === 'keyboard' && !isActionKey()) {\n            return;\n          }\n\n          onAction();\n        } else if (e.pointerType !== 'keyboard') {\n          onSelect(e);\n        }\n      };\n    } else {\n      itemPressProps.onPressUp = (e) => {\n        if (e.pointerType !== 'keyboard') {\n          onSelect(e);\n        }\n      };\n\n      itemPressProps.onPress = hasPrimaryAction ? () => onAction() : null;\n    }\n  } else {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      hadPrimaryActionOnPressStart.current = hasPrimaryAction;\n\n      // Select on mouse down unless there is a primary action which will occur on mouse up.\n      // For keyboard, select on key down. If there is an action, the Space key selects on key down,\n      // and the Enter key performs onAction on key up.\n      if (\n        (e.pointerType === 'mouse' && !hasPrimaryAction) ||\n        (e.pointerType === 'keyboard' && (!onAction || isSelectionKey()))\n      ) {\n        onSelect(e);\n      }\n    };\n\n    itemPressProps.onPress = (e) => {\n      // Selection occurs on touch up. Primary actions always occur on pointer up.\n      // Both primary and secondary actions occur on Enter key up. The only exception\n      // is secondary actions, which occur on double click with a mouse.\n      if (\n        e.pointerType === 'touch' ||\n        e.pointerType === 'pen' ||\n        e.pointerType === 'virtual' ||\n        (e.pointerType === 'keyboard' && hasAction && isActionKey()) ||\n        (e.pointerType === 'mouse' && hadPrimaryActionOnPressStart.current)\n      ) {\n        if (hasAction) {\n          onAction();\n        } else {\n          onSelect(e);\n        }\n      }\n    };\n  }\n\n  if (!isVirtualized) {\n    itemProps['data-key'] = key;\n  }\n\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  let {pressProps, isPressed} = usePress(itemPressProps);\n\n  // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.\n  let onDoubleClick = hasSecondaryAction ? (e) => {\n    if (modality.current === 'mouse') {\n      e.stopPropagation();\n      e.preventDefault();\n      onAction();\n    }\n  } : undefined;\n\n  // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior\n  // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to\n  // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.\n  let {longPressProps} = useLongPress({\n    isDisabled: !longPressEnabled,\n    onLongPress(e) {\n      if (e.pointerType === 'touch') {\n        onSelect(e);\n        manager.setSelectionBehavior('toggle');\n      }\n    }\n  });\n\n  // Prevent native drag and drop on long press if we also select on long press.\n  // Once the user is in selection mode, they can long press again to drag.\n  let onDragStart = e => {\n    if (modality.current === 'touch' && longPressEnabledOnPressStart.current) {\n      e.preventDefault();\n    }\n  };\n\n  return {\n    itemProps: mergeProps(\n      itemProps,\n      allowsSelection || hasPrimaryAction ? pressProps : {},\n      longPressEnabled ? longPressProps : {},\n      {onDoubleClick, onDragStart}\n    ),\n    isPressed,\n    isSelected: manager.isSelected(key),\n    isDisabled,\n    allowsSelection,\n    hasAction\n  };\n}\n\nfunction isActionKey() {\n  let event = window.event as KeyboardEvent;\n  return event?.key === 'Enter';\n}\n\nfunction isSelectionKey() {\n  let event = window.event as KeyboardEvent;\n  return event?.key === ' ' || event?.code === 'Space';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, FocusStrategy, KeyboardDelegate, Node} from '@react-types/shared';\nimport {HTMLAttributes, Key, RefObject, useMemo} from 'react';\nimport {ListKeyboardDelegate} from './ListKeyboardDelegate';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useCollator} from '@react-aria/i18n';\nimport {useSelectableCollection} from './useSelectableCollection';\n\ninterface SelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>,\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.\n   */\n  disabledKeys: Set<Key>,\n  /**\n   * A ref to the item.\n   */\n  ref?: RefObject<HTMLElement>,\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean\n}\n\ninterface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(props: SelectableListOptions): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = false,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let delegate = useMemo(() => keyboardDelegate || new ListKeyboardDelegate(collection, disabledKeys, ref, collator), [keyboardDelegate, collection, disabledKeys, ref, collator]);\n\n  let {collectionProps} = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n    isVirtualized,\n    scrollRef: ref\n  });\n\n  return {\n    listProps: collectionProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, RefObject} from 'react';\n\nexport class ListKeyboardDelegate<T> implements KeyboardDelegate {\n  private collection: Collection<Node<T>>;\n  private disabledKeys: Set<Key>;\n  private ref: RefObject<HTMLElement>;\n  private collator: Intl.Collator;\n\n  constructor(collection: Collection<Node<T>>, disabledKeys: Set<Key>, ref: RefObject<HTMLElement>, collator?: Intl.Collator) {\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n\n  getKeyBelow(key: Key) {\n    key = this.collection.getKeyAfter(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getKeyAbove(key: Key) {\n    key = this.collection.getKeyBefore(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  private getItem(key: Key): HTMLElement {\n    return this.ref.current.querySelector(`[data-key=\"${key}\"]`);\n  }\n\n  getKeyPageAbove(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n\n    while (item && item.offsetTop > pageY) {\n      key = this.getKeyAbove(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyPageBelow(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n\n    while (item && item.offsetTop < pageY) {\n      key = this.getKeyBelow(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) {\n        return key;\n      }\n\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}