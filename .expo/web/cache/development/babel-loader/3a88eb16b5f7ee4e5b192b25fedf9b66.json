{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"children\", \"isDisabled\", \"disabled\", \"isHovered\", \"isPressed\", \"isFocused\", \"isFocusVisible\"],\n    _excluded2 = [\"onPressIn\", \"onPressOut\", \"onHoverIn\", \"onHoverOut\", \"onFocus\", \"onBlur\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport RNPressable from \"react-native-web/dist/exports/Pressable\";\nimport { composeEventHandlers } from \"../../../utils\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { makeStyledComponent } from \"../../../utils/styled\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useFocusRing } from '@react-native-aria/focus';\nexport var useHover = function useHover() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isHovered = _React$useState2[0],\n      setHovered = _React$useState2[1];\n\n  return {\n    hoverProps: {\n      onHoverIn: function onHoverIn() {\n        return setHovered(true);\n      },\n      onHoverOut: function onHoverOut() {\n        return setHovered(false);\n      }\n    },\n    isHovered: isHovered\n  };\n};\nexport var useFocus = function useFocus() {\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isFocused = _React$useState4[0],\n      setFocused = _React$useState4[1];\n\n  return {\n    focusProps: {\n      onFocus: function onFocus() {\n        return setFocused(true);\n      },\n      onBlur: function onBlur() {\n        return setFocused(false);\n      }\n    },\n    isFocused: isFocused\n  };\n};\nexport var useIsPressed = function useIsPressed() {\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      isPressed = _React$useState6[0],\n      setIsPressed = _React$useState6[1];\n\n  return {\n    pressableProps: {\n      onPressIn: function onPressIn() {\n        return setIsPressed(true);\n      },\n      onPressOut: function onPressOut() {\n        return setIsPressed(false);\n      }\n    },\n    isPressed: isPressed\n  };\n};\nvar StyledPressable = makeStyledComponent(RNPressable);\n\nvar Pressable = function Pressable(_ref, ref) {\n  var children = _ref.children,\n      isDisabled = _ref.isDisabled,\n      disabled = _ref.disabled,\n      isHoveredProp = _ref.isHovered,\n      isPressedProp = _ref.isPressed,\n      isFocusedProp = _ref.isFocused,\n      isFocusVisibleProp = _ref.isFocusVisible,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useHover = useHover(),\n      hoverProps = _useHover.hoverProps,\n      isHovered = _useHover.isHovered;\n\n  var _useIsPressed = useIsPressed(),\n      pressableProps = _useIsPressed.pressableProps,\n      isPressed = _useIsPressed.isPressed;\n\n  var _useFocus = useFocus(),\n      focusProps = _useFocus.focusProps,\n      isFocused = _useFocus.isFocused;\n\n  var _useFocusRing = useFocusRing(),\n      isFocusVisible = _useFocusRing.isFocusVisible,\n      focusRingProps = _useFocusRing.focusProps;\n\n  var _usePropsResolution = usePropsResolution('Pressable', props, {\n    isPressed: isPressedProp || isPressed,\n    isFocused: isFocusedProp || isFocused,\n    isHovered: isHoveredProp || isHovered,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled: disabled || isDisabled\n  }),\n      onPressIn = _usePropsResolution.onPressIn,\n      onPressOut = _usePropsResolution.onPressOut,\n      onHoverIn = _usePropsResolution.onHoverIn,\n      onHoverOut = _usePropsResolution.onHoverOut,\n      onFocus = _usePropsResolution.onFocus,\n      onBlur = _usePropsResolution.onBlur,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(StyledPressable, _extends({\n    ref: ref,\n    onPressIn: composeEventHandlers(onPressIn, pressableProps.onPressIn),\n    onPressOut: composeEventHandlers(onPressOut, pressableProps.onPressOut),\n    onHoverIn: composeEventHandlers(onHoverIn, hoverProps.onHoverIn),\n    onHoverOut: composeEventHandlers(onHoverOut, hoverProps.onHoverOut),\n    onFocus: composeEventHandlers(composeEventHandlers(onFocus, focusProps.onFocus), focusRingProps.onFocus),\n    onBlur: composeEventHandlers(composeEventHandlers(onBlur, focusProps.onBlur), focusRingProps.onBlur),\n    disabled: disabled || isDisabled\n  }, resolvedProps), typeof children !== 'function' ? children : children({\n    isPressed: isPressed,\n    isHovered: isHovered,\n    isFocused: isFocused\n  }));\n};\n\nexport default memo(forwardRef(Pressable));","map":{"version":3,"sources":["Pressable.tsx"],"names":["useHover","React","hoverProps","onHoverIn","setHovered","onHoverOut","isHovered","useFocus","focusProps","onFocus","setFocused","onBlur","isFocused","useIsPressed","pressableProps","onPressIn","setIsPressed","onPressOut","isPressed","StyledPressable","makeStyledComponent","Pressable","isFocusVisible","props","focusRingProps","useFocusRing","resolvedProps","usePropsResolution","isPressedProp","isFocusedProp","isHoveredProp","isFocusVisibleProp","isDisabled","disabled","useHasResponsiveProps","composeEventHandlers","children","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { Pressable as RNPressable } from 'react-native';\nimport { composeEventHandlers } from '../../../utils';\nimport type { IPressableProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nexport const useHover = () => {\n  const [isHovered, setHovered] = React.useState(false);\n  return {\n    hoverProps: {\n      onHoverIn: () => setHovered(true),\n      onHoverOut: () => setHovered(false),\n    },\n    isHovered,\n  };\n};\n\nexport const useFocus = () => {\n  const [isFocused, setFocused] = React.useState(false);\n  return {\n    focusProps: {\n      onFocus: () => setFocused(true),\n      onBlur: () => setFocused(false),\n    },\n    isFocused,\n  };\n};\n\nexport const useIsPressed = () => {\n  const [isPressed, setIsPressed] = React.useState(false);\n  return {\n    pressableProps: {\n      onPressIn: () => setIsPressed(true),\n      onPressOut: () => setIsPressed(false),\n    },\n    isPressed,\n  };\n};\n\nconst StyledPressable = makeStyledComponent(RNPressable);\n\nconst Pressable = (\n  {\n    children,\n    isDisabled,\n    disabled,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IPressableProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('Pressable', props, {\n    isPressed: isPressedProp || isPressed,\n    isFocused: isFocusedProp || isFocused,\n    isHovered: isHoveredProp || isHovered,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled: disabled || isDisabled,\n  });\n\n  // TODO: Replace Render props with Context Hook\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  // TODO: Replace Render props with Context Hook\n  return (\n    <StyledPressable\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      disabled={disabled || isDisabled}\n      {...resolvedProps}\n    >\n      {typeof children !== 'function'\n        ? children\n        : children({\n            isPressed,\n            isHovered,\n            isFocused,\n          })}\n    </StyledPressable>\n  );\n};\n\nexport default memo(forwardRef(Pressable));\n"]},"metadata":{},"sourceType":"module"}