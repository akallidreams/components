{"ast":null,"code":"import _extends2 from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"children\", \"separator\", \"_text\", \"maxItems\", \"_button\", \"isCollapsed\", \"onCollapseChange\"],\n    _excluded2 = [\"spacing\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { HStack } from \"../../primitives/Stack\";\nimport { useControllableState } from \"../../../hooks\";\nimport { Pressable } from \"../../primitives/Pressable\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps/usePropsResolution\";\nimport Text from \"../../primitives/Text\";\nimport { ThreeDotsIcon } from \"../../primitives/Icon/Icons\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar Breadcrumb = function Breadcrumb(_ref, ref) {\n  var style = _ref.style,\n      children = _ref.children,\n      separator = _ref.separator,\n      _text = _ref._text,\n      maxItems = _ref.maxItems,\n      _button = _ref._button,\n      isCollapsed = _ref.isCollapsed,\n      onCollapseChange = _ref.onCollapseChange,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var textProps = _objectSpread({}, _text);\n\n  var _useControllableState = useControllableState({\n    value: isCollapsed,\n    defaultValue: false,\n    onChange: function onChange(value) {\n      onCollapseChange && onCollapseChange(value);\n    }\n  }),\n      _useControllableState2 = _slicedToArray(_useControllableState, 2),\n      collapsed = _useControllableState2[0],\n      setCollapsed = _useControllableState2[1];\n\n  var _usePropsResolution = usePropsResolution('Breadcrumb', props),\n      spacing = _usePropsResolution.spacing,\n      newProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var separatorProps = {\n    accessibilityRole: Platform.OS === 'web' ? 'presentation' : undefined\n  };\n  var separatorElement = separator ? typeof separator === 'string' ? React.createElement(Text, _extends({}, separatorProps, {\n    mx: spacing\n  }), separator) : React.cloneElement(separator, _objectSpread({\n    mx: spacing\n  }, separatorProps)) : React.createElement(Text, _extends({\n    mx: spacing\n  }, separatorProps), '/');\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(HStack, _extends({\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  }, newProps, {\n    ref: ref,\n    style: style,\n    divider: separatorElement,\n    space: spacing,\n    accessibilityRole: Platform.OS === 'web' ? 'navigation' : undefined,\n    accessibilityLabel: \"Breadcrumb\"\n  }), children && !children.length ? children : getBreadcrumbSeparator(children, textProps, maxItems, _button, collapsed, setCollapsed));\n};\n\nvar getBreadcrumbSeparator = function getBreadcrumbSeparator(children, props, maxItems, _button, collapsed, setCollapsed) {\n  if (Array.isArray(children)) {\n    if (children.length === 1) {\n      return children;\n    }\n\n    var result = [];\n\n    if (maxItems) {\n      var buttonAdded = false;\n\n      if (typeof maxItems == 'number') {\n        if (children.length > 2 * maxItems) {\n          for (var i = 0; i < children.length; i++) {\n            if (i < maxItems || i >= children.length - maxItems) {\n              result.push(children[i]);\n            } else {\n              if (!buttonAdded) {\n                result.push(React.createElement(CollapseButton, _extends({}, _button, {\n                  setCollapsed: setCollapsed\n                })));\n                buttonAdded = true;\n              }\n            }\n          }\n\n          buttonAdded = false;\n        }\n      } else if (typeof maxItems == 'object') {\n        if (children.length > maxItems[0] + maxItems[1]) for (var _i = 0; _i < children.length; _i++) {\n          if (_i < maxItems[0] || _i >= children.length - maxItems[1]) {\n            result.push(children[_i]);\n          } else {\n            if (!buttonAdded) {\n              result.push(React.createElement(CollapseButton, _extends({}, _button, {\n                setCollapsed: setCollapsed\n              })));\n              buttonAdded = true;\n            }\n          }\n        }\n        buttonAdded = false;\n      }\n    } else {\n      result = children;\n    }\n\n    if (!collapsed) {\n      result = children;\n    }\n\n    return result.map(function (child, index) {\n      return React.cloneElement(child, _objectSpread(_objectSpread({\n        _text: _objectSpread({}, props)\n      }, props), {}, {\n        key: \"breadcrumb-separator-\".concat(index)\n      }));\n    });\n  } else {\n    return children;\n  }\n};\n\nvar CollapseButton = function CollapseButton(props) {\n  var remainingProps = _extends2({}, props);\n\n  return React.createElement(Pressable, _extends({}, remainingProps, {\n    onPress: function onPress() {\n      props.setCollapsed(false);\n    }\n  }), React.createElement(ThreeDotsIcon, {\n    size: 4\n  }));\n};\n\nexport default memo(forwardRef(Breadcrumb));","map":{"version":3,"sources":["Breadcrumb.tsx"],"names":["Breadcrumb","props","textProps","_text","useControllableState","value","defaultValue","onChange","onCollapseChange","newProps","usePropsResolution","separatorProps","accessibilityRole","Platform","undefined","separatorElement","separator","spacing","mx","useHasResponsiveProps","children","getBreadcrumbSeparator","Array","result","buttonAdded","i","setCollapsed","maxItems","key","CollapseButton","remainingProps","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { AccessibilityRole, Platform } from 'react-native';\nimport { HStack } from '../../primitives/Stack';\nimport { useControllableState } from '../../../hooks';\nimport { Pressable } from '../../primitives/Pressable';\nimport type { IBreadcrumbProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps/usePropsResolution';\nimport Text from '../../primitives/Text';\nimport type { IFlexProps } from '../../primitives';\nimport { ThreeDotsIcon } from '../../primitives/Icon/Icons';\n\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst Breadcrumb = (\n  {\n    style,\n    children,\n    separator,\n    _text,\n    maxItems,\n    _button,\n    isCollapsed,\n    onCollapseChange,\n    ...props\n  }: IBreadcrumbProps & IFlexProps,\n  ref: any\n) => {\n  const textProps = { ..._text };\n\n  // Maintaining state to show all children on press of collapse button\n  const [collapsed, setCollapsed] = useControllableState({\n    value: isCollapsed,\n    defaultValue: false,\n    onChange: (value) => {\n      onCollapseChange && onCollapseChange(value);\n    },\n  });\n  const { spacing, ...newProps } = usePropsResolution('Breadcrumb', props);\n\n  const separatorProps = {\n    accessibilityRole: (Platform.OS === 'web'\n      ? 'presentation'\n      : undefined) as AccessibilityRole,\n  };\n  const separatorElement = separator ? (\n    typeof separator === 'string' ? (\n      <Text {...separatorProps} mx={spacing}>\n        {separator}\n      </Text>\n    ) : (\n      React.cloneElement(separator, {\n        mx: spacing,\n        ...separatorProps,\n      })\n    )\n  ) : (\n    <Text mx={spacing} {...separatorProps}>\n      {'/'}\n    </Text>\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <HStack\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      {...newProps}\n      ref={ref}\n      style={style}\n      // Custom Separator\n      divider={separatorElement}\n      space={spacing}\n      // @ts-ignore - Web only prop\n      accessibilityRole={Platform.OS === 'web' ? 'navigation' : undefined}\n      accessibilityLabel=\"Breadcrumb\"\n    >\n      {children && !children.length\n        ? children\n        : getBreadcrumbSeparator(\n            children,\n            textProps,\n            maxItems,\n            _button,\n            collapsed,\n            setCollapsed\n          )}\n    </HStack>\n  );\n};\n\n// Returns children to be rendered\nconst getBreadcrumbSeparator = (\n  children: JSX.Element[] | JSX.Element | any,\n  props: any,\n  maxItems: number | number[] | undefined,\n  _button: any,\n  collapsed: boolean | undefined,\n  setCollapsed: any\n) => {\n  if (Array.isArray(children)) {\n    if (children.length === 1) {\n      return children;\n    }\n    let result: any = [];\n    if (maxItems) {\n      let buttonAdded = false;\n      if (typeof maxItems == 'number') {\n        // When MaxItems is a number\n        if (children.length > 2 * maxItems) {\n          for (let i = 0; i < children.length; i++) {\n            if (i < maxItems || i >= children.length - maxItems) {\n              result.push(children[i]);\n            } else {\n              if (!buttonAdded) {\n                result.push(\n                  <CollapseButton {..._button} setCollapsed={setCollapsed} />\n                );\n                buttonAdded = true;\n              }\n            }\n          }\n          buttonAdded = false;\n        }\n      }\n      // Whem maxItems is an array\n      else if (typeof maxItems == 'object') {\n        if (children.length > maxItems[0] + maxItems[1])\n          for (let i = 0; i < children.length; i++) {\n            if (i < maxItems[0] || i >= children.length - maxItems[1]) {\n              result.push(children[i]);\n            } else {\n              if (!buttonAdded) {\n                // pushing Collapsible button as a child\n                result.push(\n                  <CollapseButton {..._button} setCollapsed={setCollapsed} />\n                );\n                buttonAdded = true;\n              }\n            }\n          }\n        buttonAdded = false;\n      }\n    } else {\n      result = children;\n    }\n    if (!collapsed) {\n      result = children;\n    }\n    return result.map((child: any, index: number) => {\n      return React.cloneElement(child, {\n        _text: { ...props },\n        ...props,\n        key: `breadcrumb-separator-${index}`,\n      });\n    });\n  } else {\n    return children;\n  }\n};\n\n// Collapse button\nconst CollapseButton = (props: any) => {\n  const { ...remainingProps } = props;\n\n  return (\n    <Pressable\n      {...remainingProps}\n      onPress={() => {\n        props.setCollapsed(false);\n      }}\n    >\n      <ThreeDotsIcon size={4} />\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Breadcrumb));\nexport type { IBreadcrumbProps };\n"]},"metadata":{},"sourceType":"module"}