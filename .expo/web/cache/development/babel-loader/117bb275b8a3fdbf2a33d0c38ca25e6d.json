{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"isDisabled\", \"onPress\", \"textValue\"],\n    _excluded2 = [\"_text\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport Text from \"../../primitives/Text\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { Pressable } from \"../../primitives/Pressable\";\nimport { MenuContext } from \"./MenuContext\";\nimport { useMenuItem } from \"./useMenu\";\nimport { mergeRefs } from \"../../../utils\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar MenuItem = function MenuItem(_ref, ref) {\n  var children = _ref.children,\n      isDisabled = _ref.isDisabled,\n      _onPress = _ref.onPress,\n      textValue = _ref.textValue,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useContext = React.useContext(MenuContext),\n      closeOnSelect = _React$useContext.closeOnSelect,\n      onClose = _React$useContext.onClose;\n\n  var menuItemRef = React.useRef(null);\n  var mergedRef = mergeRefs([menuItemRef, ref]);\n\n  var _usePropsResolution = usePropsResolution('MenuItem', props, {\n    isDisabled: isDisabled\n  }, {\n    cascadePseudoProps: true\n  }),\n      _text = _usePropsResolution._text,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      textContent = _React$useState2[0],\n      setTextContent = _React$useState2[1];\n\n  React.useEffect(function () {\n    var menuItem = menuItemRef.current;\n\n    if (menuItem) {\n      var _menuItem$textContent;\n\n      setTextContent(((_menuItem$textContent = menuItem.textContent) !== null && _menuItem$textContent !== void 0 ? _menuItem$textContent : '').trim());\n    }\n  }, [children]);\n  var menuItemProps = useMenuItem({\n    textValue: textValue !== null && textValue !== void 0 ? textValue : textContent,\n    ref: menuItemRef\n  });\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Pressable, _extends({}, menuItemProps, resolvedProps, {\n    ref: mergedRef,\n    disabled: isDisabled,\n    accessibilityState: {\n      disabled: isDisabled\n    },\n    onPress: function onPress(e) {\n      if (!isDisabled) {\n        _onPress && _onPress(e);\n\n        if (closeOnSelect) {\n          onClose && onClose();\n        }\n      }\n    }\n  }), React.createElement(React.Fragment, null, React.Children.map(children, function (child, index) {\n    if (typeof child === 'string' || typeof child === 'number') {\n      return React.createElement(Text, _extends({}, _text, {\n        key: \"menu-item-\".concat(index)\n      }), child);\n    } else {\n      return child;\n    }\n  })));\n};\n\nexport default memo(forwardRef(MenuItem));","map":{"version":3,"sources":["MenuItem.tsx"],"names":["MenuItem","props","onClose","React","menuItemRef","mergedRef","mergeRefs","resolvedProps","usePropsResolution","isDisabled","cascadePseudoProps","menuItem","setTextContent","menuItemProps","useMenuItem","textValue","ref","useHasResponsiveProps","disabled","e","onPress","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport Text from '../../primitives/Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Pressable } from '../../primitives/Pressable';\nimport type { IMenuItemProps } from './types';\nimport { MenuContext } from './MenuContext';\nimport { useMenuItem } from './useMenu';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst MenuItem = (\n  { children, isDisabled, onPress, textValue, ...props }: IMenuItemProps,\n  ref: any\n) => {\n  const { closeOnSelect, onClose } = React.useContext(MenuContext);\n  const menuItemRef = React.useRef<any>(null);\n  const mergedRef = mergeRefs([menuItemRef, ref]);\n  const { _text, ...resolvedProps } = usePropsResolution(\n    'MenuItem',\n    props,\n    {\n      isDisabled,\n    },\n    {\n      cascadePseudoProps: true,\n    }\n  );\n  const [textContent, setTextContent] = React.useState('');\n  React.useEffect(() => {\n    const menuItem = menuItemRef.current;\n    if (menuItem) {\n      setTextContent((menuItem.textContent ?? '').trim());\n    }\n  }, [children]);\n\n  const menuItemProps = useMenuItem({\n    textValue: textValue ?? textContent,\n    ref: menuItemRef,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Pressable\n      {...menuItemProps}\n      {...resolvedProps}\n      ref={mergedRef}\n      disabled={isDisabled}\n      accessibilityState={{\n        disabled: isDisabled,\n      }}\n      onPress={(e: any) => {\n        if (!isDisabled) {\n          onPress && onPress(e);\n          if (closeOnSelect) {\n            onClose && onClose();\n          }\n        }\n      }}\n    >\n      <>\n        {React.Children.map(children, (child, index: any) => {\n          if (typeof child === 'string' || typeof child === 'number') {\n            return (\n              <Text {..._text} key={`menu-item-${index}`}>\n                {child}\n              </Text>\n            );\n          } else {\n            return child;\n          }\n        })}\n      </>\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(MenuItem));\n"]},"metadata":{},"sourceType":"module"}