{"ast":null,"code":"import _extends2 from \"@babel/runtime/helpers/extends\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { ChevronDownIcon, ChevronUpIcon } from \"../../primitives/Icon/Icons\";\nimport { AccordionItemContext } from \"./Context\";\nimport { useThemeProps } from \"../../../hooks\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar AccordionIcon = function AccordionIcon(_ref, ref) {\n  var props = _extends2({}, _ref);\n\n  var _React$useContext = React.useContext(AccordionItemContext),\n      isOpen = _React$useContext.isOpen;\n\n  var _useThemeProps = useThemeProps('AccordionIcon', props),\n      newProps = _extends2({}, _useThemeProps);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return isOpen ? React.createElement(ChevronUpIcon, _extends({\n    color: \"white\"\n  }, newProps, {\n    ref: ref\n  })) : React.createElement(ChevronDownIcon, _extends({}, newProps, {\n    ref: ref\n  }));\n};\n\nexport default React.memo(React.forwardRef(AccordionIcon));","map":{"version":3,"sources":["AccordionIcon.tsx"],"names":["AccordionIcon","props","isOpen","React","newProps","useThemeProps","useHasResponsiveProps","ref"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,eAAA,EAAA,aAAA;AAEA,SAAA,oBAAA;AACA,SAAA,aAAA;AACA,SAAA,qBAAA;;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,OAAA,GAAA,EAAkD;EAAA,IAA5CC,KAA4C;;EACtE,wBAA+CE,KAAK,CAALA,UAAAA,CAA/C,oBAA+CA,CAA/C;EAAA,IAAQD,MAAR,qBAAQA,MAAR;;EAGA,qBAAwBG,aAAa,CAAA,eAAA,EAJiC,KAIjC,CAArC;EAAA,IAAWD,QAAX;;EAEA,IAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EACD,OAAOJ,MAAM,GACX,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,QAAA,CAAA;IAAe,KAAK,EAAC;EAArB,CAAA,EAAA,QAAA,EAAA;IAA2C,GAAG,EAAEK;EAAhD,CAAA,CAAA,CADW,GAGX,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,QAAA,CAAA,EAAA,EAAA,QAAA,EAAA;IAA+B,GAAG,EAAEA;EAApC,CAAA,CAAA,CAHF;AATF,CAAA;;AAgBA,eAAeJ,KAAK,CAALA,IAAAA,CAAWA,KAAK,CAALA,UAAAA,CAA1B,aAA0BA,CAAXA,CAAf","sourcesContent":["import React from 'react';\nimport { ChevronDownIcon, ChevronUpIcon } from '../../primitives/Icon/Icons';\nimport type { IAccordionIconProps, IAccordionItemContextProps } from './types';\nimport { AccordionItemContext } from './Context';\nimport { useThemeProps } from '../../../hooks';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AccordionIcon = ({ ...props }: IAccordionIconProps, ref?: any) => {\n  const { isOpen }: IAccordionItemContextProps = React.useContext(\n    AccordionItemContext\n  );\n  const { ...newProps } = useThemeProps('AccordionIcon', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return isOpen ? (\n    <ChevronUpIcon color=\"white\" {...newProps} ref={ref} />\n  ) : (\n    <ChevronDownIcon {...newProps} ref={ref} />\n  );\n};\n\nexport default React.memo(React.forwardRef(AccordionIcon));\n"]},"metadata":{},"sourceType":"module"}