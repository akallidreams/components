{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../../primitives/Box\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useFormControlContext } from \"./useFormControl\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { combineContextAndProps } from \"../../../utils\";\n\nvar FormControlHelperText = function FormControlHelperText(props, ref) {\n  var formControlContext = useFormControlContext();\n  var combinedProps = combineContextAndProps(formControlContext, props);\n  var resolvedProps = usePropsResolution('FormControlHelperText', combinedProps, {\n    isDisabled: combinedProps.isDisabled,\n    isReadOnly: combinedProps.isReadOnly,\n    isInvalid: combinedProps.isInvalid\n  });\n  React.useEffect(function () {\n    resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.setHasHelpText(true);\n    return function () {\n      resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.setHasHelpText(false);\n    };\n  });\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Box, _extends({}, resolvedProps, {\n    nativeID: resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.feedbackId,\n    ref: ref\n  }));\n};\n\nexport default memo(forwardRef(FormControlHelperText));","map":{"version":3,"sources":["FormControlHelperText.tsx"],"names":["FormControlHelperText","formControlContext","useFormControlContext","combinedProps","combineContextAndProps","resolvedProps","usePropsResolution","isDisabled","isReadOnly","isInvalid","React","useHasResponsiveProps","ref","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,GAAA;AACA,SAAA,kBAAA;AACA,SAAA,qBAAA;AAEA,SAAA,qBAAA;AACA,SAAA,sBAAA;;AAEA,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAA,KAAA,EAAA,GAAA,EAGzB;EACH,IAAMC,kBAAkB,GAAGC,qBAA3B,EAAA;EACA,IAAMC,aAAa,GAAGC,sBAAsB,CAAA,kBAAA,EAA5C,KAA4C,CAA5C;EACA,IAAMC,aAAa,GAAGC,kBAAkB,CAAA,uBAAA,EAAA,aAAA,EAGtC;IACEC,UAAU,EAAEJ,aAAa,CAD3B,UAAA;IAEEK,UAAU,EAAEL,aAAa,CAF3B,UAAA;IAGEM,SAAS,EAAEN,aAAa,CAH1B;EAAA,CAHsC,CAAxC;EAWAO,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpBL,aAAa,KAAbA,IAAAA,IAAAA,aAAa,KAAA,KAAbA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,aAAa,CAAbA,cAAAA,CAAAA,IAAAA,CAAAA;IACA,OAAO,YAAM;MACXA,aAAa,KAAbA,IAAAA,IAAAA,aAAa,KAAA,KAAbA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,aAAa,CAAbA,cAAAA,CAAAA,KAAAA,CAAAA;IADF,CAAA;EAhBC,CAcHK;;EAOA,IAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EAED,OACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA,EAAA,EAAA,aAAA,EAAA;IAAwB,QAAQ,EAAEN,aAAF,KAAA,IAAEA,IAAAA,aAAF,KAAA,KAAA,CAAEA,GAAF,KAAA,CAAEA,GAAAA,aAAa,CAA/C,UAAA;IAA6D,GAAG,EAAEO;EAAlE,CAAA,CAAA,CADF;AA5BF,CAAA;;AAiCA,eAAeC,IAAI,CAACC,UAAU,CAA9B,qBAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFormControlContext } from './useFormControl';\nimport type { IFormControlHelperTextProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlHelperText = (\n  props: IFormControlHelperTextProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const resolvedProps = usePropsResolution(\n    'FormControlHelperText',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  React.useEffect(() => {\n    resolvedProps?.setHasHelpText(true);\n    return () => {\n      resolvedProps?.setHasHelpText(false);\n    };\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box {...resolvedProps} nativeID={resolvedProps?.feedbackId} ref={ref} />\n  );\n};\n\nexport default memo(forwardRef(FormControlHelperText));\n"]},"metadata":{},"sourceType":"module"}