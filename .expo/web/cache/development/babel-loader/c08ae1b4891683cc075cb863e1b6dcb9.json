{"ast":null,"code":"import { theme as defaultTheme } from \"./../theme\";\nimport mergeWith from 'lodash.mergewith';\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\nexport function extendTheme(overrides) {\n  function customizer(source, override) {\n    if (isFunction(source)) {\n      return function () {\n        var sourceValue = source.apply(void 0, arguments);\n        var overrideValue = isFunction(override) ? override.apply(void 0, arguments) : override;\n        return mergeWith({}, sourceValue, overrideValue, customizer);\n      };\n    }\n\n    return undefined;\n  }\n\n  for (var _len = arguments.length, restOverrides = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    restOverrides[_key - 1] = arguments[_key];\n  }\n\n  var finalOverrides = [overrides].concat(restOverrides).reduce(function (prevValue, currentValue) {\n    return mergeWith({}, prevValue, currentValue, customizer);\n  }, defaultTheme);\n  return finalOverrides;\n}","map":{"version":3,"sources":["extendTheme.tsx"],"names":["theme","isFunction","sourceValue","source","overrideValue","override","mergeWith","finalOverrides"],"mappings":"AAAA,SAASA,KAAK,IAAd,YAAA;AACA,OAAA,SAAA,MAAA,kBAAA;;AAEA,SAAA,UAAA,CAAA,KAAA,EAAyC;EACvC,OAAO,OAAA,KAAA,KAAP,UAAA;AACD;;AAID,OAAO,SAAA,WAAA,CAAA,SAAA,EAGL;EACA,SAAA,UAAA,CAAA,MAAA,EAAA,QAAA,EAAgD;IAC9C,IAAIC,UAAU,CAAd,MAAc,CAAd,EAAwB;MACtB,OAAO,YAAoB;QACzB,IAAMC,WAAW,GAAGC,MAApB,MAAoBA,mBAApB;QACA,IAAMC,aAAa,GAAGH,UAAU,CAAVA,QAAU,CAAVA,GAClBI,QADkBJ,MAClBI,mBADkBJ,GAAtB,QAAA;QAGA,OAAOK,SAAS,CAAA,EAAA,EAAA,WAAA,EAAA,aAAA,EAAhB,UAAgB,CAAhB;MALF,CAAA;IAOD;;IACD,OAAA,SAAA;EACD;;EAZD,kCAHK,aAGL;IAHK,aAGL;EAAA;;EAcA,IAAMC,cAAc,GAAG,CAAA,SAAA,SAAA,aAAA,EAAA,MAAA,CACrB,UAAA,SAAA,EAAA,YAAA,EAA6B;IAC3B,OAAOD,SAAS,CAAA,EAAA,EAAA,SAAA,EAAA,YAAA,EAAhB,UAAgB,CAAhB;EAFmB,CAAA,EAAvB,YAAuB,CAAvB;EAOA,OAAA,cAAA;AACD","sourcesContent":["import { theme as defaultTheme, Theme } from './../theme';\nimport mergeWith from 'lodash.mergewith';\n\nfunction isFunction(value: any): boolean {\n  return typeof value === 'function';\n}\n\ntype ThemeUtil = Theme | (Record<string, any> & {});\n\nexport function extendTheme<T extends ThemeUtil>(\n  overrides: T,\n  ...restOverrides: T[]\n) {\n  function customizer(source: any, override: any) {\n    if (isFunction(source)) {\n      return (...args: any[]) => {\n        const sourceValue = source(...args);\n        const overrideValue = isFunction(override)\n          ? override(...args)\n          : override;\n        return mergeWith({}, sourceValue, overrideValue, customizer);\n      };\n    }\n    return undefined;\n  }\n\n  const finalOverrides = [overrides, ...restOverrides].reduce(\n    (prevValue, currentValue) => {\n      return mergeWith({}, prevValue, currentValue, customizer);\n    },\n    defaultTheme\n  );\n\n  return finalOverrides as T & Theme;\n}\n"]},"metadata":{},"sourceType":"module"}