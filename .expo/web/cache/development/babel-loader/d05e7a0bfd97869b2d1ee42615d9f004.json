{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"as\", \"size\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from \"../../../hooks\";\nimport SVGIcon from \"./SVGIcon\";\nimport { Factory } from \"../../../factory\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar Icon = function Icon(props, ref) {\n  var _usePropsResolution = usePropsResolution('Icon', props),\n      as = _usePropsResolution.as,\n      size = _usePropsResolution.size,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  var tokenizedFontSize = useToken('space', size);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (!as) {\n    return React.createElement(SVGIcon, _extends({\n      size: size\n    }, resolvedProps, {\n      ref: ref\n    }));\n  }\n\n  var isJSX = React.isValidElement(as);\n  var StyledAs = Factory(isJSX ? function (resolvedProps) {\n    return React.cloneElement(as, _objectSpread(_objectSpread({}, resolvedProps), as.props));\n  } : as);\n  return React.createElement(StyledAs, _extends({}, resolvedProps, {\n    fontSize: tokenizedFontSize,\n    lineHeight: tokenizedFontSize,\n    size: size,\n    ref: ref\n  }));\n};\n\nexport default memo(forwardRef(Icon));","map":{"version":3,"sources":["Icon.tsx"],"names":["Icon","resolvedProps","usePropsResolution","tokenizedFontSize","useToken","useHasResponsiveProps","size","ref","isJSX","React","StyledAs","Factory","as","props","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,QAAA,EAAA,kBAAA;AAEA,OAAA,OAAA;AACA,SAAA,OAAA;AACA,SAAA,qBAAA;;AAEA,IAAMA,IAAI,GAAG,SAAPA,IAAO,CAAA,KAAA,EAAA,GAAA,EAAkC;EAC7C,0BAAuCE,kBAAkB,CAAA,MAAA,EAAzD,KAAyD,CAAzD;EAAA,IAAM,EAAN,uBAAM,EAAN;EAAA,IAAM,IAAN,uBAAM,IAAN;EAAA,IAAqBD,aAArB;;EACA,IAAME,iBAAiB,GAAGC,QAAQ,CAAA,OAAA,EAFW,IAEX,CAAlC;;EAEA,IAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EACD,IAAI,CAAJ,EAAA,EAAS;IACP,OAAO,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA;MAAS,IAAI,EAAEC;IAAf,CAAA,EAAA,aAAA,EAAA;MAAwC,GAAG,EAAEC;IAA7C,CAAA,CAAA,CAAP;EACD;;EACD,IAAMC,KAAK,GAAGC,KAAK,CAALA,cAAAA,CAAd,EAAcA,CAAd;EACA,IAAMC,QAAQ,GAAGC,OAAO,CACtBH,KAAK,GACAP,UAAAA,aAAD;IAAA,OACE,KAAK,CAAL,YAAA,CAAA,EAAA,kCAAuB,aAAvB,GAGKW,EAAE,CAACC,KAHR,EADF;EAAA,CADC,GADP,EAAwB,CAAxB;EAWA,OACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,QAAA,CAAA,EAAA,EAAA,aAAA,EAAA;IAEE,QAAQ,EAFV,iBAAA;IAGE,UAAU,EAHZ,iBAAA;IAIE,IAAI,EAJN,IAAA;IAKE,GAAG,EAAEN;EALP,CAAA,CAAA,CADF;AAtBF,CAAA;;AAiCA,eAAeO,IAAI,CAACC,UAAU,CAA9B,IAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport type { IIconProps } from './types';\nimport SVGIcon from './SVGIcon';\nimport { Factory } from '../../../factory';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Icon = (props: IIconProps, ref?: any) => {\n  const { as, size, ...resolvedProps } = usePropsResolution('Icon', props);\n  const tokenizedFontSize = useToken('space', size);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (!as) {\n    return <SVGIcon size={size} {...resolvedProps} ref={ref} />;\n  }\n  const isJSX = React.isValidElement(as);\n  const StyledAs = Factory(\n    isJSX\n      ? (resolvedProps) =>\n          React.cloneElement(as, {\n            ...resolvedProps,\n            //@ts-ignore\n            ...as.props,\n          })\n      : as\n  );\n\n  return (\n    <StyledAs\n      {...resolvedProps}\n      fontSize={tokenizedFontSize}\n      lineHeight={tokenizedFontSize}\n      size={size}\n      ref={ref}\n    />\n  );\n};\n\nexport default memo(forwardRef(Icon));\n"]},"metadata":{},"sourceType":"module"}