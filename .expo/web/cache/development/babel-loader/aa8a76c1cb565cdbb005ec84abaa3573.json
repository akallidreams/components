{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"isOpen\", \"onClose\", \"defaultIsOpen\", \"initialFocusRef\", \"finalFocusRef\", \"avoidKeyboard\", \"closeOnOverlayClick\", \"isKeyboardDismissable\", \"overlayVisible\", \"backdropVisible\", \"animationPreset\"],\n    _excluded2 = [\"contentSize\", \"_backdrop\", \"_backdropFade\", \"_fade\", \"_slide\", \"_overlay\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Backdrop from \"../Backdrop\";\nimport { Slide } from \"../Transitions\";\nimport { FocusScope } from '@react-native-aria/focus';\nimport { useControllableState, usePropsResolution } from \"../../../hooks\";\nimport { ModalContext } from \"./Context\";\nimport Box from \"../../primitives/Box\";\nimport { Fade } from \"../../composites/Transitions\";\nimport { useKeyboardBottomInset } from \"../../../utils\";\nimport { Overlay } from \"../../primitives/Overlay\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar Modal = function Modal(_ref, ref) {\n  var children = _ref.children,\n      isOpen = _ref.isOpen,\n      onClose = _ref.onClose,\n      defaultIsOpen = _ref.defaultIsOpen,\n      initialFocusRef = _ref.initialFocusRef,\n      finalFocusRef = _ref.finalFocusRef,\n      avoidKeyboard = _ref.avoidKeyboard,\n      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,\n      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? true : _ref$closeOnOverlayCl,\n      _ref$isKeyboardDismis = _ref.isKeyboardDismissable,\n      isKeyboardDismissable = _ref$isKeyboardDismis === void 0 ? true : _ref$isKeyboardDismis,\n      _ref$overlayVisible = _ref.overlayVisible,\n      overlayVisible = _ref$overlayVisible === void 0 ? true : _ref$overlayVisible,\n      _ref$backdropVisible = _ref.backdropVisible,\n      backdropVisible = _ref$backdropVisible === void 0 ? true : _ref$backdropVisible,\n      animationPreset = _ref.animationPreset,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var bottomInset = useKeyboardBottomInset();\n\n  var _usePropsResolution = usePropsResolution('Modal', rest),\n      contentSize = _usePropsResolution.contentSize,\n      _backdrop = _usePropsResolution._backdrop,\n      _backdropFade = _usePropsResolution._backdropFade,\n      _fade = _usePropsResolution._fade,\n      _slide = _usePropsResolution._slide,\n      _overlay = _usePropsResolution._overlay,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var _useControllableState = useControllableState({\n    value: isOpen,\n    defaultValue: defaultIsOpen,\n    onChange: function onChange(val) {\n      if (!val) onClose && onClose();\n    }\n  }),\n      _useControllableState2 = _slicedToArray(_useControllableState, 2),\n      visible = _useControllableState2[0],\n      setVisible = _useControllableState2[1];\n\n  var handleClose = React.useCallback(function () {\n    return setVisible(false);\n  }, [setVisible]);\n  var child = React.createElement(Box, _extends({\n    bottom: avoidKeyboard ? bottomInset + 'px' : undefined\n  }, resolvedProps, {\n    ref: ref,\n    pointerEvents: \"box-none\"\n  }), children);\n  var contextValue = React.useMemo(function () {\n    return {\n      handleClose: handleClose,\n      contentSize: contentSize,\n      initialFocusRef: initialFocusRef,\n      finalFocusRef: finalFocusRef,\n      visible: visible\n    };\n  }, [handleClose, contentSize, initialFocusRef, finalFocusRef, visible]);\n\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n\n  return React.createElement(Overlay, _extends({\n    isOpen: visible,\n    onRequestClose: handleClose,\n    isKeyboardDismissable: isKeyboardDismissable,\n    animationPreset: animationPreset,\n    useRNModalOnAndroid: true\n  }, _overlay), React.createElement(ModalContext.Provider, {\n    value: contextValue\n  }, React.createElement(Fade, _extends({\n    in: visible,\n    style: StyleSheet.absoluteFill\n  }, _backdropFade), overlayVisible && backdropVisible && React.createElement(Backdrop, _extends({\n    onPress: function onPress() {\n      closeOnOverlayClick && handleClose();\n    }\n  }, _backdrop))), animationPreset === 'slide' ? React.createElement(Slide, _extends({\n    in: visible\n  }, _slide), React.createElement(FocusScope, {\n    contain: visible,\n    autoFocus: visible && !initialFocusRef,\n    restoreFocus: visible && !finalFocusRef\n  }, child)) : React.createElement(Fade, _extends({\n    in: visible,\n    style: StyleSheet.absoluteFill\n  }, _fade), React.createElement(FocusScope, {\n    contain: visible,\n    autoFocus: visible && !initialFocusRef,\n    restoreFocus: visible && !finalFocusRef\n  }, child))));\n};\n\nexport default memo(forwardRef(Modal));","map":{"version":3,"sources":["Modal.tsx"],"names":["Modal","closeOnOverlayClick","isKeyboardDismissable","overlayVisible","backdropVisible","rest","bottomInset","useKeyboardBottomInset","resolvedProps","usePropsResolution","useControllableState","value","defaultValue","onChange","val","onClose","handleClose","React","setVisible","child","avoidKeyboard","undefined","contextValue","contentSize","initialFocusRef","finalFocusRef","visible","useHasResponsiveProps","StyleSheet","absoluteFill","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Backdrop from '../Backdrop';\nimport { Slide } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { useControllableState, usePropsResolution } from '../../../hooks';\nimport { ModalContext } from './Context';\nimport Box from '../../primitives/Box';\nimport type { IModalProps } from './types';\nimport { Fade } from '../../composites/Transitions';\nimport { useKeyboardBottomInset } from '../../../utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Modal = (\n  {\n    children,\n    isOpen,\n    onClose,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    avoidKeyboard,\n    closeOnOverlayClick = true,\n    isKeyboardDismissable = true,\n    overlayVisible = true,\n    backdropVisible = true,\n    animationPreset,\n    ...rest\n  }: IModalProps,\n  ref: any\n) => {\n  const bottomInset = useKeyboardBottomInset();\n  const {\n    contentSize,\n    _backdrop,\n    _backdropFade,\n    _fade,\n    _slide,\n    _overlay,\n    ...resolvedProps\n  } = usePropsResolution('Modal', rest);\n\n  const [visible, setVisible] = useControllableState({\n    value: isOpen,\n    defaultValue: defaultIsOpen,\n    onChange: (val) => {\n      if (!val) onClose && onClose();\n    },\n  });\n\n  const handleClose = React.useCallback(() => setVisible(false), [setVisible]);\n\n  const child = (\n    <Box\n      bottom={avoidKeyboard ? bottomInset + 'px' : undefined}\n      {...resolvedProps}\n      ref={ref}\n      pointerEvents=\"box-none\"\n    >\n      {children}\n    </Box>\n  );\n\n  const contextValue = React.useMemo(() => {\n    return {\n      handleClose,\n      contentSize,\n      initialFocusRef,\n      finalFocusRef,\n      visible,\n    };\n  }, [handleClose, contentSize, initialFocusRef, finalFocusRef, visible]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n  // console.log('visible here', visible);\n  return (\n    <Overlay\n      isOpen={visible}\n      onRequestClose={handleClose}\n      isKeyboardDismissable={isKeyboardDismissable}\n      animationPreset={animationPreset}\n      useRNModalOnAndroid\n      {..._overlay}\n    >\n      <ModalContext.Provider value={contextValue}>\n        <Fade in={visible} style={StyleSheet.absoluteFill} {..._backdropFade}>\n          {overlayVisible && backdropVisible && (\n            <Backdrop\n              onPress={() => {\n                closeOnOverlayClick && handleClose();\n              }}\n              {..._backdrop}\n            />\n          )}\n        </Fade>\n        {animationPreset === 'slide' ? (\n          <Slide in={visible} {..._slide}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Slide>\n        ) : (\n          <Fade in={visible} style={StyleSheet.absoluteFill} {..._fade}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Fade>\n        )}\n      </ModalContext.Provider>\n    </Overlay>\n  );\n};\n\nexport default memo(forwardRef(Modal));\n"]},"metadata":{},"sourceType":"module"}