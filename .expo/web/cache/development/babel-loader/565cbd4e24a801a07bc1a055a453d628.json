{"ast":null,"code":"import get from 'lodash.get';\nimport isEmpty from 'lodash.isempty';\nimport Color from 'tinycolor2';\nexport function mode(light, dark) {\n  return function (props) {\n    return props.colorMode === 'dark' ? dark : light;\n  };\n}\nexport var transparentize = function transparentize(color, opacity) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    return Color(raw).setAlpha(opacity).toRgbString();\n  };\n};\nexport var getColor = function getColor(theme, color, fallback) {\n  var hex = get(theme, \"colors.\".concat(color), color);\n  var isValid = Color(hex).isValid();\n  return isValid ? hex : fallback;\n};\nexport var tone = function tone(color) {\n  return function (theme) {\n    var hex = getColor(theme, color);\n    var isDark = Color(hex).isDark();\n    return isDark ? 'dark' : 'light';\n  };\n};\nexport var isDark = function isDark(color) {\n  return function (theme) {\n    return tone(color)(theme) === 'dark';\n  };\n};\nexport var isLight = function isLight(color) {\n  return function (theme) {\n    return tone(color)(theme) === 'light';\n  };\n};\nexport function randomColor(opts) {\n  var fallback = Color.random().toHexString();\n\n  if (!opts || isEmpty(opts)) {\n    return fallback;\n  }\n\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors);\n  }\n\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string);\n  }\n\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors);\n  }\n\n  return fallback;\n}\n\nfunction randomFromList(list) {\n  return list[Math.floor(Math.random() * list.length)];\n}\n\nfunction randomColorFromList(str, list) {\n  var index = 0;\n  if (str.length === 0) return list[0];\n\n  for (var i = 0; i < str.length; i++) {\n    index = str.charCodeAt(i) + ((index << 5) - index);\n    index = index & index;\n  }\n\n  index = (index % list.length + list.length) % list.length;\n  return list[index];\n}\n\nfunction randomColorFromString(str) {\n  var hash = 0;\n  if (str.length === 0) return hash.toString();\n\n  for (var i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    hash = hash & hash;\n  }\n\n  var color = '#';\n\n  for (var j = 0; j < 3; j++) {\n    var value = hash >> j * 8 & 255;\n    color += ('00' + value.toString(16)).substr(-2);\n  }\n\n  return color;\n}","map":{"version":3,"sources":["colors.ts"],"names":["props","transparentize","theme","raw","getColor","Color","hex","get","isValid","tone","color","isDark","isLight","fallback","isEmpty","opts","randomColorFromList","randomColorFromString","randomFromList","list","Math","index","str","i","hash","j","value"],"mappings":"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","sourcesContent":["import get from 'lodash.get';\nimport isEmpty from 'lodash.isempty';\nimport Color from 'tinycolor2';\nimport type { Dict } from './utils';\n\nexport function mode(light: any, dark: any) {\n  return (props: any) => (props.colorMode === 'dark' ? dark : light);\n}\n\nexport const transparentize = (color: string, opacity: number) => (\n  theme: Dict\n) => {\n  const raw = getColor(theme, color);\n  return Color(raw).setAlpha(opacity).toRgbString();\n};\n\nexport const getColor = (theme: Dict, color: string, fallback?: string) => {\n  const hex = get(theme, `colors.${color}`, color);\n  const isValid = Color(hex).isValid();\n  return isValid ? hex : fallback;\n};\n\nexport const tone = (color: string) => (theme: Dict) => {\n  const hex = getColor(theme, color);\n  const isDark = Color(hex).isDark();\n  return isDark ? 'dark' : 'light';\n};\n\nexport const isDark = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === 'dark';\n\nexport const isLight = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === 'light';\n\ninterface RandomColorOptions {\n  /**\n   * If passed, string will be used to generate\n   * random color\n   */\n  string?: string;\n  /**\n   * List of colors to pick from at random\n   */\n  colors?: string[];\n}\nexport function randomColor(opts?: RandomColorOptions) {\n  const fallback = Color.random().toHexString();\n\n  if (!opts || isEmpty(opts)) {\n    return fallback;\n  }\n\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors);\n  }\n\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string);\n  }\n\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors);\n  }\n\n  return fallback;\n}\n\nfunction randomFromList(list: string[]) {\n  return list[Math.floor(Math.random() * list.length)];\n}\n\nfunction randomColorFromList(str: string, list: string[]) {\n  let index = 0;\n  if (str.length === 0) return list[0];\n  for (let i = 0; i < str.length; i++) {\n    index = str.charCodeAt(i) + ((index << 5) - index);\n    index = index & index;\n  }\n  index = ((index % list.length) + list.length) % list.length;\n  return list[index];\n}\n\nfunction randomColorFromString(str: string) {\n  let hash = 0;\n  if (str.length === 0) return hash.toString();\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    hash = hash & hash;\n  }\n  let color = '#';\n  for (let j = 0; j < 3; j++) {\n    const value = (hash >> (j * 8)) & 255;\n    color += ('00' + value.toString(16)).substr(-2);\n  }\n  return color;\n}\n"]},"metadata":{},"sourceType":"module"}