{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useTypeaheadReducer } from \"./reducer\";\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from \"./types\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { dropdownDefaultStateValues, getDefaultValue } from \"./utils\";\n\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined;\n}\n\nexport function useTypeahead(props) {\n  var defaultValues = _objectSpread({}, dropdownDefaultStateValues);\n\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n\n  var _React$useReducer = React.useReducer(useTypeaheadReducer, defaultValues),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var dispatchWithProps = function dispatchWithProps(object) {\n    dispatch(_objectSpread(_objectSpread({}, object), {}, {\n      props: props\n    }));\n  };\n\n  var inputValue = state.inputValue,\n      isOpen = state.isOpen;\n  var items = props.items,\n      onInputValueChange = props.onInputValueChange,\n      onSelectedItemChange = props.onSelectedItemChange,\n      selectedItem = props.selectedItem,\n      itemToString = props.itemToString;\n  var isControlled = isControlledProp(props, 'selectedItem');\n  useEffect(function () {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem)\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  var onChangeText = function onChangeText(text) {\n    onInputValueChange === null || onInputValueChange === void 0 ? void 0 : onInputValueChange({\n      inputValue: text\n    });\n    dispatchWithProps({\n      type: stateChangeTypes.InputChange,\n      inputValue: text\n    });\n  };\n\n  var handleItemSelect = function handleItemSelect(item, index) {\n    onSelectedItemChange === null || onSelectedItemChange === void 0 ? void 0 : onSelectedItemChange(item);\n    dispatchWithProps({\n      type: stateChangeTypes.ItemClick,\n      index: index\n    });\n    Keyboard.dismiss();\n  };\n\n  var getMenuItemProps = function getMenuItemProps(item, index) {\n    return {\n      onPress: function onPress() {\n        return handleItemSelect(item, index);\n      },\n      accessible: true,\n      accessiblityRole: 'menuitem'\n    };\n  };\n\n  var getMenuProps = function getMenuProps() {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu',\n      accessibilityHint: \"Showing \".concat(items.length, \" records\")\n    };\n  };\n\n  var getToggleButtonProps = function getToggleButtonProps() {\n    return {\n      onPress: function onPress() {\n        dispatchWithProps({\n          type: stateChangeTypes.ToggleButtonClick\n        });\n      }\n    };\n  };\n\n  var getInputProps = function getInputProps(propInputVal, propOnchangeText) {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox',\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen\n      }\n    };\n  };\n\n  return {\n    getInputProps: getInputProps,\n    getMenuItemProps: getMenuItemProps,\n    getMenuProps: getMenuProps,\n    getToggleButtonProps: getToggleButtonProps,\n    isOpen: isOpen\n  };\n}","map":{"version":3,"sources":["useTypeahead.ts"],"names":["props","defaultValues","dropdownDefaultStateValues","getDefaultValue","React","dispatchWithProps","object","dispatch","isOpen","itemToString","isControlled","isControlledProp","useEffect","type","stateChangeTypes","inputValue","onChangeText","text","onInputValueChange","handleItemSelect","onSelectedItemChange","index","Keyboard","getMenuItemProps","onPress","accessible","accessiblityRole","getMenuProps","accessibilityRole","accessibilityHint","items","getToggleButtonProps","ToggleButtonClick","getInputProps","propInputVal","value","accessibilityLabel","accessibilityState","expanded"],"mappings":"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","sourcesContent":["import { useTypeaheadReducer } from './reducer';\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from './types';\nimport type { AccessibilityRole } from 'react-native';\nimport { Keyboard } from 'react-native';\nimport { dropdownDefaultStateValues, getDefaultValue } from './utils';\n\nfunction isControlledProp(props: any, key: string) {\n  return props[key] !== undefined;\n}\n\nimport type { IUseTypeaheadProps } from './types';\n\nexport function useTypeahead(props: IUseTypeaheadProps) {\n  let defaultValues = { ...dropdownDefaultStateValues };\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n\n  const [state, dispatch] = React.useReducer(\n    useTypeaheadReducer,\n    defaultValues\n  );\n\n  const dispatchWithProps = (object: any) => {\n    dispatch({ ...object, props });\n  };\n\n  const { inputValue, isOpen } = state;\n\n  const {\n    items,\n    onInputValueChange,\n    onSelectedItemChange,\n    selectedItem,\n    itemToString,\n  } = props;\n\n  const isControlled = isControlledProp(props, 'selectedItem');\n\n  useEffect(() => {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem),\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  const onChangeText = (text: string) => {\n    onInputValueChange?.({ inputValue: text });\n    dispatchWithProps({ type: stateChangeTypes.InputChange, inputValue: text });\n  };\n\n  const handleItemSelect = (item: any, index: number) => {\n    onSelectedItemChange?.(item);\n    dispatchWithProps({ type: stateChangeTypes.ItemClick, index });\n    Keyboard.dismiss();\n  };\n\n  const getMenuItemProps = (item: any, index: number) => {\n    return {\n      onPress: () => handleItemSelect(item, index),\n      accessible: true,\n      accessiblityRole: 'menuitem' as AccessibilityRole,\n    };\n  };\n\n  const getMenuProps = () => {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu' as AccessibilityRole,\n      accessibilityHint: `Showing ${items.length} records`,\n    };\n  };\n\n  const getToggleButtonProps = () => {\n    return {\n      onPress: () => {\n        dispatchWithProps({ type: stateChangeTypes.ToggleButtonClick });\n      },\n    };\n  };\n\n  const getInputProps = (propInputVal?: any, propOnchangeText?: any) => {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox' as AccessibilityRole,\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen,\n      },\n    };\n  };\n\n  return {\n    getInputProps,\n    getMenuItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    isOpen,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}