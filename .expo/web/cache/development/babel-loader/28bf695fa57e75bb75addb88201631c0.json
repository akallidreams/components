{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"inputProps\", \"combinedProps\", \"children\", \"wrapperRef\", \"isHovered\", \"isFocusVisible\"],\n    _excluded2 = [\"_interactionBox\", \"_icon\", \"_stack\", \"_text\"],\n    _excluded3 = [\"icon\", \"children\", \"wrapperRef\", \"isHovered\", \"isFocusVisible\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../Box\";\nimport { Stack } from \"../Stack\";\nimport { Center } from \"../../composites/Center\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { wrapStringChild } from \"../../../utils/wrapStringChild\";\nimport { mergeRefs } from \"./../../../utils\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from \"./RadioGroup\";\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from \"../Icon/Icons\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { combineContextAndProps, isEmptyObj } from \"../../../utils\";\nimport { useFormControlContext } from \"../../composites/FormControl\";\nvar RadioComponent = memo(forwardRef(function (_ref2, ref) {\n  var icon = _ref2.icon,\n      inputProps = _ref2.inputProps,\n      combinedProps = _ref2.combinedProps,\n      children = _ref2.children,\n      wrapperRef = _ref2.wrapperRef,\n      isHoveredProp = _ref2.isHovered,\n      isFocusVisibleProp = _ref2.isFocusVisible,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var isInvalid = combinedProps.isInvalid,\n      isReadOnly = combinedProps.isReadOnly,\n      isIndeterminate = combinedProps.isIndeterminate;\n  var isDisabled = inputProps.disabled,\n      isChecked = inputProps.checked;\n\n  var _ref = React.useRef(null);\n\n  var _useHover = useHover({}, _ref),\n      isHovered = _useHover.isHovered;\n\n  var mergedRefs = mergeRefs([_ref, wrapperRef]);\n\n  var _useFocusRing = useFocusRing(),\n      focusProps = _useFocusRing.focusProps,\n      isFocusVisible = _useFocusRing.isFocusVisible;\n\n  var _usePropsResolution = usePropsResolution('Radio', combinedProps, {\n    isInvalid: isInvalid,\n    isReadOnly: isReadOnly,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled: isDisabled,\n    isIndeterminate: isIndeterminate,\n    isChecked: isChecked,\n    isHovered: isHoveredProp || isHovered\n  }),\n      _interactionBox = _usePropsResolution._interactionBox,\n      _icon = _usePropsResolution._icon,\n      _stack = _usePropsResolution._stack,\n      _text = _usePropsResolution._text,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var sizedIcon = function sizedIcon() {\n    return React.cloneElement(icon, _objectSpread({}, _icon));\n  };\n\n  var component = React.createElement(Stack, _stack, React.createElement(Center, null, React.createElement(Box, _interactionBox), React.createElement(Center, resolvedProps, icon && sizedIcon && isChecked ? sizedIcon() : React.createElement(CircleIcon, _extends({}, _icon, {\n    opacity: isChecked ? 1 : 0\n  })))), wrapStringChild(children, _text));\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Box, {\n    accessibilityRole: \"label\",\n    ref: mergedRefs\n  }, React.createElement(VisuallyHidden, null, React.createElement(\"input\", _extends({}, inputProps, focusProps, {\n    ref: ref\n  }))), component);\n}));\n\nvar Radio = function Radio(_ref3, ref) {\n  var icon = _ref3.icon,\n      children = _ref3.children,\n      wrapperRef = _ref3.wrapperRef,\n      isHoveredProp = _ref3.isHovered,\n      isFocusVisibleProp = _ref3.isFocusVisible,\n      props = _objectWithoutProperties(_ref3, _excluded3);\n\n  var _contextState$state;\n\n  var formControlContext = useFormControlContext();\n  var contextState = React.useContext(RadioContext);\n  var combinedProps = combineContextAndProps(_objectSpread(_objectSpread({}, formControlContext), contextState), props);\n  var inputRef = React.useRef(null);\n  var radioState = useRadio(_objectSpread(_objectSpread({}, combinedProps), {}, {\n    'aria-label': props.accessibilityLabel,\n    children: children\n  }), (_contextState$state = contextState.state) !== null && _contextState$state !== void 0 ? _contextState$state : {}, inputRef);\n  var inputProps = React.useMemo(function () {\n    return radioState.inputProps;\n  }, [radioState.inputProps.checked, radioState.inputProps.disabled]);\n\n  var _React$useState = React.useState(_objectSpread({}, combinedProps)),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      contextCombinedProps = _React$useState2[0];\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return React.createElement(React.Fragment, null);\n  }\n\n  return React.createElement(RadioComponent, {\n    inputProps: inputProps,\n    combinedProps: contextCombinedProps,\n    children: children,\n    ref: ref,\n    icon: icon,\n    wrapperRef: wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp\n  });\n};\n\nexport default memo(forwardRef(Radio));","map":{"version":3,"sources":["Radio.web.tsx"],"names":["RadioComponent","memo","forwardRef","isHovered","isFocusVisible","props","isIndeterminate","disabled","checked","isChecked","_ref","React","useHover","mergedRefs","mergeRefs","useFocusRing","resolvedProps","usePropsResolution","isInvalid","isReadOnly","isFocusVisibleProp","isDisabled","isHoveredProp","sizedIcon","_icon","component","icon","wrapStringChild","useHasResponsiveProps","ref","Radio","formControlContext","useFormControlContext","contextState","combinedProps","combineContextAndProps","inputRef","radioState","useRadio","children","inputProps","isEmptyObj","console"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { useFormControlContext } from '../../composites/FormControl';\n\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isFocusVisible: isFocusVisibleProp,\n        ...props\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n      const _ref = React.useRef(null);\n      const { isHovered } = useHover({}, _ref);\n      const mergedRefs = mergeRefs([_ref, wrapperRef]);\n      const { focusProps, isFocusVisible } = useFocusRing();\n\n      const {\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution('Radio', combinedProps, {\n        isInvalid,\n        isReadOnly,\n        isFocusVisible: isFocusVisibleProp || isFocusVisible,\n        isDisabled,\n        isIndeterminate,\n        isChecked,\n        isHovered: isHoveredProp || isHovered,\n      });\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      const component = (\n        <Stack {..._stack}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Radio */}\n            <Center {...resolvedProps}>\n              {icon && sizedIcon && isChecked ? (\n                sizedIcon()\n              ) : (\n                <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n              )}\n            </Center>\n          </Center>\n          {wrapStringChild(children, _text)}\n        </Stack>\n      );\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n\n      return (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={mergedRefs}\n        >\n          <VisuallyHidden>\n            <input {...inputProps} {...focusProps} ref={ref} />\n          </VisuallyHidden>\n          {component}\n        </Box>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...combinedProps,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]},"metadata":{},"sourceType":"module"}