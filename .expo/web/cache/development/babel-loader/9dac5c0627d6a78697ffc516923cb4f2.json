{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as stateChangeTypes from \"./types\";\nimport { getDefaultValue } from \"./utils\";\nexport function useTypeaheadReducer(state, action) {\n  var type = action.type,\n      props = action.props;\n  var changes;\n\n  switch (type) {\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index])\n      };\n      break;\n\n    case stateChangeTypes.InputBlur:\n      if (state.isOpen) {\n        changes = {\n          isOpen: false\n        };\n      }\n\n      break;\n\n    case stateChangeTypes.InputChange:\n      changes = {\n        isOpen: true,\n        inputValue: action.inputValue\n      };\n      break;\n\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen\n      };\n      break;\n\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true\n      };\n      break;\n\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false\n      };\n      break;\n\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n        inputValue: props.itemToString(action.selectedItem)\n      };\n      break;\n\n    case stateChangeTypes.ControlledPropUpdatedSelectedItem:\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue\n      };\n      break;\n\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: getDefaultValue(props, 'selectedItem'),\n        inputValue: getDefaultValue(props, 'inputValue')\n      };\n      break;\n\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n\n  return _objectSpread(_objectSpread({}, state), changes);\n}","map":{"version":3,"sources":["reducer.tsx"],"names":["props","stateChangeTypes","changes","isOpen","getDefaultValue","selectedItem","action","inputValue","state"],"mappings":";;;;;;AAAA,OAAO,KAAP,gBAAA;AACA,SAAA,eAAA;AAQA,OAAO,SAAA,mBAAA,CAAA,KAAA,EAAA,MAAA,EAAyD;EAC9D,IAAM,IAAN,GAAA,MAAA,CAAM,IAAN;EAAA,IAAcA,KAAd,GAAA,MAAA,CAAcA,KAAd;EACA,IAAA,OAAA;;EAEA,QAAA,IAAA;IACE,KAAKC,gBAAgB,CAArB,SAAA;MACEC,OAAO,GAAG;QACRC,MAAM,EAAEC,eAAe,CAAA,KAAA,EADf,QACe,CADf;QAERC,YAAY,EAAEL,KAAK,CAALA,KAAAA,CAAYM,MAAM,CAFxB,KAEMN,CAFN;QAGRO,UAAU,EAAEP,KAAK,CAALA,YAAAA,CAAmBA,KAAK,CAALA,KAAAA,CAAYM,MAAM,CAArCN,KAAmBA,CAAnBA;MAHJ,CAAVE;MAKA;;IACF,KAAKD,gBAAgB,CAArB,SAAA;MACE,IAAIO,KAAK,CAAT,MAAA,EAAkB;QAChBN,OAAO,GAAG;UACRC,MAAM,EAAE;QADA,CAAVD;MAGD;;MACD;;IACF,KAAKD,gBAAgB,CAArB,WAAA;MACEC,OAAO,GAAG;QACRC,MAAM,EADE,IAAA;QAERI,UAAU,EAAED,MAAM,CAACC;MAFX,CAAVL;MAIA;;IAEF,KAAKD,gBAAgB,CAArB,iBAAA;IACA,KAAKA,gBAAgB,CAArB,kBAAA;MACEC,OAAO,GAAG;QACRC,MAAM,EAAE,CAACK,KAAK,CAACL;MADP,CAAVD;MAGA;;IACF,KAAKD,gBAAgB,CAArB,gBAAA;MACEC,OAAO,GAAG;QACRC,MAAM,EAAE;MADA,CAAVD;MAGA;;IACF,KAAKD,gBAAgB,CAArB,iBAAA;MACEC,OAAO,GAAG;QACRC,MAAM,EAAE;MADA,CAAVD;MAGA;;IAEF,KAAKD,gBAAgB,CAArB,kBAAA;MACEC,OAAO,GAAG;QACRG,YAAY,EAAEC,MAAM,CADZ,YAAA;QAERC,UAAU,EAAEP,KAAK,CAALA,YAAAA,CAAmBM,MAAM,CAAzBN,YAAAA;MAFJ,CAAVE;MAIA;;IACF,KAAKD,gBAAgB,CAArB,iCAAA;IACA,KAAKA,gBAAgB,CAArB,qBAAA;MACEC,OAAO,GAAG;QACRK,UAAU,EAAED,MAAM,CAACC;MADX,CAAVL;MAGA;;IACF,KAAKD,gBAAgB,CAArB,aAAA;MACEC,OAAO,GAAG;QACRC,MAAM,EAAEC,eAAe,CAAA,KAAA,EADf,QACe,CADf;QAERC,YAAY,EAAED,eAAe,CAAA,KAAA,EAFrB,cAEqB,CAFrB;QAGRG,UAAU,EAAEH,eAAe,CAAA,KAAA,EAAA,YAAA;MAHnB,CAAVF;MAKA;;IACF;MACE,MAAM,IAAA,KAAA,CAAN,4CAAM,CAAN;EA3DJ;;EA8DA,uCAAO,KAAP,GAEKA,OAFL;AAID","sourcesContent":["import * as stateChangeTypes from './types';\nimport { getDefaultValue } from './utils';\n\ntype IState = {\n  isOpen: boolean;\n  selectedItem: any;\n  inputValue: string;\n};\n\nexport function useTypeaheadReducer(state: IState, action: any) {\n  const { type, props } = action;\n  let changes;\n\n  switch (type) {\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index]),\n      };\n      break;\n    case stateChangeTypes.InputBlur:\n      if (state.isOpen) {\n        changes = {\n          isOpen: false,\n        };\n      }\n      break;\n    case stateChangeTypes.InputChange:\n      changes = {\n        isOpen: true,\n        inputValue: action.inputValue,\n      };\n      break;\n\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen,\n      };\n      break;\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true,\n      };\n      break;\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false,\n      };\n      break;\n\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n        inputValue: props.itemToString(action.selectedItem),\n      };\n      break;\n    case stateChangeTypes.ControlledPropUpdatedSelectedItem:\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue,\n      };\n      break;\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: getDefaultValue(props, 'selectedItem'),\n        inputValue: getDefaultValue(props, 'inputValue'),\n      };\n      break;\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n\n  return {\n    ...state,\n    ...changes,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}