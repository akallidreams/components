{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onOpen\", \"trigger\", \"onClose\", \"isOpen\", \"children\", \"defaultIsOpen\", \"initialFocusRef\", \"finalFocusRef\", \"trapFocus\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport { Popper } from \"../Popper\";\nimport { mergeRefs } from \"../../../utils\";\nimport { useControllableState } from \"../../../hooks\";\nimport { PopoverContext } from \"./PopoverContext\";\nimport Box from \"../../primitives/Box\";\nimport Backdrop from \"../Backdrop\";\nimport { FocusScope } from '@react-native-aria/focus';\nimport { PresenceTransition } from \"../Transitions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useId } from '@react-aria/utils';\nimport { Overlay } from \"../../primitives/Overlay\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar Popover = function Popover(_ref, ref) {\n  var onOpen = _ref.onOpen,\n      trigger = _ref.trigger,\n      onClose = _ref.onClose,\n      isOpenProp = _ref.isOpen,\n      children = _ref.children,\n      defaultIsOpen = _ref.defaultIsOpen,\n      initialFocusRef = _ref.initialFocusRef,\n      finalFocusRef = _ref.finalFocusRef,\n      _ref$trapFocus = _ref.trapFocus,\n      trapFocus = _ref$trapFocus === void 0 ? true : _ref$trapFocus,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var triggerRef = React.useRef(null);\n  var mergedRef = mergeRefs([triggerRef]);\n\n  var _useControllableState = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: function onChange(value) {\n      value ? onOpen && onOpen() : onClose && onClose();\n    }\n  }),\n      _useControllableState2 = _slicedToArray(_useControllableState, 2),\n      isOpen = _useControllableState2[0],\n      setIsOpen = _useControllableState2[1];\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      bodyMounted = _React$useState2[0],\n      setBodyMounted = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      headerMounted = _React$useState4[0],\n      setHeaderMounted = _React$useState4[1];\n\n  var popoverContentId = \"\".concat(useId(), \"-content\");\n  var headerId = \"\".concat(popoverContentId, \"-header\");\n  var bodyId = \"\".concat(popoverContentId, \"-body\");\n  var handleOpen = React.useCallback(function () {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  var updatedTrigger = function updatedTrigger() {\n    return trigger({\n      'ref': mergedRef,\n      'onPress': handleOpen,\n      'aria-expanded': isOpen ? true : false,\n      'aria-controls': isOpen ? popoverContentId : undefined,\n      'aria-haspopup': true\n    }, {\n      open: isOpen\n    });\n  };\n\n  var handleClose = function handleClose() {\n    setIsOpen(false);\n  };\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Box, {\n    ref: ref\n  }, updatedTrigger(), React.createElement(Overlay, {\n    isOpen: isOpen,\n    onRequestClose: handleClose,\n    useRNModalOnAndroid: true,\n    unmountOnExit: true\n  }, React.createElement(PresenceTransition, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1,\n      transition: {\n        duration: 150\n      }\n    },\n    exit: {\n      opacity: 0,\n      scale: 0.95,\n      transition: {\n        duration: 100\n      }\n    },\n    visible: isOpen,\n    style: StyleSheet.absoluteFill\n  }, React.createElement(Popper, _extends({\n    onClose: handleClose,\n    triggerRef: triggerRef\n  }, props), React.createElement(Backdrop, {\n    onPress: handleClose,\n    bg: \"transparent\"\n  }), React.createElement(PopoverContext.Provider, {\n    value: {\n      onClose: handleClose,\n      initialFocusRef: initialFocusRef,\n      finalFocusRef: finalFocusRef,\n      popoverContentId: popoverContentId,\n      bodyId: bodyId,\n      headerId: headerId,\n      headerMounted: headerMounted,\n      bodyMounted: bodyMounted,\n      setBodyMounted: setBodyMounted,\n      setHeaderMounted: setHeaderMounted,\n      isOpen: isOpen\n    }\n  }, React.createElement(FocusScope, {\n    contain: trapFocus,\n    restoreFocus: true,\n    autoFocus: true\n  }, children))))));\n};\n\nexport default memo(forwardRef(Popover));","map":{"version":3,"sources":["Popover.tsx"],"names":["Popover","isOpen","trapFocus","props","triggerRef","React","mergedRef","mergeRefs","useControllableState","value","defaultValue","onChange","onOpen","onClose","popoverContentId","useId","headerId","bodyId","handleOpen","setIsOpen","updatedTrigger","trigger","open","handleClose","useHasResponsiveProps","ref","opacity","transition","duration","scale","StyleSheet","absoluteFill","initialFocusRef","finalFocusRef","headerMounted","bodyMounted","setBodyMounted","setHeaderMounted","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { Popper } from '../Popper';\nimport type { IPopoverProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { useControllableState } from '../../../hooks';\nimport { PopoverContext } from './PopoverContext';\nimport Box from '../../primitives/Box';\nimport Backdrop from '../Backdrop';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { PresenceTransition } from '../Transitions';\nimport { StyleSheet } from 'react-native';\nimport { useId } from '@react-aria/utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Popover = (\n  {\n    onOpen,\n    trigger,\n    onClose,\n    isOpen: isOpenProp,\n    children,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    trapFocus = true,\n    ...props\n  }: IPopoverProps,\n  ref: any\n) => {\n  const triggerRef = React.useRef(null);\n  const mergedRef = mergeRefs([triggerRef]);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: (value) => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    },\n  });\n\n  const [bodyMounted, setBodyMounted] = React.useState(false);\n  const [headerMounted, setHeaderMounted] = React.useState(false);\n\n  const popoverContentId = `${useId()}-content`;\n  const headerId = `${popoverContentId}-header`;\n  const bodyId = `${popoverContentId}-body`;\n\n  const handleOpen = React.useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  const updatedTrigger = () => {\n    return trigger(\n      {\n        'ref': mergedRef,\n        'onPress': handleOpen,\n        'aria-expanded': isOpen ? true : false,\n        'aria-controls': isOpen ? popoverContentId : undefined,\n        'aria-haspopup': true,\n      },\n      { open: isOpen }\n    );\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box ref={ref}>\n      {updatedTrigger()}\n      <Overlay\n        isOpen={isOpen}\n        onRequestClose={handleClose}\n        useRNModalOnAndroid\n        unmountOnExit\n      >\n        <PresenceTransition\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1, transition: { duration: 150 } }}\n          exit={{ opacity: 0, scale: 0.95, transition: { duration: 100 } }}\n          visible={isOpen}\n          style={StyleSheet.absoluteFill}\n        >\n          <Popper onClose={handleClose} triggerRef={triggerRef} {...props}>\n            <Backdrop onPress={handleClose} bg=\"transparent\" />\n            <PopoverContext.Provider\n              value={{\n                onClose: handleClose,\n                initialFocusRef,\n                finalFocusRef,\n                popoverContentId,\n                bodyId,\n                headerId,\n                headerMounted,\n                bodyMounted,\n                setBodyMounted,\n                setHeaderMounted,\n                isOpen,\n              }}\n            >\n              <FocusScope contain={trapFocus} restoreFocus autoFocus>\n                {children}\n              </FocusScope>\n            </PopoverContext.Provider>\n          </Popper>\n        </PresenceTransition>\n      </Overlay>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Popover));\n"]},"metadata":{},"sourceType":"module"}