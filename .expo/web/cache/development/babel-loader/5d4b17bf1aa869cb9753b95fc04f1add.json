{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"size\", \"_checkbox\", \"colorScheme\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { createContext, memo, forwardRef } from 'react';\nimport { useCheckboxGroupState } from '@react-stately/checkbox';\nimport { useCheckboxGroup } from '@react-native-aria/checkbox';\nimport { useFormControlContext } from \"../../composites/FormControl\";\nimport Box from \"../Box\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nexport var CheckboxGroupContext = createContext(null);\n\nfunction CheckboxGroup(_ref, ref) {\n  var size = _ref.size,\n      _checkbox = _ref._checkbox,\n      colorScheme = _ref.colorScheme,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var resolvedProps = usePropsResolution('CheckboxGroup', props);\n  var children = props.children;\n  var state = useCheckboxGroupState(props);\n\n  var _useCheckboxGroup = useCheckboxGroup(_objectSpread({\n    'aria-label': props.accessibilityLabel\n  }, props), state),\n      groupProps = _useCheckboxGroup.groupProps;\n\n  var formControlContext = useFormControlContext();\n\n  if (useHasResponsiveProps(_objectSpread(_objectSpread({}, props), {}, {\n    size: size,\n    colorScheme: colorScheme\n  }))) {\n    return null;\n  }\n\n  return React.createElement(CheckboxGroupContext.Provider, {\n    value: _objectSpread(_objectSpread(_objectSpread({\n      size: size,\n      colorScheme: colorScheme\n    }, _checkbox), formControlContext), {}, {\n      state: state\n    })\n  }, React.createElement(Box, _extends({}, resolvedProps, groupProps, props, {\n    ref: ref\n  }), children));\n}\n\nexport default memo(forwardRef(CheckboxGroup));","map":{"version":3,"sources":["CheckboxGroup.tsx"],"names":["CheckboxGroupContext","createContext","props","resolvedProps","usePropsResolution","children","state","useCheckboxGroupState","groupProps","useCheckboxGroup","formControlContext","useFormControlContext","useHasResponsiveProps","size","colorScheme","ref","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,EAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,qBAAA,QAAA,yBAAA;AACA,SAAA,gBAAA,QAAA,6BAAA;AACA,SAAA,qBAAA;AAEA,OAAA,GAAA;AACA,SAAA,qBAAA;AACA,SAAA,kBAAA;AAEA,OAAO,IAAMA,oBAAoB,GAAGC,aAAa,CAA1C,IAA0C,CAA1C;;AAIP,SAAA,aAAA,OAAA,GAAA,EAGE;EAAA,IAFA,IAEA,QAFA,IAEA;EAAA,IAFA,SAEA,QAFA,SAEA;EAAA,IAFA,WAEA,QAFA,WAEA;EAAA,IAFmCC,KAEnC;;EACA,IAAMC,aAAa,GAAGC,kBAAkB,CAAA,eAAA,EAAxC,KAAwC,CAAxC;EACA,IAAQC,QAAR,GAAA,KAAA,CAAQA,QAAR;EACA,IAAMC,KAAK,GAAGC,qBAAqB,CAAnC,KAAmC,CAAnC;;EACA,wBAAuBE,gBAAgB;IACnC,cAAcP,KAAK,CAArB;EADqC,GACQA,KADR,GAAvC,KAAuC,CAAvC;EAAA,IAAQM,UAAR,qBAAQA,UAAR;;EAKA,IAAME,kBAAkB,GAAGC,qBAT3B,EASA;;EAEA,IAAIC,qBAAqB,iCAAC,KAAD;IAAaC,IAAZ,EAAYA,IAAb;IAAmBC,WAAAA,EAAAA;EAAnB,GAAzB,EAA4D;IAC1D,OAAA,IAAA;EACD;;EACD,OACE,KAAA,CAAA,aAAA,CAAC,oBAAD,CAAA,QAAA,EAAA;IACE,KAAK;MAEHD,IAFK,EAELA,IAFG;MAGHC,WAHK,EAGLA;IAHG,GAAE,SAAF,GAAE,kBAAF;MAMHR,KAAAA,EAAAA;IANG;EADP,CAAA,EAUE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA,EAAA,EAAA,aAAA,EAAA,UAAA,EAAA,KAAA,EAAA;IAAmD,GAAG,EAAES;EAAxD,CAAA,CAAA,EAXJ,QAWI,CAVF,CADF;AAgBD;;AAED,eAAeC,IAAI,CAACC,UAAU,CAA9B,aAA8B,CAAX,CAAnB","sourcesContent":["import React, { createContext, memo, forwardRef } from 'react';\nimport { useCheckboxGroupState } from '@react-stately/checkbox';\nimport { useCheckboxGroup } from '@react-native-aria/checkbox';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport type { ICheckboxGroupProps, ICheckboxContext } from './types';\nimport Box from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\n\nexport const CheckboxGroupContext = createContext<ICheckboxContext | null>(\n  null\n);\n\nfunction CheckboxGroup(\n  { size, _checkbox, colorScheme, ...props }: ICheckboxGroupProps,\n  ref?: any\n) {\n  const resolvedProps = usePropsResolution('CheckboxGroup', props);\n  const { children } = props;\n  const state = useCheckboxGroupState(props);\n  const { groupProps } = useCheckboxGroup(\n    { 'aria-label': props.accessibilityLabel, ...props },\n    state\n  );\n\n  const formControlContext = useFormControlContext();\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, size, colorScheme })) {\n    return null;\n  }\n  return (\n    <CheckboxGroupContext.Provider\n      value={{\n        //@ts-ignore\n        size,\n        colorScheme,\n        ..._checkbox,\n        ...formControlContext,\n        state,\n      }}\n    >\n      <Box {...resolvedProps} {...groupProps} {...props} ref={ref}>\n        {children}\n      </Box>\n    </CheckboxGroupContext.Provider>\n  );\n}\n\nexport default memo(forwardRef(CheckboxGroup));\n"]},"metadata":{},"sourceType":"module"}