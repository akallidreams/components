{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nvar linkToHREF = function linkToHREF(URL) {\n  Linking.openURL(URL).catch(function (err) {\n    return console.error('An error occurred', err);\n  });\n};\n\nvar addOnPressFunctionality = function addOnPressFunctionality(href, callback) {\n  href ? linkToHREF(href) : '';\n  callback ? callback() : function () {};\n};\n\nexport function useLink(props) {\n  var href = props.href,\n      isExternal = props.isExternal,\n      _onPress = props.onPress,\n      _ref = props._ref;\n  var platformLinkProps = {};\n\n  if (Platform.OS === 'web') {\n    platformLinkProps = {\n      href: href,\n      onClick: _onPress\n    };\n\n    if (isExternal && _ref.current) {\n      _ref.current.target = '_blank';\n    }\n  } else {\n    platformLinkProps = {\n      onPress: function onPress() {\n        addOnPressFunctionality(href, _onPress);\n      }\n    };\n  }\n\n  return {\n    linkProps: _objectSpread(_objectSpread({}, platformLinkProps), {}, {\n      accessibilityRole: 'link',\n      accessible: true\n    })\n  };\n}","map":{"version":3,"sources":["useLink.ts"],"names":["linkToHREF","URL","Linking","err","console","addOnPressFunctionality","href","callback","_ref","platformLinkProps","Platform","onClick","onPress","isExternal","linkProps","accessibilityRole","accessible"],"mappings":";;;;;;;;;AAIA,IAAMA,UAAU,GAAIC,SAAdD,UAAcC,CAAAA,GAAD,EAAiB;EAClCC,OAAO,CAAPA,OAAAA,CAAAA,GAAAA,EAAAA,KAAAA,CAA4BC,UAAAA,GAAD;IAAA,OAASC,OAAO,CAAPA,KAAAA,CAAAA,mBAAAA,EAApCF,GAAoCE,CAAT;EAAA,CAA3BF;AADF,CAAA;;AAIA,IAAMG,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAA,IAAA,EAAA,QAAA,EAAuC;EACrEC,IAAI,GAAGN,UAAU,CAAb,IAAa,CAAb,GAAJM,EAAAA;EACAC,QAAQ,GAAGA,QAAH,EAAA,GAAgB,YAAM,CAA9BA,CAAAA;AAFF,CAAA;;AAKA,OAAO,SAAA,OAAA,CAAA,KAAA,EAAsC;EAC3C,IAAM,IAAN,GAAA,KAAA,CAAM,IAAN;EAAA,IAAM,UAAN,GAAA,KAAA,CAAM,UAAN;EAAA,IAAM,QAAN,GAAA,KAAA,CAAM,OAAN;EAAA,IAAmCC,IAAnC,GAAA,KAAA,CAAmCA,IAAnC;EAEA,IAAIC,iBAAiB,GAArB,EAAA;;EAEA,IAAIC,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;IACzBD,iBAAiB,GAAG;MAClBH,IADkB,EAClBA,IADkB;MAElBK,OAAO,EAAEC;IAFS,CAApBH;;IAKA,IAAII,UAAU,IAAIL,IAAI,CAAtB,OAAA,EAAgC;MAC9BA,IAAI,CAAJA,OAAAA,CAAAA,MAAAA,GAAAA,QAAAA;IACD;EARH,CAAA,MASO;IACLC,iBAAiB,GAAG;MAClBG,OAAO,EAAE,mBAAM;QACbP,uBAAuB,CAAA,IAAA,EAAvBA,QAAuB,CAAvBA;MACD;IAHiB,CAApBI;EAKD;;EAED,OAAO;IACLK,SAAS,kCAAE,iBAAF;MAEPC,iBAAiB,EAFR,MAAF;MAGPC,UAAU,EAAE;IAHL;EADJ,CAAP;AAOD","sourcesContent":["import { Linking, Platform } from 'react-native';\nimport type { IUseLinkProp } from './types';\nimport type { AccessibilityRole } from 'react-native';\n\nconst linkToHREF = (URL: string) => {\n  Linking.openURL(URL).catch((err) => console.error('An error occurred', err));\n};\n\nconst addOnPressFunctionality = (href: string | any, callback: any) => {\n  href ? linkToHREF(href) : '';\n  callback ? callback() : () => {};\n};\n\nexport function useLink(props: IUseLinkProp) {\n  const { href, isExternal, onPress, _ref } = props;\n\n  let platformLinkProps = {};\n\n  if (Platform.OS === 'web') {\n    platformLinkProps = {\n      href,\n      onClick: onPress,\n    };\n    // Adding target to a tag created by RN-Web\n    if (isExternal && _ref.current) {\n      _ref.current.target = '_blank';\n    }\n  } else {\n    platformLinkProps = {\n      onPress: () => {\n        addOnPressFunctionality(href, onPress);\n      },\n    };\n  }\n\n  return {\n    linkProps: {\n      ...platformLinkProps,\n      accessibilityRole: 'link' as AccessibilityRole,\n      accessible: true,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}