{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport { default as Box } from \"../components/primitives/Box\";\nimport { ResponsiveQueryContext } from \"./useResponsiveQuery/ResponsiveQueryProvider\";\n\nfunction flattenChildren(children) {\n  var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var childrenArray = React.Children.toArray(children);\n  return childrenArray.reduce(function (flatChildren, child, index) {\n    if (child.type === React.Fragment) {\n      return flatChildren.concat(flattenChildren(child.props.children, keys.concat(child.key || index)));\n    }\n\n    if (React.isValidElement(child)) {\n      flatChildren.push(React.cloneElement(child, {\n        key: keys.concat(String(child.key || index)).join('.')\n      }));\n    } else {\n      flatChildren.push(child);\n    }\n\n    return flatChildren;\n  }, []);\n}\n\nvar getSpacedChildren = function getSpacedChildren(children, space, axis, reverse, divider) {\n  var childrenArray = React.Children.toArray(flattenChildren(children));\n  childrenArray = reverse === 'reverse' ? _toConsumableArray(childrenArray).reverse() : childrenArray;\n  var orientation = axis === 'X' ? 'vertical' : 'horizontal';\n  var responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  var disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  if (divider) {\n    var spacingProp = _objectSpread({}, axis === 'X' ? {\n      mx: space\n    } : {\n      my: space\n    });\n\n    divider = React.cloneElement(divider, _objectSpread({\n      orientation: orientation\n    }, spacingProp));\n    childrenArray = childrenArray.map(function (child, index) {\n      var _child$key;\n\n      return React.createElement(React.Fragment, {\n        key: (_child$key = child.key) !== null && _child$key !== void 0 ? _child$key : \"spaced-child-\".concat(index)\n      }, child, index < childrenArray.length - 1 && divider);\n    });\n  } else {\n    var _spacingProp = _objectSpread({}, axis === 'X' ? {\n      width: space\n    } : {\n      height: space\n    });\n\n    childrenArray = childrenArray.map(function (child, index) {\n      var _child$key2;\n\n      return React.createElement(React.Fragment, {\n        key: (_child$key2 = child.key) !== null && _child$key2 !== void 0 ? _child$key2 : \"spaced-child-\".concat(index)\n      }, child, disableCSSMediaQueries ? index < childrenArray.length - 1 && React.createElement(Box, _spacingProp) : React.createElement(React.Fragment, null));\n    });\n  }\n\n  return childrenArray;\n};\n\nexport default getSpacedChildren;","map":{"version":3,"sources":["getSpacedChildren.tsx"],"names":["default","keys","childrenArray","React","child","flatChildren","flattenChildren","key","String","getSpacedChildren","reverse","orientation","axis","responsiveQueryContext","disableCSSMediaQueries","spacingProp","mx","space","my","divider","index","width","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { default as Box } from '../components/primitives/Box';\nimport type { SpaceType as ThemeSpaceType } from '../components/types';\nimport { ResponsiveQueryContext } from './useResponsiveQuery/ResponsiveQueryProvider';\n\ntype SpaceType =\n  | 'gutter'\n  | '2xs'\n  | 'xs'\n  | 'sm'\n  | 'md'\n  | 'lg'\n  | 'xl'\n  | '2xl'\n  | ThemeSpaceType;\n\n// Thanks @gregberge for code and @nandorojo for suggestion.\n// Original source: https://github.com/gregberge/react-flatten-children\ntype ReactChildArray = ReturnType<typeof React.Children.toArray>;\nfunction flattenChildren(\n  children: JSX.Element[] | JSX.Element,\n  keys: (string | number)[] = []\n): ReactChildArray {\n  const childrenArray = React.Children.toArray(children);\n  return childrenArray.reduce(\n    (flatChildren: ReactChildArray, child: any, index: number) => {\n      if ((child as React.ReactElement<any>).type === React.Fragment) {\n        return flatChildren.concat(\n          flattenChildren(\n            (child as React.ReactElement<any>).props.children,\n            keys.concat(child.key || index)\n          )\n        );\n      }\n      if (React.isValidElement(child)) {\n        flatChildren.push(\n          React.cloneElement(child, {\n            key: keys.concat(String(child.key || index)).join('.'),\n          })\n        );\n      } else {\n        flatChildren.push(child);\n      }\n      return flatChildren;\n    },\n    []\n  );\n}\n\nconst getSpacedChildren = (\n  children: JSX.Element[] | JSX.Element,\n  space: undefined | SpaceType,\n  axis: 'X' | 'Y',\n  reverse: string,\n  divider: JSX.Element | undefined\n): any => {\n  let childrenArray = React.Children.toArray(flattenChildren(children));\n  childrenArray =\n    reverse === 'reverse' ? [...childrenArray].reverse() : childrenArray;\n\n  const orientation = axis === 'X' ? 'vertical' : 'horizontal';\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  // If there's a divider, we wrap it with a Box and apply vertical and horizontal margins else we add a spacer Box with height or width\n  if (divider) {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { mx: space } : { my: space }),\n    };\n\n    divider = React.cloneElement(divider, {\n      orientation,\n      ...spacingProp,\n    });\n\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {index < childrenArray.length - 1 && divider}\n        </React.Fragment>\n      );\n    });\n  } else {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { width: space } : { height: space }),\n    };\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {disableCSSMediaQueries ? (\n            index < childrenArray.length - 1 && <Box {...spacingProp} />\n          ) : (\n            <></>\n          )}\n        </React.Fragment>\n      );\n    });\n  }\n\n  return childrenArray;\n};\n\nexport default getSpacedChildren;\n"]},"metadata":{},"sourceType":"module"}