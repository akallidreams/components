{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport base from \"./base\";\nimport components from \"./components\";\nimport * as tools from \"./tools\";\nvar config = {\n  useSystemColorMode: false,\n  initialColorMode: 'light',\n  accessibleColors: false\n};\n\nvar v33xTheme = _objectSpread(_objectSpread({}, base), {}, {\n  components: components,\n  config: config\n});\n\nexport { v33xTheme, tools as themeTools };","map":{"version":3,"sources":["index.ts"],"names":["config","useSystemColorMode","initialColorMode","accessibleColors","v33xTheme","components","tools"],"mappings":";;;;;;AAAA,OAAA,IAAA;AACA,OAAA,UAAA;AACA,OAAO,KAAP,KAAA;AAIA,IAAMA,MAAwB,GAAG;EAC/BC,kBAAkB,EADa,KAAA;EAE/BC,gBAAgB,EAFe,OAAA;EAG/BC,gBAAgB,EAAE;AAHa,CAAjC;;AAMA,IAAMC,SAAS,mCAAG,IAAH;EAEbC,UAFgB,EAEhBA,UAFa;EAGbL,MAAAA,EAAAA;AAHa,EAAf;;AAcA,SAAA,SAAA,EAAoBM,KAAK,IAAzB,UAAA","sourcesContent":["import base from './base';\nimport components from './components';\nimport * as tools from './tools';\n//@ts-ignore\nimport type { ColorModeOptions } from './../core/color-mode/types';\n\nconst config: ColorModeOptions = {\n  useSystemColorMode: false, // TODO: implement this\n  initialColorMode: 'light',\n  accessibleColors: false,\n};\n\nconst v33xTheme = {\n  ...base,\n  components,\n  config,\n};\n\nexport type V33xTheme = typeof v33xTheme & { fontConfig: any };\n\nexport interface ICustomTheme {}\n\nexport interface IV33xTheme\n  extends ICustomTheme,\n    Omit<V33xTheme, keyof ICustomTheme> {}\n\nexport { v33xTheme, tools as themeTools };\n"]},"metadata":{},"sourceType":"module"}