{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"onFocus\", \"onBlur\", \"_stack\", \"_interactionBox\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useSliderThumb } from '@react-native-aria/slider';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { useToken } from \"../../../hooks\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport Box from \"../Box\";\nimport { SliderContext } from \"./Context\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from \"../../../utils\";\nimport { extractInObject, stylingProps } from \"../../../theme/tools/utils\";\nimport { Stack } from \"../Stack\";\nimport { Center } from \"../../composites/Center\";\n\nfunction SliderThumb(props, ref) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isPressed = _React$useState2[0],\n      setIsPressed = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isFocused = _React$useState4[0],\n      setIsFocused = _React$useState4[1];\n\n  var handleFocus = function handleFocus(focusState, callback) {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  var _ref = React.useRef(null);\n\n  var _useHover = useHover({}, _ref),\n      isHovered = _useHover.isHovered;\n\n  var _React$useContext = React.useContext(SliderContext),\n      state = _React$useContext.state,\n      trackLayout = _React$useContext.trackLayout,\n      orientation = _React$useContext.orientation,\n      colorScheme = _React$useContext.colorScheme,\n      thumbSize = _React$useContext.thumbSize,\n      isReadOnly = _React$useContext.isReadOnly,\n      isDisabled = _React$useContext.isDisabled,\n      interactionBoxContext = _React$useContext._interactionBox;\n\n  var _usePropsResolution = usePropsResolution('SliderThumb', _objectSpread({\n    size: thumbSize,\n    _interactionBox: interactionBoxContext,\n    colorScheme: colorScheme\n  }, props), {\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isPressed: isPressed,\n    isFocused: isFocused,\n    isHovered: isHovered\n  }),\n      _onFocus = _usePropsResolution.onFocus,\n      _onBlur = _usePropsResolution.onBlur,\n      _stack = _usePropsResolution._stack,\n      _interactionBox = _usePropsResolution._interactionBox,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  var inputRef = React.useRef(null);\n\n  var _useSliderThumb = useSliderThumb({\n    index: 0,\n    trackLayout: trackLayout,\n    inputRef: inputRef,\n    orientation: orientation\n  }, state),\n      thumbProps = _useSliderThumb.thumbProps,\n      inputProps = _useSliderThumb.inputProps;\n\n  React.useEffect(function () {\n    setIsPressed(state.isThumbDragging(0));\n  }, [state]);\n  var thumbAbsoluteSize = useToken('sizes', resolvedProps.size);\n  var thumbStyles = {\n    bottom: orientation === 'vertical' ? \"\".concat(state.getThumbPercent(0) * 100, \"%\") : undefined,\n    left: orientation !== 'vertical' ? \"\".concat(state.getThumbPercent(0) * 100, \"%\") : undefined,\n    transform: orientation === 'vertical' ? [{\n      translateY: parseInt(thumbAbsoluteSize) / 2\n    }] : [{\n      translateX: -parseInt(thumbAbsoluteSize) / 2\n    }]\n  };\n  thumbStyles.transform.push({\n    scale: state.isThumbDragging(0) ? resolvedProps.scaleOnPressed : 1\n  });\n\n  var _extractInObject = extractInObject(resolvedProps, [].concat(_toConsumableArray(stylingProps.margin), _toConsumableArray(stylingProps.layout), _toConsumableArray(stylingProps.flexbox), _toConsumableArray(stylingProps.position), _toConsumableArray(stylingProps.outline))),\n      _extractInObject2 = _slicedToArray(_extractInObject, 2),\n      layoutProps = _extractInObject2[0],\n      nonLayoutProps = _extractInObject2[1];\n\n  var _extractInObject3 = extractInObject(nonLayoutProps, ['accessibilityRole', 'accessibilityState']),\n      _extractInObject4 = _slicedToArray(_extractInObject3, 2),\n      accessibilityProps = _extractInObject4[0],\n      nonAccessibilityProps = _extractInObject4[1];\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Box, _extends({\n    position: \"absolute\"\n  }, thumbProps, resolvedProps, accessibilityProps, layoutProps, {\n    style: [thumbStyles, resolvedProps.style],\n    onFocus: function onFocus(e) {\n      handleFocus(true, _onFocus ? function () {\n        return _onFocus(e);\n      } : function () {});\n    },\n    onBlur: function onBlur(e) {\n      handleFocus(false, _onBlur ? function () {\n        return _onBlur(e);\n      } : function () {});\n    },\n    ref: mergeRefs([_ref, ref])\n  }), React.createElement(Stack, _stack, React.createElement(Box, _interactionBox), React.createElement(Center, nonAccessibilityProps, props.children, Platform.OS === 'web' && React.createElement(VisuallyHidden, null, React.createElement(\"input\", _extends({\n    ref: inputRef\n  }, inputProps))))));\n}\n\nSliderThumb.displayName = 'SliderThumb';\nexport default forwardRef(SliderThumb);","map":{"version":3,"sources":["SliderThumb.tsx"],"names":["React","handleFocus","setIsFocused","callback","_ref","isHovered","useHover","_interactionBox","interactionBoxContext","resolvedProps","usePropsResolution","size","colorScheme","props","isDisabled","isReadOnly","isPressed","isFocused","inputRef","inputProps","useSliderThumb","index","trackLayout","orientation","setIsPressed","state","thumbAbsoluteSize","useToken","thumbStyles","bottom","left","transform","translateY","parseInt","translateX","scale","extractInObject","stylingProps","useHasResponsiveProps","e","onFocus","onBlur","mergeRefs","Platform","SliderThumb","forwardRef"],"mappings":"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","sourcesContent":["import React, { forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport { useSliderThumb } from '@react-native-aria/slider';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { useToken } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { ISliderThumbProps } from './types';\nimport Box from '../Box';\nimport { SliderContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\n\nfunction SliderThumb(props: ISliderThumbProps, ref: any) {\n  const [isPressed, setIsPressed] = React.useState(false);\n\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const {\n    state,\n    trackLayout,\n    orientation,\n    colorScheme,\n    thumbSize,\n    isReadOnly,\n    isDisabled,\n    _interactionBox: interactionBoxContext,\n  } = React.useContext(SliderContext);\n  const {\n    onFocus,\n    onBlur,\n    _stack,\n    _interactionBox,\n    ...resolvedProps\n  } = usePropsResolution(\n    'SliderThumb',\n    {\n      size: thumbSize,\n      _interactionBox: interactionBoxContext,\n      colorScheme,\n      ...props,\n    },\n    {\n      isDisabled,\n      isReadOnly,\n      isPressed,\n      isFocused,\n      isHovered,\n    }\n  );\n\n  const inputRef = React.useRef(null);\n  const { thumbProps, inputProps } = useSliderThumb(\n    {\n      index: 0,\n      trackLayout,\n      inputRef,\n      orientation,\n    },\n    state\n  );\n\n  React.useEffect(() => {\n    setIsPressed(state.isThumbDragging(0));\n  }, [state]);\n\n  const thumbAbsoluteSize = useToken('sizes', resolvedProps.size);\n\n  const thumbStyles: any = {\n    bottom:\n      orientation === 'vertical'\n        ? `${state.getThumbPercent(0) * 100}%`\n        : undefined,\n    left:\n      orientation !== 'vertical'\n        ? `${state.getThumbPercent(0) * 100}%`\n        : undefined,\n    transform:\n      orientation === 'vertical'\n        ? [{ translateY: parseInt(thumbAbsoluteSize) / 2 }]\n        : [{ translateX: -parseInt(thumbAbsoluteSize) / 2 }],\n  };\n\n  thumbStyles.transform.push({\n    scale: state.isThumbDragging(0) ? resolvedProps.scaleOnPressed : 1,\n  });\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    ...stylingProps.outline,\n  ]);\n\n  const [\n    accessibilityProps,\n    nonAccessibilityProps,\n  ] = extractInObject(nonLayoutProps, [\n    'accessibilityRole',\n    'accessibilityState',\n  ]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      position=\"absolute\"\n      {...thumbProps}\n      {...resolvedProps}\n      {...accessibilityProps}\n      {...layoutProps}\n      style={[thumbStyles, resolvedProps.style]}\n      onFocus={(e: any) => {\n        handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n      }}\n      onBlur={(e: any) => {\n        handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n      }}\n      // {...(isReadOnly && _readOnly)}\n      // {...(isDisabled && _disabled)}\n      ref={mergeRefs([_ref, ref])}\n    >\n      <Stack {..._stack}>\n        <Box {..._interactionBox} />\n        <Center {...nonAccessibilityProps}>\n          {props.children}\n          {Platform.OS === 'web' && (\n            <VisuallyHidden>\n              <input ref={inputRef} {...inputProps} />\n            </VisuallyHidden>\n          )}\n        </Center>\n      </Stack>\n    </Box>\n  );\n}\n\nSliderThumb.displayName = 'SliderThumb';\n\nexport default forwardRef(SliderThumb);\n"]},"metadata":{},"sourceType":"module"}