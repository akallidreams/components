{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"wrapperRef\", \"isDisabled\", \"isInvalid\", \"isReadOnly\", \"isFocused\", \"isHovered\"],\n    _excluded2 = [\"totalLines\", \"onFocus\", \"onBlur\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Input } from \"../Input\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from \"../../../utils\";\n\nvar TextArea = function TextArea(_ref2, ref) {\n  var wrapperRef = _ref2.wrapperRef,\n      isDisabled = _ref2.isDisabled,\n      isInvalid = _ref2.isInvalid,\n      isReadOnly = _ref2.isReadOnly,\n      isFocusedProp = _ref2.isFocused,\n      isHoveredProp = _ref2.isHovered,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var _ref = React.useRef(null);\n\n  var _useHover = useHover({}, _ref),\n      isHovered = _useHover.isHovered;\n\n  var _React$useState = React.useState(isFocusedProp),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isFocused = _React$useState2[0],\n      setIsFocused = _React$useState2[1];\n\n  var handleFocus = function handleFocus(focusState, callback) {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  var _usePropsResolution = usePropsResolution('TextArea', props, {\n    isHovered: isHoveredProp || isHovered,\n    isDisabled: isDisabled,\n    isFocused: isFocused,\n    isInvalid: isInvalid,\n    isReadOnly: isReadOnly\n  }, {\n    extendTheme: ['Input']\n  }),\n      totalLines = _usePropsResolution.totalLines,\n      _onFocus = _usePropsResolution.onFocus,\n      _onBlur = _usePropsResolution.onBlur,\n      newProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Input, _extends({}, newProps, {\n    INTERNAL_notResolveThemeAndPseudoProps: true,\n    numberOfLines: totalLines,\n    wrapperRef: wrapperRef,\n    ref: mergeRefs([_ref, ref]),\n    onFocus: function onFocus(e) {\n      handleFocus(true, _onFocus ? function () {\n        return _onFocus(e);\n      } : function () {});\n    },\n    onBlur: function onBlur(e) {\n      handleFocus(false, _onBlur ? function () {\n        return _onBlur(e);\n      } : function () {});\n    },\n    isDisabled: isDisabled,\n    isInvalid: isInvalid,\n    isReadOnly: isReadOnly\n  }));\n};\n\nexport default memo(forwardRef(TextArea));","map":{"version":3,"sources":["index.tsx"],"names":["TextArea","isFocused","isHovered","props","_ref","React","useHover","handleFocus","setIsFocused","callback","newProps","usePropsResolution","isHoveredProp","isDisabled","isInvalid","isReadOnly","extendTheme","useHasResponsiveProps","mergeRefs","e","onFocus","onBlur","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,KAAA;AAEA,SAAA,kBAAA;AACA,SAAA,qBAAA;AACA,SAAA,QAAA,QAAA,iCAAA;AACA,SAAA,SAAA;;AAcA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,QAAA,GAAA,EAWZ;EAAA,IAVH,UAUG,SAVH,UAUG;EAAA,IAVH,UAUG,SAVH,UAUG;EAAA,IAVH,SAUG,SAVH,SAUG;EAAA,IAVH,UAUG,SAVH,UAUG;EAAA,IAVH,aAUG,SALDC,SAKC;EAAA,IAVH,aAUG,SAJDC,SAIC;EAAA,IAHEC,KAGF;;EACH,IAAMC,IAAI,GAAGC,KAAK,CAALA,MAAAA,CAAb,IAAaA,CAAb;;EACA,gBAAsBC,QAAQ,CAAA,EAAA,EAA9B,IAA8B,CAA9B;EAAA,IAAQJ,SAAR,aAAQA,SAAR;;EACA,sBAAkCG,KAAK,CAALA,QAAAA,CAAlC,aAAkCA,CAAlC;EAAA;EAAA,IAAM,SAAN;EAAA,IAAM,YAAN;;EACA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAAA,UAAA,EAAA,QAAA,EAAwC;IAC1DC,YAAY,CAAZA,UAAY,CAAZA;IACAC,QAAQ;EAFV,CAAA;;EAIA,0BAAqDE,kBAAkB,CAAA,UAAA,EAAA,KAAA,EAGrE;IACET,SAAS,EAAEU,aAAa,IAD1B,SAAA;IAEEC,UAFF,EAEEA,UAFF;IAGEZ,SAHF,EAGEA,SAHF;IAIEa,SAJF,EAIEA,SAJF;IAKEC,UAAAA,EAAAA;EALF,CAHqE,EAUrE;IAAEC,WAAW,EAAE,CAAA,OAAA;EAAf,CAVqE,CAAvE;EAAA,IAAM,UAAN,uBAAM,UAAN;EAAA,IAAM,QAAN,uBAAM,OAAN;EAAA,IAAM,OAAN,uBAAM,MAAN;EAAA,IAAwCN,QAAxC;;EAaA,IAAIO,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EACD,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAA,QAAA,EAAA;IAEE,sCAAsC,EAFxC,IAAA;IAGE,aAAa,EAHf,UAAA;IAIE,UAAU,EAJZ,UAAA;IAKE,GAAG,EAAEC,SAAS,CAAC,CAAA,IAAA,EALjB,GAKiB,CAAD,CALhB;IAME,OAAO,EAAGC,iBAAAA,CAAD,EAAO;MACdZ,WAAW,CAAA,IAAA,EAAOa,QAAO,GAAG;QAAA,OAAMA,QAAO,CAAhB,CAAgB,CAAb;MAAA,CAAH,GAAsB,YAAM,CAArDb,CAAW,CAAXA;IAPJ,CAAA;IASE,MAAM,EAAGY,gBAAAA,CAAD,EAAO;MACbZ,WAAW,CAAA,KAAA,EAAQc,OAAM,GAAG;QAAA,OAAMA,OAAM,CAAf,CAAe,CAAZ;MAAA,CAAH,GAAqB,YAAM,CAApDd,CAAW,CAAXA;IAVJ,CAAA;IAYE,UAAU,EAZZ,UAAA;IAaE,SAAS,EAbX,SAAA;IAcE,UAAU,EAAEQ;EAdd,CAAA,CAAA,CADF;AAnCF,CAAA;;AAuDA,eAAeO,IAAI,CAACC,UAAU,CAA9B,QAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Input } from '../Input';\nimport type { InterfaceInputProps } from '../Input/types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport type { PlatformProps } from '../../../components/types';\nexport interface ITextAreaProps\n  extends Omit<\n      InterfaceInputProps,\n      '_web' | '_android' | '_ios' | '_light' | '_dark' | '_important'\n    >,\n    PlatformProps<ITextAreaProps> {\n  /**\n   * Maps to react-native TextInput's numberOfLines.\n   */\n  totalLines?: number;\n}\n\nconst TextArea = (\n  {\n    wrapperRef,\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    isFocused: isFocusedProp,\n    isHovered: isHoveredProp,\n    ...props\n  }: ITextAreaProps,\n  ref: any\n) => {\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n  const [isFocused, setIsFocused] = React.useState(isFocusedProp);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n  const { totalLines, onFocus, onBlur, ...newProps } = usePropsResolution(\n    'TextArea',\n    props,\n    {\n      isHovered: isHoveredProp || isHovered,\n      isDisabled,\n      isFocused,\n      isInvalid,\n      isReadOnly,\n    },\n    { extendTheme: ['Input'] }\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Input\n      {...newProps}\n      INTERNAL_notResolveThemeAndPseudoProps\n      numberOfLines={totalLines}\n      wrapperRef={wrapperRef}\n      ref={mergeRefs([_ref, ref])}\n      onFocus={(e) => {\n        handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n      }}\n      onBlur={(e) => {\n        handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n      }}\n      isDisabled={isDisabled}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n    />\n  );\n};\n\nexport default memo(forwardRef(TextArea));\n"]},"metadata":{},"sourceType":"module"}