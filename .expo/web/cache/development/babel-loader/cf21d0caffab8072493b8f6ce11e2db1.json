{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"isDisabled\", \"isInvalid\", \"isChecked\", \"defaultIsChecked\", \"accessibilityLabel\", \"accessibilityHint\", \"onToggle\", \"value\", \"onValueChange\", \"isHovered\"],\n    _excluded2 = [\"onTrackColor\", \"offTrackColor\", \"onThumbColor\", \"offThumbColor\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { useToggleState } from '@react-stately/toggle';\nimport RNSwitch from \"react-native-web/dist/exports/Switch\";\nimport isNil from 'lodash.isnil';\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useToken } from \"../../../hooks\";\nimport { makeStyledComponent } from \"../../../utils/styled\";\nimport { mergeRefs } from \"../../../utils\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useFormControlContext } from \"../../composites/FormControl\";\nimport { combineContextAndProps } from \"../../../utils\";\nvar StyledNBSwitch = makeStyledComponent(RNSwitch);\n\nvar Switch = function Switch(_ref2, ref) {\n  var disabled = _ref2.disabled,\n      isDisabled = _ref2.isDisabled,\n      isInvalid = _ref2.isInvalid,\n      isChecked = _ref2.isChecked,\n      defaultIsChecked = _ref2.defaultIsChecked,\n      accessibilityLabel = _ref2.accessibilityLabel,\n      accessibilityHint = _ref2.accessibilityHint,\n      onToggle = _ref2.onToggle,\n      value = _ref2.value,\n      _onValueChange = _ref2.onValueChange,\n      isHoveredProp = _ref2.isHovered,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var formControlContext = useFormControlContext();\n  var combinedProps = combineContextAndProps(formControlContext, props);\n  var state = useToggleState({\n    defaultSelected: !isNil(defaultIsChecked) ? defaultIsChecked : false\n  });\n  var checked = !isNil(isChecked) ? isChecked : state.isSelected;\n\n  var _ref = React.useRef(null);\n\n  var _useHover = useHover({}, _ref),\n      isHovered = _useHover.isHovered;\n\n  var _usePropsResolution = usePropsResolution('Switch', props, {\n    isHovered: isHoveredProp || isHovered,\n    isDisabled: disabled || isDisabled || combinedProps.isDisabled,\n    isInvalid: isInvalid || combinedProps.isInvalid,\n    isChecked: checked\n  }),\n      _onTrackColor = _usePropsResolution.onTrackColor,\n      _offTrackColor = _usePropsResolution.offTrackColor,\n      _onThumbColor = _usePropsResolution.onThumbColor,\n      _offThumbColor = _usePropsResolution.offThumbColor,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var onTrackColor = useToken('colors', _onTrackColor);\n  var offTrackColor = useToken('colors', _offTrackColor);\n  var onThumbColor = useToken('colors', _onThumbColor);\n  var offThumbColor = useToken('colors', _offThumbColor);\n\n  if (useHasResponsiveProps(_objectSpread(_objectSpread({}, props), {}, {\n    isDisabled: isDisabled,\n    isInvalid: isInvalid,\n    isChecked: isChecked,\n    defaultIsChecked: defaultIsChecked,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityHint: accessibilityHint\n  }))) {\n    return null;\n  }\n\n  return React.createElement(StyledNBSwitch, _extends({\n    accessibilityLabel: accessibilityLabel,\n    accessibilityHint: accessibilityHint,\n    trackColor: {\n      false: offTrackColor,\n      true: onTrackColor\n    },\n    thumbColor: checked ? onThumbColor : offThumbColor,\n    activeThumbColor: onThumbColor,\n    ios_backgroundColor: offTrackColor\n  }, resolvedProps, {\n    disabled: disabled || isDisabled || combinedProps.isDisabled,\n    onValueChange: function onValueChange(val) {\n      _onValueChange && _onValueChange(val);\n      onToggle ? onToggle() : state.toggle();\n    },\n    value: value || checked,\n    ref: mergeRefs([ref, _ref])\n  }));\n};\n\nexport default memo(forwardRef(Switch));","map":{"version":3,"sources":["index.tsx"],"names":["StyledNBSwitch","makeStyledComponent","Switch","isHovered","props","formControlContext","useFormControlContext","combinedProps","combineContextAndProps","state","useToggleState","defaultSelected","isNil","checked","_ref","React","useHover","onTrackColor","offTrackColor","onThumbColor","offThumbColor","resolvedProps","usePropsResolution","isHoveredProp","isDisabled","disabled","isInvalid","isChecked","useToken","useHasResponsiveProps","defaultIsChecked","accessibilityLabel","accessibilityHint","false","true","val","onValueChange","onToggle","value","mergeRefs","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToggleState } from '@react-stately/toggle';\nimport { Switch as RNSwitch } from 'react-native';\nimport isNil from 'lodash.isnil';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useToken } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport type { ISwitchProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport { combineContextAndProps } from '../../../utils';\n\nconst StyledNBSwitch = makeStyledComponent(RNSwitch);\n\n// TODO: Needs proper refactor\nconst Switch = (\n  {\n    disabled,\n    isDisabled,\n    isInvalid,\n    isChecked,\n    defaultIsChecked,\n    accessibilityLabel,\n    accessibilityHint,\n    onToggle,\n    value,\n    onValueChange,\n    isHovered: isHoveredProp,\n    ...props\n  }: ISwitchProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const combinedProps = combineContextAndProps(formControlContext, props);\n\n  const state = useToggleState({\n    defaultSelected: !isNil(defaultIsChecked) ? defaultIsChecked : false,\n  });\n  const checked = !isNil(isChecked) ? isChecked : state.isSelected;\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const {\n    onTrackColor: _onTrackColor,\n    offTrackColor: _offTrackColor,\n    onThumbColor: _onThumbColor,\n    offThumbColor: _offThumbColor,\n    ...resolvedProps\n  } = usePropsResolution('Switch', props, {\n    isHovered: isHoveredProp || isHovered,\n    isDisabled: disabled || isDisabled || combinedProps.isDisabled,\n    isInvalid: isInvalid || combinedProps.isInvalid,\n    isChecked: checked,\n  });\n\n  const onTrackColor = useToken('colors', _onTrackColor);\n  const offTrackColor = useToken('colors', _offTrackColor);\n  const onThumbColor = useToken('colors', _onThumbColor);\n  const offThumbColor = useToken('colors', _offThumbColor);\n\n  //TODO: refactor for responsive prop\n  if (\n    useHasResponsiveProps({\n      ...props,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      defaultIsChecked,\n      accessibilityLabel,\n      accessibilityHint,\n    })\n  ) {\n    return null;\n  }\n  return (\n    <StyledNBSwitch\n      accessibilityLabel={accessibilityLabel}\n      accessibilityHint={accessibilityHint}\n      trackColor={{ false: offTrackColor, true: onTrackColor }}\n      thumbColor={checked ? onThumbColor : offThumbColor}\n      activeThumbColor={onThumbColor} // react-native-web prop for active thumbColor\n      ios_backgroundColor={offTrackColor}\n      {...resolvedProps}\n      disabled={disabled || isDisabled || combinedProps.isDisabled}\n      onValueChange={(val: boolean) => {\n        onValueChange && onValueChange(val);\n        onToggle ? onToggle() : state.toggle();\n      }}\n      value={value || checked}\n      ref={mergeRefs([ref, _ref])}\n    />\n  );\n};\n\nexport default memo(forwardRef(Switch));\nexport type { ISwitchProps };\n"]},"metadata":{},"sourceType":"module"}