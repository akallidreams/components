{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"isDisabled\"],\n    _excluded2 = [\"numberInputValue\", \"step\", \"max\", \"handleChange\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { NBStepper } from \"./NumberInputStepper\";\nimport { NumberInputContext } from \"./Context\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar NumberIncrementStepper = function NumberIncrementStepper(_ref, ref) {\n  var children = _ref.children,\n      pIsDisabled = _ref.isDisabled,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useContext = React.useContext(NumberInputContext),\n      _React$useContext$num = _React$useContext.numberInputValue,\n      numberInputValue = _React$useContext$num === void 0 ? 0 : _React$useContext$num,\n      _React$useContext$ste = _React$useContext.step,\n      step = _React$useContext$ste === void 0 ? 1 : _React$useContext$ste,\n      _React$useContext$max = _React$useContext.max,\n      max = _React$useContext$max === void 0 ? +Infinity : _React$useContext$max,\n      handleChange = _React$useContext.handleChange,\n      context = _objectWithoutProperties(_React$useContext, _excluded2);\n\n  var isDisabled = pIsDisabled || context.isDisabled;\n\n  var pressHandler = function pressHandler() {\n    handleChange && handleChange(numberInputValue + step);\n  };\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(NBStepper, _extends({\n    isIncrement: true,\n    isDisabled: isDisabled,\n    pressHandler: pressHandler,\n    disablitityCheck: numberInputValue + step > max\n  }, props, {\n    ref: ref\n  }), children);\n};\n\nexport default React.memo(React.forwardRef(NumberIncrementStepper));","map":{"version":3,"sources":["NumberIncrementStepper.tsx"],"names":["NumberIncrementStepper","isDisabled","props","numberInputValue","step","max","context","React","pIsDisabled","pressHandler","handleChange","useHasResponsiveProps","ref"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AAEA,SAAA,SAAA;AACA,SAAA,kBAAA;AACA,SAAA,qBAAA;;AAEA,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB,OAAA,GAAA,EAG1B;EAAA,IAFH,QAEG,QAFH,QAEG;EAAA,IAFH,WAEG,QAFSC,UAET;EAAA,IAFqCC,KAErC;;EACH,wBAMyBK,KAAK,CAALA,UAAAA,CANzB,kBAMyBA,CANzB;EAAA,8CACEJ,gBADF;EAAA,IACEA,gBADF,sCAAM,CAAN;EAAA,8CAEEC,IAFF;EAAA,IAEEA,IAFF,sCAAM,CAAN;EAAA,8CAGEC,GAHF;EAAA,IAGEA,GAHF,sCAGQ,CAHF,QAAN;EAAA,IAAM,YAAN,qBAAM,YAAN;EAAA,IAKKC,OALL;;EAQA,IAAML,UAAU,GAAGO,WAAW,IAAIF,OAAO,CAAzC,UAAA;;EACA,IAAMG,YAAY,GAAG,SAAfA,YAAe,GAAM;IACzBC,YAAY,IAAIA,YAAY,CAACP,gBAAgB,GAA7CO,IAA4B,CAA5BA;EAXC,CAUH;;EAIA,IAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EACD,OACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;IACE,WAAW,EADb,IAAA;IAEE,UAAU,EAFZ,UAAA;IAGE,YAAY,EAHd,YAAA;IAIE,gBAAgB,EAAER,gBAAgB,GAAhBA,IAAAA,GAA0BE;EAJ9C,CAAA,EAAA,KAAA,EAAA;IAME,GAAG,EAAEO;EANP,CAAA,CAAA,EADF,QACE,CADF;AApBF,CAAA;;AAiCA,eAAeL,KAAK,CAALA,IAAAA,CAAWA,KAAK,CAALA,UAAAA,CAA1B,sBAA0BA,CAAXA,CAAf","sourcesContent":["import React from 'react';\nimport type { INumberInputContext, INumberInputStepperProps } from './types';\nimport { NBStepper } from './NumberInputStepper';\nimport { NumberInputContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst NumberIncrementStepper = (\n  { children, isDisabled: pIsDisabled, ...props }: INumberInputStepperProps,\n  ref?: any\n) => {\n  const {\n    numberInputValue = 0,\n    step = 1,\n    max = +Infinity,\n    handleChange,\n    ...context\n  }: INumberInputContext = React.useContext(NumberInputContext);\n\n  const isDisabled = pIsDisabled || context.isDisabled;\n  const pressHandler = () => {\n    handleChange && handleChange(numberInputValue + step);\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <NBStepper\n      isIncrement\n      isDisabled={isDisabled}\n      pressHandler={pressHandler}\n      disablitityCheck={numberInputValue + step > max}\n      {...props}\n      ref={ref}\n    >\n      {children}\n    </NBStepper>\n  );\n};\nexport default React.memo(React.forwardRef(NumberIncrementStepper));\n"]},"metadata":{},"sourceType":"module"}