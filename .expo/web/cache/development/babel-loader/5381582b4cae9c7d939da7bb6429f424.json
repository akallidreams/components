{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"size\", \"colorScheme\", \"_radio\", \"children\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Stack } from \"../Stack\";\nimport { useFormControlContext } from \"../../composites/FormControl\";\nimport { useRadioGroupState } from '@react-stately/radio';\nimport { useRadioGroup } from '@react-native-aria/radio';\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nexport var RadioContext = React.createContext({});\nvar RadioWrapper = memo(function (props) {\n  var resolvedProps = usePropsResolution('RadioGroup', props);\n  return React.createElement(Stack, _extends({}, resolvedProps, props.radioGroupProps, props));\n});\n\nvar RadioGroup = function RadioGroup(_ref, ref) {\n  var size = _ref.size,\n      colorScheme = _ref.colorScheme,\n      _radio = _ref._radio,\n      children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var formControlContext = useFormControlContext();\n  var state = useRadioGroupState(props);\n  var radioGroupState = useRadioGroup(_objectSpread(_objectSpread(_objectSpread({}, formControlContext), props), {}, {\n    'aria-label': props.accessibilityLabel\n  }), state);\n\n  var _React$useState = React.useState(props),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      propsState = _React$useState2[0];\n\n  var contextValue = React.useMemo(function () {\n    return _objectSpread(_objectSpread({\n      formControlContext: formControlContext,\n      size: size,\n      colorScheme: colorScheme\n    }, _radio), {}, {\n      state: state\n    });\n  }, [size, colorScheme, formControlContext, state, _radio]);\n  var radioGroupProps = React.useMemo(function () {\n    return radioGroupState.radioGroupProps;\n  }, []);\n\n  if (useHasResponsiveProps(_objectSpread(_objectSpread({}, props), {}, {\n    size: size,\n    colorScheme: colorScheme\n  }))) {\n    return null;\n  }\n\n  return React.createElement(RadioContext.Provider, {\n    value: contextValue\n  }, React.createElement(RadioWrapper, _extends({}, radioGroupProps, propsState, {\n    ref: ref\n  }), children));\n};\n\nexport default memo(forwardRef(RadioGroup));","map":{"version":3,"sources":["RadioGroup.tsx"],"names":["RadioContext","React","RadioWrapper","memo","props","resolvedProps","usePropsResolution","RadioGroup","formControlContext","useFormControlContext","state","useRadioGroupState","radioGroupState","useRadioGroup","accessibilityLabel","contextValue","size","colorScheme","radioGroupProps","useHasResponsiveProps","ref","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,KAAA;AACA,SAAA,qBAAA;AAEA,SAAA,kBAAA,QAAA,sBAAA;AACA,SAAA,aAAA,QAAA,0BAAA;AACA,SAAA,qBAAA;AACA,SAAA,kBAAA;AAEA,OAAO,IAAMA,YAAY,GAAGC,KAAK,CAALA,aAAAA,CAArB,EAAqBA,CAArB;AAGP,IAAMC,YAAY,GAAGC,IAAI,CAAEC,UAAAA,KAAD,EAAgB;EACxC,IAAMC,aAAa,GAAGC,kBAAkB,CAAA,YAAA,EAAxC,KAAwC,CAAxC;EACA,OAAO,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAA,aAAA,EAA8BF,KAAK,CAAnC,eAAA,EAAP,KAAO,CAAA,CAAP;AAFF,CAAyB,CAAzB;;AAKA,IAAMG,UAAU,GAAG,SAAbA,UAAa,OAAA,GAAA,EAGd;EAAA,IAFH,IAEG,QAFH,IAEG;EAAA,IAFH,WAEG,QAFH,WAEG;EAAA,IAFH,MAEG,QAFH,MAEG;EAAA,IAFH,QAEG,QAFH,QAEG;EAAA,IAFuCH,KAEvC;;EACH,IAAMI,kBAAkB,GAAGC,qBAA3B,EAAA;EAEA,IAAMC,KAAK,GAAGC,kBAAkB,CAAhC,KAAgC,CAAhC;EACA,IAAMC,eAAe,GAAGC,aAAa,+CACnC,kBADmC,GACnC,KADmC;IACA,cAAcT,KAAK,CAACU;EADpB,IAArC,KAAqC,CAArC;;EAIA,sBAAqBb,KAAK,CAALA,QAAAA,CAArB,KAAqBA,CAArB;EAAA;EAAA,IAAM,UAAN;;EACA,IAAMc,YAAiB,GAAG,KAAK,CAAL,OAAA,CAAc,YAAM;IAC5C;MACEP,kBADK,EACLA,kBADF;MAEEQ,IAFK,EAELA,IAFF;MAGEC,WAHK,EAGLA;IAHF,GAAO,MAAP;MAKEP,KAAAA,EAAAA;IALF;EADwB,CAAA,EAQvB,CAAA,IAAA,EAAA,WAAA,EAAA,kBAAA,EAAA,KAAA,EARH,MAQG,CARuB,CAA1B;EAUA,IAAMQ,eAAe,GAAG,KAAK,CAAL,OAAA,CACtB;IAAA,OAAMN,eAAe,CADC,eACtB;EAAA,CADsB,EAnBrB,EAmBqB,CAAxB;;EAOA,IAAIO,qBAAqB,iCAAC,KAAD;IAAaH,IAAZ,EAAYA,IAAb;IAAmBC,WAAAA,EAAAA;EAAnB,GAAzB,EAA4D;IAC1D,OAAA,IAAA;EACD;;EAED,OACE,KAAA,CAAA,aAAA,CAAC,YAAD,CAAA,QAAA,EAAA;IAAuB,KAAK,EAAEF;EAA9B,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA,QAAA,CAAA,EAAA,EAAA,eAAA,EAAA,UAAA,EAAA;IAAmD,GAAG,EAAEK;EAAxD,CAAA,CAAA,EAFJ,QAEI,CADF,CADF;AAjCF,CAAA;;AA0CA,eAAejB,IAAI,CAACkB,UAAU,CAA9B,UAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Stack } from '../Stack';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport type { IRadioContext, IRadioGroupProps } from './types';\nimport { useRadioGroupState } from '@react-stately/radio';\nimport { useRadioGroup } from '@react-native-aria/radio';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\n\nexport const RadioContext = React.createContext<IRadioContext>(\n  {} as IRadioContext\n);\nconst RadioWrapper = memo((props: any) => {\n  const resolvedProps = usePropsResolution('RadioGroup', props);\n  return <Stack {...resolvedProps} {...props.radioGroupProps} {...props} />;\n});\n\nconst RadioGroup = (\n  { size, colorScheme, _radio, children, ...props }: IRadioGroupProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const state = useRadioGroupState(props);\n  const radioGroupState = useRadioGroup(\n    { ...formControlContext, ...props, 'aria-label': props.accessibilityLabel },\n    state\n  );\n  const [propsState] = React.useState(props);\n  const contextValue: any = React.useMemo(() => {\n    return {\n      formControlContext,\n      size,\n      colorScheme,\n      ..._radio,\n      state,\n    };\n  }, [size, colorScheme, formControlContext, state, _radio]);\n\n  const radioGroupProps = React.useMemo(\n    () => radioGroupState.radioGroupProps,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, size, colorScheme })) {\n    return null;\n  }\n\n  return (\n    <RadioContext.Provider value={contextValue}>\n      <RadioWrapper {...radioGroupProps} {...propsState} ref={ref}>\n        {children}\n      </RadioWrapper>\n    </RadioContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(RadioGroup));\n"]},"metadata":{},"sourceType":"module"}