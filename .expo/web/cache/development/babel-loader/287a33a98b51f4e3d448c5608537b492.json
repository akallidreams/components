{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"color\", \"size\", \"style\", \"testID\"];\nimport React, { memo, forwardRef } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { usePropsResolution, useStyledSystemPropsResolver } from \"../../../hooks\";\nimport { getColor } from \"../../../theme\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useTheme } from \"../../../hooks\";\n\nvar Spinner = function Spinner(props, ref) {\n  var _usePropsResolution = usePropsResolution('Spinner', props),\n      color = _usePropsResolution.color,\n      size = _usePropsResolution.size,\n      style = _usePropsResolution.style,\n      testID = _usePropsResolution.testID,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  var resolvedColor = getColor(color, useTheme().colors, useTheme());\n  var resolvedStyle = useStyledSystemPropsResolver(resolvedProps);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(ActivityIndicator, {\n    testID: testID,\n    accessible: true,\n    accessibilityLabel: \"loading\",\n    color: resolvedColor,\n    ref: ref,\n    size: size,\n    style: [resolvedStyle, style]\n  });\n};\n\nexport default memo(forwardRef(Spinner));","map":{"version":3,"sources":["index.tsx"],"names":["Spinner","resolvedProps","usePropsResolution","resolvedColor","getColor","useTheme","resolvedStyle","useStyledSystemPropsResolver","useHasResponsiveProps","memo","forwardRef"],"mappings":";;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;;AAEA,SAAA,kBAAA,EAAA,4BAAA;AAIA,SAAA,QAAA;AAEA,SAAA,qBAAA;AACA,SAAA,QAAA;;AAEA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAAA,KAAA,EAAA,GAAA,EAAoC;EAClD,0BAAyDE,kBAAkB,CAAA,SAAA,EAA3E,KAA2E,CAA3E;EAAA,IAAM,KAAN,uBAAM,KAAN;EAAA,IAAM,IAAN,uBAAM,IAAN;EAAA,IAAM,KAAN,uBAAM,KAAN;EAAA,IAAM,MAAN,uBAAM,MAAN;EAAA,IAAuCD,aAAvC;;EAIA,IAAME,aAAa,GAAGC,QAAQ,CAAA,KAAA,EAAQC,QAAQ,GAAhB,MAAA,EAA2BA,QAAzD,EAA8B,CAA9B;EACA,IAAMC,aAAa,GAAGC,4BAA4B,CANA,aAMA,CAAlD;;EAEA,IAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EAED,OACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA;IACE,MAAM,EADR,MAAA;IAEE,UAAU,EAFZ,IAAA;IAGE,kBAAkB,EAHpB,SAAA;IAIE,KAAK,EAJP,aAAA;IAKE,GAAG,EALL,GAAA;IAME,IAAI,EANN,IAAA;IAOE,KAAK,EAAE,CAAA,aAAA,EAAA,KAAA;EAPT,CAAA,CADF;AAZF,CAAA;;AAyBA,eAAeC,IAAI,CAACC,UAAU,CAA9B,OAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ActivityIndicator } from 'react-native';\nimport {\n  usePropsResolution,\n  useStyledSystemPropsResolver,\n} from '../../../hooks';\nimport { getColor } from '../../../theme';\nimport type { ISpinnerProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useTheme } from '../../../hooks';\n\nconst Spinner = (props: ISpinnerProps, ref: any) => {\n  const { color, size, style, testID, ...resolvedProps } = usePropsResolution(\n    'Spinner',\n    props\n  );\n  const resolvedColor = getColor(color, useTheme().colors, useTheme());\n  const resolvedStyle = useStyledSystemPropsResolver(resolvedProps);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <ActivityIndicator\n      testID={testID}\n      accessible\n      accessibilityLabel=\"loading\"\n      color={resolvedColor}\n      ref={ref}\n      size={size}\n      style={[resolvedStyle, style]}\n    />\n  );\n};\n\nexport default memo(forwardRef(Spinner));\nexport type { ISpinnerProps };\n"]},"metadata":{},"sourceType":"module"}