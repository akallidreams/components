{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport React from 'react';\nexport var getResponsiveStylesImpl = function getResponsiveStylesImpl(width) {\n  return function (queries) {\n    if (typeof width === 'number') {\n      var styles = queries.initial ? [StyleSheet.create({\n        initial: StyleSheet.flatten(queries.initial)\n      }).initial] : [];\n\n      if (queries.query) {\n        queries.query.forEach(function (queryRule) {\n          if (queryRule.style) {\n            var flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n\n            if (typeof queryRule.maxWidth === 'number' && typeof queryRule.minWidth === 'number') {\n              if (width >= queryRule.minWidth && width <= queryRule.maxWidth) {\n                styles.push(StyleSheet.create({\n                  rangeStyle: flattenQueryStyle\n                }).rangeStyle);\n              }\n            } else if (typeof queryRule.minWidth === 'number') {\n              if (width >= queryRule.minWidth) {\n                styles.push(StyleSheet.create({\n                  minWidthStyle: flattenQueryStyle\n                }).minWidthStyle);\n              }\n            } else if (typeof queryRule.maxWidth === 'number') {\n              if (width <= queryRule.maxWidth) {\n                styles.push(StyleSheet.create({\n                  maxWidthStyle: flattenQueryStyle\n                }).maxWidthStyle);\n              }\n            }\n          }\n        });\n        return {\n          styles: styles\n        };\n      }\n    }\n\n    return {};\n  };\n};\nexport var useDimensionsWithEnable = function useDimensionsWithEnable(_ref) {\n  var enable = _ref.enable;\n\n  var _React$useState = React.useState(function () {\n    return Dimensions.get('window');\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dimensions = _React$useState2[0],\n      setDimensions = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (enable) {\n      function handleChange(_ref2) {\n        var window = _ref2.window;\n\n        if (dimensions.width !== window.width || dimensions.height !== window.height || dimensions.scale !== window.scale || dimensions.fontScale !== window.fontScale) {\n          setDimensions(window);\n        }\n      }\n\n      Dimensions.addEventListener('change', handleChange);\n      handleChange({\n        window: Dimensions.get('window')\n      });\n      return function () {\n        Dimensions.removeEventListener('change', handleChange);\n      };\n    }\n\n    return function () {};\n  }, [dimensions, enable]);\n  return dimensions;\n};","map":{"version":3,"sources":["common.ts"],"names":["getResponsiveStylesImpl","width","queries","styles","initial","StyleSheet","queryRule","flattenQueryStyle","rangeStyle","minWidthStyle","maxWidthStyle","useDimensionsWithEnable","enable","React","Dimensions","window","dimensions","setDimensions","handleChange"],"mappings":"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","sourcesContent":["import type {\n  GetResponsiveStylesParams,\n  GetResponsiveStylesReturnType,\n} from './types';\nimport { Dimensions, ScaledSize, StyleSheet } from 'react-native';\nimport React from 'react';\n\nexport const getResponsiveStylesImpl = (width: number) => (\n  queries: GetResponsiveStylesParams\n): GetResponsiveStylesReturnType => {\n  if (typeof width === 'number') {\n    let styles = queries.initial\n      ? [\n          StyleSheet.create({ initial: StyleSheet.flatten(queries.initial) })\n            .initial,\n        ]\n      : [];\n\n    if (queries.query) {\n      queries.query.forEach((queryRule) => {\n        if (queryRule.style) {\n          const flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n\n          if (\n            typeof queryRule.maxWidth === 'number' &&\n            typeof queryRule.minWidth === 'number'\n          ) {\n            if (width >= queryRule.minWidth && width <= queryRule.maxWidth) {\n              styles.push(\n                StyleSheet.create({ rangeStyle: flattenQueryStyle }).rangeStyle\n              );\n            }\n          } else if (typeof queryRule.minWidth === 'number') {\n            if (width >= queryRule.minWidth) {\n              styles.push(\n                StyleSheet.create({ minWidthStyle: flattenQueryStyle })\n                  .minWidthStyle\n              );\n            }\n          } else if (typeof queryRule.maxWidth === 'number') {\n            if (width <= queryRule.maxWidth) {\n              styles.push(\n                StyleSheet.create({ maxWidthStyle: flattenQueryStyle })\n                  .maxWidthStyle\n              );\n            }\n          }\n        }\n      });\n      return { styles };\n    }\n  }\n\n  return {};\n};\n\n// The below implementation is taken from React Native's source and added a flag to conditionally attach/remove listeners\nexport const useDimensionsWithEnable = ({ enable }: { enable?: boolean }) => {\n  const [dimensions, setDimensions] = React.useState(() =>\n    Dimensions.get('window')\n  );\n\n  React.useEffect(() => {\n    if (enable) {\n      function handleChange({ window }: { window: ScaledSize }) {\n        if (\n          dimensions.width !== window.width ||\n          dimensions.height !== window.height ||\n          dimensions.scale !== window.scale ||\n          dimensions.fontScale !== window.fontScale\n        ) {\n          setDimensions(window);\n        }\n      }\n      Dimensions.addEventListener('change', handleChange);\n      // We might have missed an update between calling `get` in render and\n      // `addEventListener` in this handler, so we set it here. If there was\n      // no change, React will filter out this update as a no-op.\n      handleChange({ window: Dimensions.get('window') });\n\n      return () => {\n        Dimensions.removeEventListener('change', handleChange);\n      };\n    }\n    return () => {};\n  }, [dimensions, enable]);\n  return dimensions;\n};\n"]},"metadata":{},"sourceType":"module"}