{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nimport { memo } from 'react';\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useBreakpointValue, useTheme, useToken } from \"../../../hooks\";\nimport { useColorMode } from \"../../../core/color-mode/hooks\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport function Hidden(_ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _usePropsResolution = usePropsResolution('Hidden', props, {}, {\n    ignoreProps: ['only', 'platform']\n  }),\n      from = _usePropsResolution.from,\n      till = _usePropsResolution.till,\n      only = _usePropsResolution.only,\n      platform = _usePropsResolution.platform,\n      colorMode = _usePropsResolution.colorMode;\n\n  var _useTheme = useTheme(),\n      breakpoints = _useTheme.breakpoints;\n\n  var currentColorMode = useColorMode();\n  var breakpointValueObject = Object.keys(breakpoints).reduce(function (obj, val) {\n    obj[val] = val;\n    return obj;\n  }, {});\n  var breakpointValue = useBreakpointValue(breakpointValueObject);\n\n  var _useToken = useToken('breakpoints', [breakpointValue]),\n      _useToken2 = _slicedToArray(_useToken, 1),\n      currentBreakpointValue = _useToken2[0];\n\n  var _useToken3 = useToken('breakpoints', [from]),\n      _useToken4 = _slicedToArray(_useToken3, 1),\n      fromBreakPointValue = _useToken4[0];\n\n  var _useToken5 = useToken('breakpoints', [till]),\n      _useToken6 = _slicedToArray(_useToken5, 1),\n      tillBreakPointValue = _useToken6[0];\n\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  } else if (from && till && currentBreakpointValue >= fromBreakPointValue && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  } else if (from && !till && currentBreakpointValue >= fromBreakPointValue) {\n    return null;\n  } else if (till && !from && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  } else if (Array.isArray(only) && only.includes(breakpointValue) || only === breakpointValue) {\n    return null;\n  } else if (Array.isArray(platform) && platform.includes(Platform.OS) || platform === Platform.OS) {\n    return null;\n  } else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n\n  return children;\n}\nexport default memo(Hidden);","map":{"version":3,"sources":["index.tsx"],"names":["props","colorMode","usePropsResolution","ignoreProps","breakpoints","useTheme","currentColorMode","useColorMode","breakpointValueObject","obj","breakpointValue","useBreakpointValue","useToken","from","currentBreakpointValue","till","Array","only","platform","Platform","memo"],"mappings":";;;AAAA,SAAA,IAAA,QAAA,OAAA;AAEA,SAAA,kBAAA;AACA,SAAA,kBAAA,EAAA,QAAA,EAAA,QAAA;AACA,SAAA,YAAA;;AAGA,OAAO,SAAA,MAAA,OAAsD;EAAA,IAAtC,QAAsC,QAAtC,QAAsC;EAAA,IAAvBA,KAAuB;;EAC3D,0BAAkDE,kBAAkB,CAAA,QAAA,EAAA,KAAA,EAAA,EAAA,EAIlE;IACEC,WAAW,EAAE,CAAA,MAAA,EAAA,UAAA;EADf,CAJkE,CAApE;EAAA,IAAM,IAAN,uBAAM,IAAN;EAAA,IAAM,IAAN,uBAAM,IAAN;EAAA,IAAM,IAAN,uBAAM,IAAN;EAAA,IAAM,QAAN,uBAAM,QAAN;EAAA,IAAoCF,SAApC,uBAAoCA,SAApC;;EAQA,gBAAwBI,QAAxB,EAAA;EAAA,IAAQD,WAAR,aAAQA,WAAR;;EACA,IAAME,gBAAgB,GAAGC,YAAzB,EAAA;EAEA,IAAMC,qBAAqB,GAAG,MAAM,CAAN,IAAA,CAAA,WAAA,EAAA,MAAA,CAC5B,UAAA,GAAA,EAAA,GAAA,EAA2B;IACzBC,GAAG,CAAHA,GAAG,CAAHA,GAAAA,GAAAA;IACA,OAAA,GAAA;EAH0B,CAAA,EAA9B,EAA8B,CAA9B;EAOA,IAAMC,eAAe,GAAGC,kBAAkB,CAA1C,qBAA0C,CAA1C;;EACA,gBAAiCC,QAAQ,CAAA,aAAA,EAAgB,CAAzD,eAAyD,CAAhB,CAAzC;EAAA;EAAA,IAAM,sBAAN;;EACA,iBAA8BA,QAAQ,CAAA,aAAA,EAAgB,CAAtD,IAAsD,CAAhB,CAAtC;EAAA;EAAA,IAAM,mBAAN;;EACA,iBAA8BA,QAAQ,CAAA,aAAA,EAAgB,CAtBK,IAsBL,CAAhB,CAAtC;EAAA;EAAA,IAAM,mBAAN;;EAGA,IAAI,CAAA,IAAA,IAAS,CAAT,IAAA,IAAkB,CAAlB,IAAA,IAA2B,CAA3B,SAAA,IAAyC,CAA7C,QAAA,EAAwD;IACtD,OAAA,IAAA;EADF,CAAA,MAKK,IACHC,IAAI,IAAJA,IAAAA,IAEAC,sBAAsB,IAFtBD,mBAAAA,IAGAC,sBAAsB,GAJnB,mBAAA,EAKH;IACA,OAAA,IAAA;EANG,CAAA,MAUA,IAAID,IAAI,IAAI,CAARA,IAAAA,IAAiBC,sBAAsB,IAA3C,mBAAA,EAAoE;IACvE,OAAA,IAAA;EADG,CAAA,MAKA,IAAIC,IAAI,IAAI,CAARA,IAAAA,IAAiBD,sBAAsB,GAA3C,mBAAA,EAAmE;IACtE,OAAA,IAAA;EADG,CAAA,MAMA,IACFE,KAAK,CAALA,OAAAA,CAAAA,IAAAA,KAAuBC,IAAI,CAAJA,QAAAA,CAAxB,eAAwBA,CAAvBD,IACDC,IAAI,KAFD,eAAA,EAGH;IACA,OAAA,IAAA;EAJG,CAAA,MAQA,IACFD,KAAK,CAALA,OAAAA,CAAAA,QAAAA,KAA2BE,QAAQ,CAARA,QAAAA,CAAkBC,QAAQ,CAAtD,EAA4BD,CAA3BF,IACDE,QAAQ,KAAKC,QAAQ,CAFlB,EAAA,EAGH;IACA,OAAA,IAAA;EAJG,CAAA,MAOA,IAAIlB,SAAS,KAAKK,gBAAgB,CAAlC,SAAA,EAA8C;IACjD,OAAA,IAAA;EACD;;EACD,OAAA,QAAA;AACD;AAED,eAAec,IAAI,CAAnB,MAAmB,CAAnB","sourcesContent":["import { memo } from 'react';\nimport type { IHiddenProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useBreakpointValue, useTheme, useToken } from '../../../hooks';\nimport { useColorMode } from '../../../core/color-mode/hooks';\nimport { Platform } from 'react-native';\n\nexport function Hidden({ children, ...props }: IHiddenProps) {\n  const { from, till, only, platform, colorMode } = usePropsResolution(\n    'Hidden',\n    props,\n    {},\n    {\n      ignoreProps: ['only', 'platform'],\n    }\n  );\n  const { breakpoints } = useTheme();\n  const currentColorMode = useColorMode();\n\n  const breakpointValueObject = Object.keys(breakpoints).reduce(\n    (obj: any, val: string) => {\n      obj[val] = val;\n      return obj;\n    },\n    {}\n  );\n  const breakpointValue = useBreakpointValue(breakpointValueObject);\n  const [currentBreakpointValue] = useToken('breakpoints', [breakpointValue]);\n  const [fromBreakPointValue] = useToken('breakpoints', [from]);\n  const [tillBreakPointValue] = useToken('breakpoints', [till]);\n\n  //if no prop is passed, it will hide the element wrapped with hidden\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  }\n\n  //if from and till prop exists, it will hide the element wrapped accordingly\n  else if (\n    from &&\n    till &&\n    currentBreakpointValue >= fromBreakPointValue &&\n    currentBreakpointValue < tillBreakPointValue\n  ) {\n    return null;\n  }\n\n  //if from prop exists, it will hide the element wrapped starting from that breakpoint.\n  else if (from && !till && currentBreakpointValue >= fromBreakPointValue) {\n    return null;\n  }\n\n  //if till prop exists, it will hide the element wrapped starting from  0 till that breakpoint.\n  else if (till && !from && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  }\n\n  //if only prop exists and is array, check that array consists current breakpoint value, and if that exists, hide on that breakpoint to next breakpoint.\n  // if only prop is string, hide on that breakpoint to next breakpoint.\n  else if (\n    (Array.isArray(only) && only.includes(breakpointValue)) ||\n    only === breakpointValue\n  ) {\n    return null;\n  }\n  //if platform prop exists and is array, check that array consists current platform value, and if that exists, hide on that platform.\n  // if platform prop is string, hide on that platform.\n  else if (\n    (Array.isArray(platform) && platform.includes(Platform.OS)) ||\n    platform === Platform.OS\n  ) {\n    return null;\n  }\n  //if colormode prop is valid string, hide on that colormode.\n  else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n  return children;\n}\n\nexport default memo(Hidden);\nexport type { IHiddenProps };\n"]},"metadata":{},"sourceType":"module"}