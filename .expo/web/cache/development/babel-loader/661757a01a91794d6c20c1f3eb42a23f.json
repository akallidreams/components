{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"startColor\", \"endColor\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { usePropsResolution } from \"../../../hooks\";\nimport { canUseDom } from \"../../../utils\";\nimport Box from \"../../primitives/Box\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useToken } from \"../../../hooks/useToken\";\n\nvar Skeleton = function Skeleton(props, ref) {\n  var isDomUsable = canUseDom();\n\n  var _usePropsResolution = usePropsResolution('Skeleton', props),\n      children = _usePropsResolution.children,\n      startColor = _usePropsResolution.startColor,\n      endColor = _usePropsResolution.endColor,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  var blinkAnim = React.useRef(new Animated.Value(0)).current;\n  var tokenisedStartColor = useToken('colors', startColor);\n  React.useEffect(function () {\n    if (isDomUsable) {\n      var blink = Animated.sequence([Animated.timing(blinkAnim, {\n        toValue: 1,\n        duration: resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n        useNativeDriver: Platform.OS !== 'web'\n      }), Animated.timing(blinkAnim, {\n        toValue: 0,\n        duration: resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n        useNativeDriver: Platform.OS !== 'web'\n      })]);\n      Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable, resolvedProps]);\n  var skeletonStyle = {\n    skeleton: {\n      height: '100%',\n      width: '100%',\n      backgroundColor: tokenisedStartColor,\n      opacity: blinkAnim\n    }\n  };\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return resolvedProps.isLoaded ? children : React.createElement(Box, _extends({\n    bg: endColor\n  }, resolvedProps, {\n    ref: ref\n  }), React.createElement(Animated.View, {\n    style: skeletonStyle.skeleton\n  }));\n};\n\nexport default memo(forwardRef(Skeleton));","map":{"version":3,"sources":["Skeleton.tsx"],"names":["Skeleton","isDomUsable","canUseDom","resolvedProps","usePropsResolution","blinkAnim","React","Animated","tokenisedStartColor","useToken","blink","toValue","duration","useNativeDriver","Platform","skeletonStyle","skeleton","height","width","backgroundColor","opacity","useHasResponsiveProps","endColor","ref","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;;;AAEA,SAAA,kBAAA;AACA,SAAA,SAAA;AACA,OAAA,GAAA;AAEA,SAAA,qBAAA;AACA,SAAA,QAAA;;AAEA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAAA,KAAA,EAAA,GAAA,EAAqC;EACpD,IAAMC,WAAW,GAAGC,SAApB,EAAA;;EACA,0BAKIE,kBAAkB,CAAA,UAAA,EAP8B,KAO9B,CALtB;EAAA,IAAM,QAAN,uBAAM,QAAN;EAAA,IAAM,UAAN,uBAAM,UAAN;EAAA,IAAM,QAAN,uBAAM,QAAN;EAAA,IAIKD,aAJL;;EAOA,IAAME,SAAS,GAAGC,KAAK,CAALA,MAAAA,CAAa,IAAIC,QAAQ,CAAZ,KAAA,CAAbD,CAAa,CAAbA,EAAlB,OAAA;EACA,IAAME,mBAAmB,GAAGC,QAAQ,CAAA,QAAA,EAVgB,UAUhB,CAApC;EAGAH,KAAK,CAALA,SAAAA,CAAgB,YAAM;IAEpB,IAAA,WAAA,EAAiB;MACf,IAAMI,KAAK,GAAG,QAAQ,CAAR,QAAA,CAAkB,CAC9B,QAAQ,CAAR,MAAA,CAAA,SAAA,EAA2B;QACzBC,OAAO,EADkB,CAAA;QAEzBC,QAAQ,EACNT,aAAa,CAAbA,YAAAA,GAAAA,KAAAA,IAAsC,IAAIA,aAAa,CAHhC,KAGvBA,CAHuB;QAIzBU,eAAe,EAAEC,QAAQ,CAARA,EAAAA,KAAgB;MAJR,CAA3B,CAD8B,EAO9B,QAAQ,CAAR,MAAA,CAAA,SAAA,EAA2B;QACzBH,OAAO,EADkB,CAAA;QAEzBC,QAAQ,EACNT,aAAa,CAAbA,YAAAA,GAAAA,KAAAA,IAAsC,IAAIA,aAAa,CAHhC,KAGvBA,CAHuB;QAIzBU,eAAe,EAAEC,QAAQ,CAARA,EAAAA,KAAgB;MAJR,CAA3B,CAP8B,CAAlB,CAAd;MAcAP,QAAQ,CAARA,IAAAA,CAAAA,KAAAA,EAAAA,KAAAA;IACD;EAlBHD,CAAAA,EAmBG,CAAA,SAAA,EAAA,WAAA,EAnBHA,aAmBG,CAnBHA;EAqBA,IAAMS,aAAkB,GAAG;IACzBC,QAAQ,EAAE;MACRC,MAAM,EADE,MAAA;MAERC,KAAK,EAFG,MAAA;MAGRC,eAAe,EAHP,mBAAA;MAIRC,OAAO,EAJC;IAAA;EADe,CAA3B;;EAUA,IAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;IAChC,OAAA,IAAA;EACD;;EAED,OAAOlB,aAAa,CAAbA,QAAAA,GAAAA,QAAAA,GAGL,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;IAAK,EAAE,EAAEmB;EAAT,CAAA,EAAA,aAAA,EAAA;IAAsC,GAAG,EAAEC;EAA3C,CAAA,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;IAAe,KAAK,EAAER,aAAa,CAACC;EAApC,CAAA,CADF,CAHF;AAhDF,CAAA;;AAyDA,eAAeQ,IAAI,CAACC,UAAU,CAA9B,QAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Animated, Platform } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport { canUseDom } from '../../../utils';\nimport Box from '../../primitives/Box';\nimport type { ISkeletonProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useToken } from '../../../hooks/useToken';\n\nconst Skeleton = (props: ISkeletonProps, ref: any) => {\n  const isDomUsable = canUseDom();\n  const {\n    children,\n    startColor,\n    endColor,\n    ...resolvedProps\n  } = usePropsResolution('Skeleton', props);\n  // Setting blink Animation\n  const blinkAnim = React.useRef(new Animated.Value(0)).current;\n  const tokenisedStartColor = useToken('colors', startColor);\n\n  // Generating blink animation in a sequence\n  React.useEffect(() => {\n    //Check if window is loaded\n    if (isDomUsable) {\n      const blink = Animated.sequence([\n        Animated.timing(blinkAnim, {\n          toValue: 1,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n        Animated.timing(blinkAnim, {\n          toValue: 0,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n      ]);\n      Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable, resolvedProps]);\n\n  const skeletonStyle: any = {\n    skeleton: {\n      height: '100%',\n      width: '100%',\n      backgroundColor: tokenisedStartColor,\n      opacity: blinkAnim, // Bind opacity to animated value\n    },\n  };\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return resolvedProps.isLoaded ? (\n    children\n  ) : (\n    <Box bg={endColor} {...resolvedProps} ref={ref}>\n      <Animated.View style={skeletonStyle.skeleton} />\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Skeleton));\n"]},"metadata":{},"sourceType":"module"}