{"ast":null,"code":"import NativeModulesProxy from \"./NativeModulesProxy\";\nexport function requireNativeModule(moduleName) {\n  var _global$ExpoModules$m, _global$ExpoModules;\n\n  var nativeModule = (_global$ExpoModules$m = (_global$ExpoModules = global.ExpoModules) == null ? void 0 : _global$ExpoModules[moduleName]) != null ? _global$ExpoModules$m : NativeModulesProxy[moduleName];\n\n  if (!nativeModule) {\n    throw new Error(\"Cannot find native module '\" + moduleName + \"'\");\n  }\n\n  return nativeModule;\n}","map":{"version":3,"sources":["../src/requireNativeModule.ts"],"names":[],"mappings":"AAAA,OAAO,kBAAP;AAoBA,OAAM,SAAU,mBAAV,CAAgD,UAAhD,EAAkE;EAAA;;EACtE,IAAM,YAAY,mDAChB,MAAM,CAAC,WADS,qBAChB,oBAAqB,UAArB,CADgB,oCACoB,kBAAkB,CAAC,UAAD,CADxD;;EAGA,IAAI,CAAC,YAAL,EAAmB;IACjB,MAAM,IAAI,KAAJ,iCAAwC,UAAxC,OAAN;EACD;;EACD,OAAO,YAAP;AACD","sourcesContent":["import NativeModulesProxy from './NativeModulesProxy';\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var ExpoModules:\n    | undefined\n    | {\n        [key: string]: any;\n      };\n}\n\n/**\n * Imports the native module registered with given name. In the first place it tries to load\n * the module installed through the JSI host object and then falls back to the bridge proxy module.\n * Notice that the modules loaded from the proxy may not support some features like synchronous functions.\n *\n * @param moduleName Name of the requested native module.\n * @returns Object representing the native module.\n * @throws Error when there is no native module with given name.\n */\nexport function requireNativeModule<ModuleType = any>(moduleName: string): ModuleType {\n  const nativeModule: ModuleType =\n    global.ExpoModules?.[moduleName] ?? NativeModulesProxy[moduleName];\n\n  if (!nativeModule) {\n    throw new Error(`Cannot find native module '${moduleName}'`);\n  }\n  return nativeModule;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}