{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useKeyboardDismissable, usePropsResolution, useToken } from \"../../../hooks\";\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Popper } from \"../Popper\";\nimport { PopoverContext } from \"./PopoverContext\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nexport var PopoverContent = React.forwardRef(function (props, ref) {\n  var _ref, _ref2, _props$bgColor;\n\n  var _React$useContext = React.useContext(PopoverContext),\n      onClose = _React$useContext.onClose,\n      initialFocusRef = _React$useContext.initialFocusRef,\n      finalFocusRef = _React$useContext.finalFocusRef,\n      popoverContentId = _React$useContext.popoverContentId,\n      headerMounted = _React$useContext.headerMounted,\n      bodyMounted = _React$useContext.bodyMounted,\n      bodyId = _React$useContext.bodyId,\n      headerId = _React$useContext.headerId,\n      isOpen = _React$useContext.isOpen;\n\n  var resolvedProps = usePropsResolution('PopoverContent', props);\n  var arrowDefaultColor = (_ref = (_ref2 = (_props$bgColor = props.bgColor) !== null && _props$bgColor !== void 0 ? _props$bgColor : props.bg) !== null && _ref2 !== void 0 ? _ref2 : props.backgroundColor) !== null && _ref !== void 0 ? _ref : resolvedProps.backgroundColor;\n  var color = useToken('colors', arrowDefaultColor);\n  React.useEffect(function () {\n    var finalFocusRefCurrentVal = finalFocusRef === null || finalFocusRef === void 0 ? void 0 : finalFocusRef.current;\n\n    if (initialFocusRef && initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    }\n\n    return function () {\n      if (finalFocusRefCurrentVal) {\n        finalFocusRefCurrentVal.focus();\n      }\n    };\n  }, [finalFocusRef, initialFocusRef]);\n  useKeyboardDismissable({\n    enabled: true,\n    callback: onClose\n  });\n  var arrowElement = null;\n  var restChildren = [];\n  React.Children.forEach(props.children, function (child) {\n    if (child.type.displayName === 'PopperArrow') {\n      var _child$props$color;\n\n      arrowElement = React.cloneElement(child, {\n        backgroundColor: (_child$props$color = child.props.color) !== null && _child$props$color !== void 0 ? _child$props$color : color\n      });\n    } else {\n      restChildren.push(child);\n    }\n  });\n  var accessibilityProps = Platform.OS === 'web' ? {\n    'accessibilityRole': 'dialog',\n    'aria-labelledby': headerMounted ? headerId : undefined,\n    'aria-describedby': bodyMounted ? bodyId : undefined\n  } : {};\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Popper.Content, _extends({\n    nativeID: popoverContentId\n  }, accessibilityProps, resolvedProps, {\n    ref: ref,\n    isOpen: isOpen\n  }), arrowElement, restChildren);\n});\nPopoverContent.displayName = 'PopoverContent';","map":{"version":3,"sources":["PopoverContent.tsx"],"names":["PopoverContent","isOpen","React","resolvedProps","usePropsResolution","arrowDefaultColor","props","color","useToken","finalFocusRefCurrentVal","finalFocusRef","initialFocusRef","useKeyboardDismissable","enabled","callback","onClose","arrowElement","restChildren","child","backgroundColor","accessibilityProps","headerMounted","bodyMounted","undefined","useHasResponsiveProps","popoverContentId"],"mappings":"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","sourcesContent":["import {\n  useKeyboardDismissable,\n  usePropsResolution,\n  useToken,\n} from '../../../hooks';\nimport React from 'react';\nimport { Platform } from 'react-native';\nimport type { IPopoverContentProps } from './types';\nimport { Popper } from '../Popper';\nimport { PopoverContext } from './PopoverContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const PopoverContent = React.forwardRef(\n  (props: IPopoverContentProps, ref: any) => {\n    const {\n      onClose,\n      initialFocusRef,\n      finalFocusRef,\n      popoverContentId,\n      headerMounted,\n      bodyMounted,\n      bodyId,\n      headerId,\n      isOpen,\n    } = React.useContext(PopoverContext);\n    const resolvedProps = usePropsResolution('PopoverContent', props);\n\n    const arrowDefaultColor =\n      props.bgColor ??\n      props.bg ??\n      props.backgroundColor ??\n      resolvedProps.backgroundColor;\n    const color = useToken('colors', arrowDefaultColor);\n\n    React.useEffect(() => {\n      const finalFocusRefCurrentVal = finalFocusRef?.current;\n      if (initialFocusRef && initialFocusRef.current) {\n        initialFocusRef.current.focus();\n      }\n\n      return () => {\n        if (finalFocusRefCurrentVal) {\n          finalFocusRefCurrentVal.focus();\n        }\n      };\n    }, [finalFocusRef, initialFocusRef]);\n\n    useKeyboardDismissable({\n      enabled: true,\n      callback: onClose,\n    });\n\n    let arrowElement = null;\n    const restChildren: any = [];\n    React.Children.forEach(props.children, (child) => {\n      if (child.type.displayName === 'PopperArrow') {\n        arrowElement = React.cloneElement(child, {\n          backgroundColor: child.props.color ?? color,\n        });\n      } else {\n        restChildren.push(child);\n      }\n    });\n\n    const accessibilityProps =\n      Platform.OS === 'web'\n        ? ({\n            'accessibilityRole': 'dialog',\n            'aria-labelledby': headerMounted ? headerId : undefined,\n            'aria-describedby': bodyMounted ? bodyId : undefined,\n          } as any)\n        : {};\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n\n    return (\n      <Popper.Content\n        nativeID={popoverContentId}\n        {...accessibilityProps}\n        {...resolvedProps}\n        ref={ref}\n        isOpen={isOpen}\n      >\n        {arrowElement}\n        {restChildren}\n      </Popper.Content>\n    );\n  }\n);\n\nPopoverContent.displayName = 'PopoverContent';\n"]},"metadata":{},"sourceType":"module"}