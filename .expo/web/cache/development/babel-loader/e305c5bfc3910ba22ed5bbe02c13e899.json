{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Color from 'tinycolor2';\nimport { useToken } from \"./useToken\";\nimport { useAccessibleColors } from \"../core/color-mode/hooks\";\nimport { useNativeBaseConfig } from \"../core/NativeBaseContext\";\nexport function useContrastText(bg, color) {\n  var _useToken = useToken('colors', ['contrastThreshold', 'darkText', 'lightText', bg, color !== null && color !== void 0 ? color : '']),\n      _useToken2 = _slicedToArray(_useToken, 5),\n      contrastThreshold = _useToken2[0],\n      trueDarkText = _useToken2[1],\n      trueLightText = _useToken2[2],\n      trueBg = _useToken2[3],\n      trueColor = _useToken2[4];\n\n  var suppressColorAccessibilityWarning = useNativeBaseConfig('NativeBaseConfigProvider').config.suppressColorAccessibilityWarning;\n\n  var _useAccessibleColors = useAccessibleColors(),\n      _useAccessibleColors2 = _slicedToArray(_useAccessibleColors, 1),\n      accessibleColors = _useAccessibleColors2[0];\n\n  if (useNativeBaseConfig('NativeBaseConfigProvider').disableContrastText) {\n    return trueColor;\n  }\n\n  if (typeof bg !== 'string') {\n    return;\n  }\n\n  var _bg$split = bg.split('.'),\n      _bg$split2 = _slicedToArray(_bg$split, 2),\n      bgThemeColorVariant = _bg$split2[0],\n      bgShade = _bg$split2[1];\n\n  var textColor = !accessibleColors && bgThemeColorVariant && themeColorsThresholdShades[bgThemeColorVariant] ? getContrastThemeColor(bgThemeColorVariant, bgShade) : getAccessibleContrastColor(contrastThreshold, trueDarkText, trueLightText, trueBg, trueColor, bg, color, suppressColorAccessibilityWarning);\n  return textColor;\n}\n\nfunction getContrastThemeColor(bgThemeColorVariant, bgShade) {\n  var shadeThreshold = themeColorsThresholdShades[bgThemeColorVariant];\n\n  if (bgShade && shadeThreshold && (bgShade >= shadeThreshold && bgThemeColorVariant !== 'dark' || bgThemeColorVariant === 'dark' && bgShade < shadeThreshold)) {\n    return 'lightText';\n  }\n\n  return 'darkText';\n}\n\nfunction getAccessibleContrastColor(contrastThreshold, trueDarkText, trueLightText, trueBg, trueColor, bg, color, suppressColorAccessibilityWarning) {\n  if (typeof trueBg !== 'string') {\n    trueBg = bg;\n  }\n\n  var trueContrastColor;\n  var contrastColorToken;\n  var darkTextConstrast = getContrastRatio(trueBg, trueDarkText);\n  var lightTextConstrast = getContrastRatio(trueBg, trueLightText);\n\n  if (darkTextConstrast >= contrastThreshold || darkTextConstrast > lightTextConstrast) {\n    trueContrastColor = trueDarkText;\n    contrastColorToken = 'darkText';\n  } else {\n    trueContrastColor = trueLightText;\n    contrastColorToken = 'lightText';\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    var contrast = getContrastRatio(trueBg, trueColor ? trueColor : trueContrastColor);\n\n    if (contrast < 3 && !suppressColorAccessibilityWarning) {\n      console.warn([\"NativeBase: The contrast ratio of \".concat(contrast, \":1 for \").concat(color ? color : contrastColorToken, \" on \").concat(bg), 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\\n'));\n    }\n  }\n\n  return contrastColorToken;\n}\n\nfunction getContrastRatio(foreground, background) {\n  var lumA = Color(foreground).getLuminance();\n  var lumB = Color(background).getLuminance();\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\nvar themeColorsThresholdShades = {\n  rose: 500,\n  pink: 500,\n  fuchsia: 800,\n  purple: 700,\n  violet: 600,\n  indigo: 500,\n  blue: 400,\n  lightBlue: 400,\n  cyan: 300,\n  teal: 300,\n  emerald: 300,\n  tertiary: 300,\n  green: 400,\n  lime: 600,\n  yellow: 800,\n  amber: 500,\n  orange: 500,\n  red: 500,\n  warmGray: 500,\n  trueGray: 500,\n  gray: 500,\n  coolGray: 500,\n  blueGray: 500,\n  dark: 500,\n  danger: 500,\n  error: 500,\n  success: 400,\n  warning: 500,\n  muted: 500,\n  primary: 500,\n  info: 400,\n  secondary: 500,\n  light: 500\n};","map":{"version":3,"sources":["useContrastText.ts"],"names":["useToken","color","suppressColorAccessibilityWarning","useNativeBaseConfig","useAccessibleColors","bg","textColor","themeColorsThresholdShades","getContrastThemeColor","getAccessibleContrastColor","shadeThreshold","bgShade","bgThemeColorVariant","trueBg","darkTextConstrast","getContrastRatio","lightTextConstrast","trueContrastColor","contrastColorToken","process","contrast","trueColor","console","lumA","Color","lumB","Math","rose","pink","fuchsia","purple","violet","indigo","blue","lightBlue","cyan","teal","emerald","tertiary","green","lime","yellow","amber","orange","red","warmGray","trueGray","gray","coolGray","blueGray","dark","danger","error","success","warning","muted","primary","info","secondary","light"],"mappings":"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","sourcesContent":["import Color from 'tinycolor2';\nimport { useToken } from './useToken';\nimport { useAccessibleColors } from '../core/color-mode/hooks';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\n\nexport function useContrastText(bg: string, color?: string) {\n  const [\n    contrastThreshold,\n    trueDarkText,\n    trueLightText,\n    trueBg,\n    trueColor,\n  ] = useToken('colors', [\n    'contrastThreshold',\n    'darkText',\n    'lightText',\n    bg,\n    color ?? '',\n  ]);\n\n  const suppressColorAccessibilityWarning = useNativeBaseConfig(\n    'NativeBaseConfigProvider'\n  ).config.suppressColorAccessibilityWarning;\n\n  const [accessibleColors] = useAccessibleColors();\n\n  if (useNativeBaseConfig('NativeBaseConfigProvider').disableContrastText) {\n    return trueColor;\n  }\n  if (typeof bg !== 'string') {\n    return;\n  }\n\n  const [bgThemeColorVariant, bgShade] = bg.split('.');\n\n  const textColor =\n    !accessibleColors &&\n    bgThemeColorVariant &&\n    themeColorsThresholdShades[bgThemeColorVariant]\n      ? getContrastThemeColor(bgThemeColorVariant, bgShade)\n      : getAccessibleContrastColor(\n          contrastThreshold,\n          trueDarkText,\n          trueLightText,\n          trueBg,\n          trueColor,\n          bg,\n          color,\n          suppressColorAccessibilityWarning\n        );\n\n  return textColor;\n}\n\nfunction getContrastThemeColor(bgThemeColorVariant: string, bgShade: string) {\n  const shadeThreshold = themeColorsThresholdShades[bgThemeColorVariant];\n  if (\n    bgShade &&\n    shadeThreshold &&\n    ((bgShade >= shadeThreshold && bgThemeColorVariant !== 'dark') ||\n      (bgThemeColorVariant === 'dark' && bgShade < shadeThreshold))\n  ) {\n    return 'lightText';\n  }\n  return 'darkText';\n}\nfunction getAccessibleContrastColor(\n  contrastThreshold: number,\n  trueDarkText: string,\n  trueLightText: string,\n  trueBg: string,\n  trueColor: string,\n  bg: string,\n  color?: string,\n  suppressColorAccessibilityWarning?: boolean\n) {\n  if (typeof trueBg !== 'string') {\n    trueBg = bg;\n  }\n  let trueContrastColor;\n  let contrastColorToken;\n  const darkTextConstrast = getContrastRatio(trueBg, trueDarkText);\n  const lightTextConstrast = getContrastRatio(trueBg, trueLightText);\n\n  if (\n    darkTextConstrast >= contrastThreshold ||\n    darkTextConstrast > lightTextConstrast\n  ) {\n    trueContrastColor = trueDarkText;\n    contrastColorToken = 'darkText';\n  } else {\n    trueContrastColor = trueLightText;\n    contrastColorToken = 'lightText';\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    const contrast = getContrastRatio(\n      trueBg,\n      trueColor ? trueColor : trueContrastColor\n    );\n    if (contrast < 3 && !suppressColorAccessibilityWarning) {\n      console.warn(\n        [\n          `NativeBase: The contrast ratio of ${contrast}:1 for ${\n            color ? color : contrastColorToken\n          } on ${bg}`,\n          'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.',\n          'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast',\n        ].join('\\n')\n      );\n    }\n  }\n  return contrastColorToken;\n}\nfunction getContrastRatio(foreground: string, background: string) {\n  const lumA = Color(foreground).getLuminance();\n  const lumB = Color(background).getLuminance();\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\nconst themeColorsThresholdShades: any = {\n  rose: 500,\n  pink: 500,\n  fuchsia: 800,\n  purple: 700,\n  violet: 600,\n  indigo: 500,\n  blue: 400,\n  lightBlue: 400,\n  cyan: 300,\n  teal: 300,\n  emerald: 300,\n  tertiary: 300,\n  green: 400,\n  lime: 600,\n  yellow: 800,\n  amber: 500,\n  orange: 500,\n  red: 500,\n  warmGray: 500,\n  trueGray: 500,\n  gray: 500,\n  coolGray: 500,\n  blueGray: 500,\n  dark: 500,\n  danger: 500,\n  error: 500,\n  success: 400,\n  warning: 500,\n  muted: 500,\n  primary: 500,\n  info: 400,\n  secondary: 500,\n  light: 500,\n};\n"]},"metadata":{},"sourceType":"module"}